{"/soft/maixpy/zh/course/image/basic/display_images.html": {"title": "显示图片", "content": "---\ntitle: 显示图片\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 显示图片\n---\n\n\n\n显示图片很简单， 直接使用 `lcd` 模块，调用函数进行显示即可， 如下：\n\n```python\nimport lcd, image\n\nlcd.init()\n\nimg = image.Image(\"/sd/test.jpg\")\nlcd.display(img)\n```\n\n但是不同的屏幕初始化序列可能不一样， 在`lcd.init`的时候有很多可选参数， 具体看 API 文档的描述，常见的如下\n\n对于 IPS 屏幕，需要反色：\n```python\nlcd.init(type=2)\n```\n\n对于屏幕体质不是很好， 需要降低频率，或者体质很好需要超频：\n```python\nlcd.init(freq = 15000000)\n```\n\n另外， 也可是设置屏幕的旋转方向：\n```python\nlcd.rotation(2)\n```\n参数是`0～3`, 分别代表顺时针旋转 `0度` `90度` `180度` `270度`\n\n更多方法， 请参考 [lcd 文档](./../../../api_reference/machine_vision/lcd.html)"}, "/soft/maixpy/zh/course/image/basic/draw.html": {"title": "画图 写字", "content": "---\ntitle: 画图 写字\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 画图 写字\n---\n\n\n\n有两种方式，推荐第二种\n\n## 第一种， 使用`lcd`模块直接在屏幕上画\n\n```python\nimport image, lcd\n\nlcd.init()\n\nlcd.draw_string(0, 0, \"hello\")\n```\n\n更多的函数和参数，参见[lcd API 手册](./../../../api_reference/machine_vision/lcd.html)\n\n## 第二种， 使用`image` 模块在内存中画，画完后使用`lcd.display`函数将整张图片展示到屏幕\n\n```python\nimport image, lcd\n\nlcd.init()\n\nimg = image.Image(size=(320, 240))\nimg.draw_string(0,0, \"hello\")\nlcd.display(img)\n\n```\n\n更多的函数和参数，可以看 [image API 手册](./../../../api_reference/machine_vision/image/image.html) , 在页面搜索`image.draw` 可以找到所有画图函数\n需要中文（多国语言）支持请看 [如何显示中文](./../../../course/image/image_draw_font/image_draw_font.html) ,或搜索 “字库” 。"}, "/soft/maixpy/zh/course/image/basic/vary.html": {"title": "基本图像变换 和 常用操作", "content": "---\ntitle: 基本图像变换 和 常用操作\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 基本图像变换 和 常用操作\n---\n\n\n这里简单介绍一些经常用到的图像的基本变换操作\n\n旋转：\n\n```python\nimg.rotation_corr()\n```\n\n改变图像尺寸：\n\n```python\nimg.resize()\n```\n\n更多的图像变换请看[image API](./../../../api_reference/machine_vision/image/image.html)\n\n## 图像缓冲区介绍\n\nMaixPy 为图像设计了两个缓冲区，\n* 一个是`RGB565`缓冲区，顾名思义， 是以`RGB565`的格式存放这图片的信息的一块内存。注意在内存中的排序是`[像素1 RGB, 像素2 RGB...]`\n* 另一个是`RGB888`缓冲区，顾名思义， 是以`RGB88`的格式存放这图片的信息的一块内存。注意在内存中的排序是`[所有像素 R, 所有像素 G， 所有像素 B]`, 我们也称之为`AI`内存\n\n这里使用两个内存块主要的原因是底层代码所有图片操作以及`LCD`显示均是基于`RGB565`， 但是`KPU`又需要`RGB888`的输入。\n\n```\n                   +---------------+\n                   |               |\n          +--------+ camera(sensor)+-------+\n          |        |               |       |\n          |        +---------------+       |\n          |                                |\n+---------v------+                +--------v---------+\n|                | img.pix_to_ai()|                  |\n|      RGB565    +--------------->+      RGB888      |\n|                |                |                  |\n+--------+-------+                +------+-----------+\n         ^                               |\n         |                               |\n         |                               v\n+--------+----------+             +------+-----------+\n|                   |             |                  |\n|     image ops     |             |   KPU            |\n|                   |             |                  |\n+-------------------+             +------------------+\n\n```\n\n\n\n只有摄像头采集图片时，硬件会自动放一份数据到`RGB888`内存区域， 其它的都不会自动填充`RGB888`内存块， 软件操作只会对`RGB565`内存进行操作，不会自动更新`RGB888`，（因为更新需要消耗时间） 这很值得注意，\n这意味着，每次我们用更改了`RGB565`内存块，比如执行了`img = img.resize((224, 224))`，如果希望`KPU`使用更改过后的图片， 需要执行`img.pix_to_ai()`来将`RGB565`的图像手动更新到`RGB888`的区域，然后才可以调用`kpu`相关的函数进行模型推理！\n\n同样反方向更新也提供 API： `img.ai_to_pix()`， 这会将`RGB888`区域的数据更新到`RGB565`区域\n\n\n## resize 修改分辨率\n\n```python\nimport image\nimg = image.Image(size=(100, 100))\nimg2 = img.resize(50, 50)\nprint(img)\nprint(img2)\n```\n\n## 获取和修改像素值\n\n```python\nimport image\nimg = image.Image(size=(10, 10))\nprint(\"pixel 0:\", img[0], img.get_pixel(0, 0))\nimg[0] = (255, 0, 0)\nimg = img.set_pixel(1, 0, (255, 255, 10))\nprint(\"after pixel 0 change:\", img[0], img[1])\n```\n\n这里设置的第二个像素点`B`为`10`， 实际发现读出来是`8`， 这是正常现象，因为前面说了，在内存中储存是用了`RGB565`进行储存，所以会有误差\n\n\n## 复制图像\n\n```python\nimport image\nimg = image.Image(size=(10, 10))\nimg2 = img.copy()\nimg2[0] = (255, 0, 0)\nprint(img[0], img2[0])\n```\n\n\n## 剪裁图像\n\n同样使用`copy`函数\n\n```python\nimport image\nimg = image.Image(size=(10, 10))\nimg2 = img.copy(roi=(0, 0, 5, 5))\nimg2[0] = (255, 0, 0)\nprint(img)\nprint(img2)\nprint(img[0], img2[0])\n```\n\n\n## 转换成 bytes 对象\n\n转换成 `RGB565` 字符串\n\n```python\nimport image\nimg = image.Image(size=(10, 10))\nimg[0] = (255, 0, 0)\nimg_bytes = img.to_bytes()\nprint(\"bytes length: %d bytes[0]: %x%x\" %(len(img_bytes), img_bytes[0], img_bytes[1]))\n```\n这里输出的值为`RGB565`格式，以两个字节表示一个像素点储存\n\n另外， 也可以先将图片压缩为 `JPEG` 格式，然后再转换成`bytes`\n```python\nimport image\nimg = image.Image(size=(10, 10))\nimg = img.compressed(quality=20)\njpeg_bytes = img.to_bytes()\nprint(\"bytes length: %d bytes[0]: %x%x\" %(len(jpeg_bytes), jpeg_bytes[0], jpeg_bytes[1]))\n```\n\n这里使用`compressed`函数不会修改原图， 使用`compress()`函数则会修改原图， 但是压缩后的大小如果比原图占用的空间还大，就会失败\n\n\n\n## 转换为灰度图像\n\n```python\nimg = img.to_grayscale(copy=False)\n```\n\n这里 `copy` 参数的意思就是是否要重新申请一片内存， 不修改原图的意思\n\n## 转换为 RGB565 彩图\n\n转换为 彩图， 注意只是格式成为了彩图， 画面并不是彩图， 如果需要将灰度图转换为彩图，使用`img.to_rainbow()`\n\n```python\nimg = img.to_rgb565(copy=True)\n```\n\n这里 `copy` 参数的意思就是是否要重新申请一片内存， 不修改原图的意思\n如果原图是灰度图， 必须是`True`\n\n## 转换为彩图\n\n```python\nimg = img.to_rainbow(copy=True)\n```\n\n这里 `copy` 参数的意思就是是否要重新申请一片内存， 不修改原图的意思\n如果原图是灰度图， 必须是`True`\n\n## 保存到文件系统\n\n```python\nimg.save(\"/sd/test.jpg\", quality=95)\nimg.save(\"/sd/test.bmp\")\n```\n\n\n## 旋转\n\n```python\nimg.rotation_corr([x_rotation=0.0[, y_rotation=0.0[, z_rotation=0.0[, x_translation=0.0[, y_translation=0.0[, zoom=1.0]]]]]])\n```\n\n中括号为可选参数，即沿着哪个轴旋转一定的角度， 如果`minimum`版本的固件里面没有这个函数， 可以用完全版本的固件"}, "/soft/maixpy/zh/course/image/kernel-filter.html": {"title": "核滤波", "content": "---\ntitle: 核滤波\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 核滤波\n---\n\n\n![image-20200812191240724](kernel-filter.assets/image-20200812191240724.png)\n\n\n例程\n\n```python\n# 核滤波\n#\n# 这个例子展示了核滤波。\nimport sensor, image, time\n\nsensor.reset() # 初始化sensor\n#设置图像色彩格式，有RGB565色彩图和GRAYSCALE灰度图两种\nsensor.set_pixformat(sensor.GRAYSCALE) # or sensor.RGB565\n#设置图像像素大小\nsensor.set_framesize(sensor.QVGA) # or sensor.QQVGA (or others)\nsensor.skip_frames(time = 2000) # 让新的设置生效\nclock = time.clock() # 跟踪FPS帧率\n\nkernel_size = 1 # 3x3==1, 5x5==2, 7x7==3, etc.\n\nkernel = [-2, -1,  0, \\\n          -1,  1,  1, \\\n           0,  1,  2]\n\nwhile(True):\n    clock.tick() # 追踪两个 snapshots() 之间经过的毫秒数.\n    img = sensor.snapshot() # 拍一张照片，返回图像\n\n    # Run the kernel on every pixel of the image.\n    # 在图像的每个像素上运行核\n    img.morph(kernel_size, kernel)\n\n    print(clock.fps()) # 注意: 当连接电脑后，帧率会变成一半的速度。当不连接电脑，帧率会增加。\n```"}, "/soft/maixpy/zh/course/image/find_color_blob.html": {"title": "MaixPy 查找色块", "content": "---\ntitle: MaixPy 查找色块\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy 查找色块\n---\n\n\n找出图片中指定颜色所有色块\n\n## 使用方法\n\nMaixPy 已经在 image 模块中实现有查找色块方法，需要使用非 minimum 固件版本。\n\n* 从摄像头获取图片\n\n```python\nimport image, sensor\nimg=sensor.snapshot()\n```\n\n* 从图片中查找所有色块对象(image.blob)列表, 传入的颜色阈值参数按照 LAB 格式(l_lo，l_hi，a_lo，a_hi，b_lo，b_hi)\n\n```python\ngreen_threshold   = (0,   80,  -70,   -10,   -0,   30)\nblobs = img.find_blobs([green_threshold])\n```\n\n* 操作色块对象\n  \n根据自己的需求操作色块对象, 例如将色块对象在图像中用矩形框标识出来\n\n```python\ntmp=img.draw_rectangle(b[0:4])\n```\n\n详细 API 介绍请查看[API-Image](../../api_reference/machine_vision/image/image.html).\n\n## 例程\n\n找绿色色块\n\n```python\nimport sensor\nimport image\nimport lcd\nimport time\nlcd.init()\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\ngreen_threshold   = (0,   80,  -70,   -10,   -0,   30)\nwhile True:\n    img=sensor.snapshot()\n    blobs = img.find_blobs([green_threshold])\n    if blobs:\n        for b in blobs:\n            tmp=img.draw_rectangle(b[0:4])\n            tmp=img.draw_cross(b[5], b[6])\n            c=img.get_pixel(b[5], b[6])\n    lcd.display(img)\n```"}, "/soft/maixpy/zh/course/image/sensor.html": {"title": "Sensor 感光元件", "content": "---\ntitle: Sensor 感光元件\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Sensor 感光元件\n---\n\n\nsensor模块,用于设置感光元件的参数。\n\n使用例程:\n\n- 实时预览摄像头\n\n    ```python\n    import sensor #引入感光元件的模块\n    sensor.reset()#初始化感光元件\n    sensor.set_pixformat(sensor.RGB565)#设置为彩色\n    sensor.set_framesize(sensor.QVGA)#设置图像的大小\n    sensor.skip_frames()#跳过n张照片，在更改设置后，跳过一些帧，等待感光元件变稳定。\n\n    while(True):\n        img = sensor.snapshot()#拍摄一张照片，img为一个image对象\n    ```\n\n- 初始化\n\n    ```python\n    sensor.reset()# 初始化感光元件\n    #设置彩色／黑白\n    sensor.set_pixformat()# 设置像素模式。\n    sensor.GRAYSCALE# 灰度，每个像素8bit。\n    sensor.RGB565# 彩色，每个像素16bit。\n    ```\n\n- 设置图像大小\n\n\n    sensor.QQCIF# 88x72\n    sensor.QCIF# 176x144\n    sensor.CIF# 352x288\n    sensor.QQSIF# 88x60\n    sensor.QSIF# 176x120\n    sensor.SIF# 352x240\n    sensor.QQQQVGA# 40x30\n    sensor.QQQVGA# 80x60\n    sensor.QQVGA# 160x120\n    sensor.QVGA# 320x240\n    sensor.VGA# 640x480\n\n    ```python\n    sensor.set_framesize()# 设置图像的大小\n    ```\n\n- 跳过一些帧\n\nsensor.skip_frames(n=10) 跳过 n 张照片，在更改设置后，跳过一些帧，等待感光元件变稳定。\n\n- 获取一张图像\n\nsensor.snapshot() 拍摄一张照片，返回一个 image 对象。\n\n- 自动增益／白平衡／曝光\n\nsensor.set_auto_gain() 自动增益开启(True)或者关闭(False)。\n\n在使用颜色追踪时，需要关闭自动增益。\n\nsensor.set_auto_whitebal() 自动白平衡开启(True)或者关闭(False)。\n\n在使用颜色追踪时，需要关闭自动白平衡。\n\nsensor.set_auto_exposure(enable[\\, exposure_us])\n\nenable 打开(True)或关闭(False)自动曝光。默认打开。\n\n如果 enable 为 False， 则可以用 exposure_us 设置一个固定的曝光时间(以微秒为单位)。\n\n- 设置窗口 ROI\n\n```python\nsensor.set_windowing(roi)\n```\n\nROI：Region Of Interest，图像处理中的术语”感兴趣区“。就是在从需要处理的图像中提取出的要处理的区域。\n\n```python\nsensor.set_framesize(sensor.VGA) # 高分辨率\nsensor.set_windowing((240, 240)) #取中间的 240*240 区域\n```\n\nroi 的格式是(x, y, w, h)。\n\n\n- 设置翻转\n\n```python\n#水平方向翻转\nsensor.set_hmirror(True)\n# 垂直方向翻转\nsensor.set_vflip(True)\n```"}, "/soft/maixpy/zh/course/image/adaptive-histogram-equalization.html": {"title": "", "content": "---\ntitle: \nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: \n---\n\n\n\n```python\n# 自适应直方图均衡例子\n#\n# 此示例展示了如何使用自适应直方图均衡来改善图像中的对比度。 \n#自适应直方图均衡将图像分割成区域，然后均衡这些区域中的直方图，\n#以改善图像对比度与全局直方图均衡化。 \n#此外，您可以指定剪辑限制以防止对比度变得狂野。\n\nimport sensor, image, time\n\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QQVGA)\nsensor.skip_frames(time = 2000)\nclock = time.clock()\n\nwhile(True):\n    clock.tick()\n\n    # clip_limit <0为您提供正常的自适应直方图均衡，这可能会导致大量的对比噪音...\n\n    # clip_limit=1 什么都不做。为获得最佳效果，请略高于1，如下所示。 \n    # 越高，越接近标准自适应直方图均衡，并产生巨大的对比度波动。\n\n    img = sensor.snapshot().histeq(adaptive=True, clip_limit=3)\n\n    print(clock.fps())\n```"}, "/soft/maixpy/zh/course/image/find_qrcodes.html": {"title": "MaixPy 查找二维码", "content": "---\ntitle: MaixPy 查找二维码\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy 查找二维码\n---\n\n\n从图片中识别二维码，常见的二维码为 QR Code，QR 全称 Quick Response，它比传统的条形码(Bar Code)能存更多的信息，也能表示更多的数据类型.\n\n## 使用方法\n\nimage 模块中已经实现有查找二维码方法，需要使用非 minimum 固件版本，需要准备一个二维码，可以用[草料二维码](https://cli.im/)生成你想要的内容.\n\n* 从摄像头获取图片，将摄像头对准二维码\n\n```python\nimport image, sensor\nimg=sensor.snapshot()\n```\n\n* 从图片中查找所有二维码对象(image.qrcode)列表\n\n```python\nres = img.find_qrcodes()\n```\n\n* 操作二维码对象\n\n例如打印信息\n\n```python\nprint(res[0].payload())\n```\n\n详细 API 介绍请查看[API-Image](../../api_reference/machine_vision/image/image.html).\n\n## 例程\n\n识别二维码，如果识别不到二维码，请尝试更改 `sensor.vflip()` 函数参数。\n\n```python\nimport sensor\nimport image\nimport lcd\nimport time\n\nclock = time.clock()\nlcd.init()\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.set_vflip(0)\nsensor.run(1)\nsensor.skip_frames(30)\nwhile True:\n    clock.tick()\n    img = sensor.snapshot()\n    res = img.find_qrcodes()\n    fps =clock.fps()\n    if len(res) > 0:\n        img.draw_string(2, 2, res[0].payload(), color=(0,128,0), scale=2)\n        print(res[0].payload())\n    lcd.display(img)\n```"}, "/soft/maixpy/zh/course/image/image_draw_font/image_draw_font.html": {"title": "如何显示中文", "content": "---\ntitle: 如何显示中文\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 如何显示中文\n---\n\n\nMaixPy 支持加载 Unicode 字库，Unicode（ 统一码、万国码、单一码）是计算机科学领域里的一项业界标准。\n\n有如下语种支持：\n\n* A 大写拉丁字母\"A\" A\n* ß 小写拉丁字母\"Sharp S\" ß\n* þ 小写拉丁字母\"Thorn\" þ （小字库不支持）\n* Δ 大写希腊字母\"Delta\" Δ\n* Й 大写斯拉夫字母\"Short I\" Й\n* ק 希伯来字母\"Qof\" ק\n* م 阿拉伯字母 \"Meem\" م\n* ๗ 泰文数字 7 ๗\n* ቐ 埃塞俄比亚音节文字\"Qha\" ቐ\n* あ 日语平假名 \"A\" あ\n* ア 日语片假名 \"A\" ア\n* 叶 简体汉字 \"叶\" 叶\n* 轉 繁体汉字 \"轉\" 轉\n* 엽 韩国音节文字 \" Yeob\" 엽\n\n该功能接口均使用 `image.Image()` 对象完成，MaixPy 固件请使用最新版本 2020年9月2日。\n\n## 字模接口\n\n使用 draw_font 打印字模字符串，类似 `img.draw_font(10, 20, 8, 8,  b'/x20/xFC/xFC/x2C/xAC/x4C/x4D/xA3')`。\n\n```python\nimport lcd, image\nlcd.init()\nimg = image.Image()\ntmp = b'/x20/xFC/xFC/x2C/xAC/x4C/x4D/xA3'\nimg.draw_font(10, 20, 8, 8, tmp, scale=1, color=(255, 255, 255))\nlcd.display(img)\n```\n\n范例参考 [image_draw_font.py](https://gitee.com/Sipeed/maixpy_scripts/tree/master/multimedia/gui/image/demo_draw_font/image_draw_font.py) 。\n\n## 字库接口\n\n请先使用 font_load / font_free 加载或释放字库，这将提升 draw_string 的功能，支持从  `xx.Dzk` 文件 与 Flash 地址加载，这之后后 draw_string 将通过字库打印字符串，目前只支持 `ASCII` / `UTF-8` 编码 。\n\n> 附带字库文件 [0xA00000_font_uincode_16_16_tblr.Dzk](https://gitee.com/Sipeed/maixpy_scripts/tree/master/multimedia/gui/image/demo_draw_font/tools/0xA00000_font_uincode_16_16_tblr.Dzk) \n\n```python\nimport lcd, image\nlcd.init()\nimg = image.Image()\n# image.font_load(image.UTF8, 16, 16, 0xA00000)\nimage.font_load(image.UTF8, 16, 16, '/sd/0xA00000_font_uincode_16_16_tblr.Dzk')\nimg.draw_string(20, 90, b'こんにちは、世界', x_spacing=2, mono_space=1)\nimage.font_free()\nlcd.display(img)\n```\n\n范例参考 [image_draw_string.py](https://gitee.com/Sipeed/maixpy_scripts/tree/master/multimedia/gui/image/demo_draw_font/image_draw_string.py) 。\n\n## 显示效果\n\n![view_image_font](./view_image_font.jpg)\n\n## 字库工具\n\n我们将使用根目录下的 [FontGenerator.zip](https://gitee.com/Sipeed/maixpy_scripts/tree/master/multimedia/gui/image/demo_draw_font/tools/FontGenerator.zip) 导出字体对应的字库，请看下图完成导出操作。\n\n1. 选择字库编码类型为 Unicode 编码，这将支持绝大多数国家的语言。\n\n   ![image-20200902180913322](./image-20200902180913322.png)\n\n2. 选择扫描模式，为 5 横向、先上下后左右的字模的扫描打印方向。\n\n   ![image-20200902181130459](./image-20200902181130459.png)\n\n3. 如下图配置所需要的字体样式后创建字库。\n\n   ![image-20200902181311553](./image-20200902181311553.png)\n\n4. 保存成 DZK 格式即可，字模数据访问方法如图文字说明\n\n   ![image-20200902181442677](./image-20200902181442677.png)\n\n## 字模工具\n\n> 警告：不推荐使用字模工具，不了解的人请不要使用。\n\n使用目录下的 [Pc2Lcd2002.zip](https://gitee.com/Sipeed/maixpy_scripts/tree/master/multimedia/gui/image/demo_draw_font/tools/Pc2Lcd2002.zip)  获取字模的字符串。\n\n1. 确认软件为字符模式。\n\n![image-20200902175614964](./image-20200902175614964.png)\n\n\n\n2. 设置如图即可导出想要的字符串。\n\n   ​\t![image-20200902180153452](./image-20200902180153452.png)\n\n3. 填入文字后点击生成字模。\n\n   ![image-20200902175948599](./image-20200902175948599.png)\n\n4. 提取字模字符串即可使用。\n\n   ![image-20200902180505263](./image-20200902180505263.png)\n\n```\n 这(0) 是(1) 测(2) 试(3)\n\n/x00/x20/x10/x17/x00/x02/xF1/x10/x10/x10/x11/x12/x14/x28/x47/x00/x80/x40/x40/xFC/x10/x10/x20/xA0/x40/xA0/x10/x08/x08/x00/xFE/x00这0\n/x1F/x10/x10/x1F/x10/x10/x1F/x00/xFF/x01/x11/x11/x11/x29/x45/x83/xF0/x10/x10/xF0/x10/x10/xF0/x00/xFE/x00/x00/xF8/x00/x00/x00/xFE是1\n/x00/x27/x14/x14/x85/x45/x45/x15/x15/x25/xE5/x21/x22/x22/x24/x08/x04/xC4/x44/x54/x54/x54/x54/x54/x54/x54/x54/x04/x84/x44/x14/x08测2\n/x00/x20/x10/x10/x07/x00/xF0/x17/x11/x11/x11/x15/x19/x17/x02/x00/x28/x24/x24/x20/xFE/x20/x20/xE0/x20/x10/x10/x10/xCA/x0A/x06/x02试3\n```\n\n> 可以使用图形模式绘制自己喜欢的字模图形，支持 32 * 32 的图形。\n>\n> ![image-20200902181645277](./image-20200902181645277.png)"}, "/soft/maixpy/zh/course/image/image_counting-cells.html": {"title": "MaixPy 实现细胞计数", "content": "---\ntitle: MaixPy 实现细胞计数\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy 实现细胞计数\n---\n\n\n> counting-cells\n\n实现细胞计数步骤:\n\n原图——灰度图——腐蚀膨胀——二值化阈值——滤波操作-计数\n\n\n```python\n\n```"}, "/soft/maixpy/zh/course/image/basic_operation.html": {"title": "图像的基本运算", "content": "---\ntitle: 图像的基本运算\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 图像的基本运算\n---\n\n\n## 坐标\n\n### 获取/设置像素点\n\n我们可以通过 image.get_pixel(x, y) 方法来获取一个像素点的值。\n\n- image.get_pixel(x, y)\n\n    对于灰度图: 返回(x,y)坐标的灰度值.\n\n    对于彩色图: 返回(x,y)坐标的(r,g,b)的tuple.\n\n同样，我们可以通过 image.set_pixel(x, y, pixel) 方法，来设置一个像素点的值。\n\n- image.set_pixel(x, y, pixel)\n\n    对于灰度图: 设置(x,y)坐标的灰度值。\n\n    对于彩色图: 设置(x,y)坐标的(r,g,b)的值。\n\n举例：\n```python\nimg = sensor.snapshot()\nimg.get_pixel(10,10)\nimg.set_pixcel(10,10,(255,0,0))#设置坐标(10,10)的像素点为红色(255,0,0)\n```\n\n### 获取图像的宽度和高度\n\n- image.width()\n\n    返回图像的宽度(像素)\n\n- image.height()\n\n    返回图像的高度(像素)\n\n- image.format()\n\n    灰度图会返回 sensor.GRAYSCALE，彩色图会返回 sensor.RGB565。\n\n- image.size()\n\n    返回图像的大小(byte)\n\n### 图像的运算\n\n- image.invert()\n\n    取反，对于二值化的图像，0(黑)变成1(白)，1(白)变成0(黑)。\n\n    注：\n    图像可以是另一个image对象，或者是从 (bmp/pgm/ppm)文件读入的image对象。\n    两个图像都必须是相同的尺寸和类型（灰度图/彩色图）。\n\n- image.nand(image)\n\n    与另一个图片进行与非（NAND）运算。\n\n- image.nor(image)\n\n    与另一个图片进行或非（NOR）运算。\n\n- image.xor(image)\n\n    与另一个图片进行异或（XOR）运算。\n\n- image.xnor(image)\n\n    与另一个图片进行异或非（XNOR）运算。\n\n- image.difference(image)\n\n    从这张图片减去另一个图片。比如，对于每个通道的每个像素点，取相减绝对值操作。这个函数，经常用来做移动检测。"}, "/soft/maixpy/zh/course/ai/basic/dnn_basic.html": {"title": "深度神经网络（DNN）基础知识", "content": "---\ntitle: 深度神经网络（DNN）基础知识\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 深度神经网络（DNN）基础知识\n---\n\n\n这里介绍使用 MaixPy AI 相关功能需要了解的知识，让你能够理解后面的内容， 不在本篇中深入介绍。\n\n## 如何解决一个问题--引出机器解决问题\n\n一个问题， 通常分为 **输入** 和 **输出（结果）**\n\n比如： \n坐标系中的一条直线如下， 上面的数据点值是已知的:\n![y=kx+b](../../../../assets/dnn/ykxb.jpg)\n\n现在提问，假如数据点规律不变， 输入一个 x 坐标 20, y 的值是多少？\n按照大家的知识，都知道这是一个一元一次方程(`y = kx + b`能解决的， 带入两个点的值，算出方程为`y = 3x + 10`, 那么当 `x=20`, `y` 的值为`70`， 于是输入是`20`, 输出是`70`。\n\n这里就是 输入(`20`) + 算法（一元一次方程） = 输出（`70`）， 这就是我们在解决一个问题时的基本方法， 所以关键就是找到这个符合这条线段上数据点规律的一个算法。\n\n人类很强大，会从这些数据中归纳总结学习，最终得到了这个算法（方程），然后其他的人直接使用这个算法就可以快速用于解决同类问题，那么，有没有一种方法， 让机器自动去寻找这个算法呢？\n\n\n## 如何让机器总结出算法\n\n要让机器自动总结出算法，即机器学习（ML，Machine Learning）， 我们先看看，人类是如何得到这个算法（方程）的。\n\n* 步骤1： 首先，有大量数据点，然后人类根据这些数据点发现了直线都符合`y = kx + b`这个适应所有直线的算法, 但是发现，这里面有两个未知数`k`和`b`, 这就是适应任何直线的参数\n* 步骤2： 然后具体的是什么样的直线，因为方程有两个未知数，即参数，将实际的两个数据点带入这个方程，得到了`k = 3`和`b = 10`\n* 步骤3： 然后我们用在步骤2中没有用到的在线上的数据点，去试试这个算法（方程）是否正确，最终发现都验证正确\n* 步骤4： 然后要通过`x`的值知道其它的点的`y`的值，只需要代入`y = 3x + 10` 即可\n\n\n那么，机器学习是不是也可以利用这个步骤来做呢？\n\n* 我们认为地设计一个算法结构， 加入我们碰巧直接设计成了`y = kx + b`， 我们给具体的直线留下了两个参数，我们暂且称呼这个结构叫 **模型结构**，因为有未知参数，我们称之为未训练的模型结构。其中`x`称为**输入**, `y`称为**输出**\n\n* 现在，我们将我们这条直线的的几个点代入到这个方程，  我们称这个过程为 **训练**，得到`y = 3x + 10` 这个算法， 已经没有未知参数了， 我们现在称它为**模型** 或者 训练好的模型，其中`k b`是模型内的参数，`y = kx + b`是这个模型的结构。 而带入训练的数据点，就叫做**训练数据**，它们的统称就叫**训练数据集**\n\n* 然后，我们使用几个在 训练 过程中没有用到的在线段上的数据点作为输入，代入这个模型进行运算，得到结果，比如 `x = 10`, 得到`y = 40`, 然后对比输出值是否与预期相符，这里我们发现`x = 10, y = 40` 确实是在图中这条直线上的， 并且训练时没有使用这个点，说明我们得到的模型在此次核验中通过，这个过程叫 **验证**， `x = 10, y = 40` 这个数据叫验证数据。 如果我们用多组数据去验证这个模型， 这些数据的统称就叫**验证数据集**\n\n* 现在， 我们获得了一个**模型**，并且用**验证数据集**对这个模型进行了验证，貌似也是很准确了，那我们就可以假设这个模型基本满足了我们以后有一个`x`， 要求着图中线上任意一点的`y`值，都可以输入`x`给出这条直线上对应点的`y`坐标。 这个过程我们其实是在**使用模型**了，这个过程称之为**推理**\n\n其实这就算是机器学习了， 我们人类需要的事就是设计`y = kx + b`这个结构，以及给出**训练数据集**和**验证数据集**，经过**训练**和**验证**得到一个我们认为可用的模型，然后使用`输入 + 模型`就可以得到认为的正确`输出（结果）`了。\n\n\n\n## 什么是深度神经网络？\n\n深度神经网络（DNN）是机器学习（ML）领域中的一种技术。\n\n前面说了一个比较简单的例子， 根据一条直线数据来预测直线上的任何一个点， `y = kx + b`这个结构是人为设计的， 很简单，当用于复杂的数据，发现它就不适用了，比如“这张图片里面是球还是玩具”\n\n![小球](../../../../assets/dnn/ball.jpg) ![玩具](../../../../assets/dnn/toy.jpg)\n\n前面为了模型能够存下一条直线的信息， 用了结构`y = kx + b`，直线的特征都存在模型里面了。\n现在用来存一张图的特征，光是`y = kx + b`这个线性结构， 以及`k 和 b`两个参数显然无法满足了， 需要设计一个更好的结构， 这时 **神经网络** 就出现了， 一种网状结构，能更好地记住图片的特征信息， 而这个网状结构又是多层的，也就是有深度的，所以称之为深度神经网络（DNN， deep neural network）， 所以说 DNN 是一种网络结构，是为了实现机器学习的一种手段。 每一层由多个节点组成， 如下图， 一个 DNN 包含了 **输入层**， **隐藏层**， **输出层**， 这里隐藏层由三层组成（`A[1], A[2], A[3]`层），但是统称隐藏层：\n\n![深度神经网络](../../../../assets/dnn/dnn.jpg)\n\n**输入层**：\n图中就是一个深度神经网络结构， `x` 是输入， 比如`x`这里可以是图片, 输入有多个节点，每个节点可以是一个像素点值， 这里输入层画了 7 个节点， 加入我们有一张图片是 `10 x 10`的分辨率，则输入层共需要 `100` 个节点。\n这里输入层是一个一维结构，实际情况可能有多维结构， 比如输入如果是一张灰度图片，分辨率`3x3`，这其实是一个二维结构，即两行两列的矩阵（关于矩阵的概念请自行学习，或者暂且理解成二维数组），比如：\n```\n[[109  138  110]\n [220  37   166]\n [32   243  67]\n]\n```\n每个像素点的值取值范围∈[0, 255]，然后我们将其平铺后变成共 9 个数据的一维数组给输入层\n```\n[109 138 110 220  37 166  32 243  67]\n```\n\n> 另外， 一般也会将输入层的值归一化到范围`[0, 1]`\n\n如果是一张彩色图片，那就是三维，即`高、宽、颜色通道`，颜色通道比如`RGB`三个颜色通道，即，输入有形状（包含了维度和每个维度的数据数量），比如上面的一维输入形状为`(9)`，其它图像通常以`(高，宽，通道数)`来表示形状，比如`(10, 10, 3)`表示分辨率`10 x 10`， 并且有三个颜色通道， 比如`RGB`。\n\n这里为了入门好理解，原理只介绍一维的情况\n\n\n**输出层**：\n`y` 是输出，这里输出有两个值，你可以理解成就是 MaixPy 的两个浮点值的 `list` `[Y1, Y2]`， `Y1`是`是小球的概率`，值∈[0, 1], `Y2`是`是玩具的概率`。 所以最终我们使用这个模型，  就是给它一张图片， 机器按照这个模型规定的结构和算法进行计算后得到一个 `list`， 我们根据这个输出的值就知道图中是什么东西了。\n\n**隐藏层**:\n连接输入层和输出层的隐藏层，以及中间的连接，负责了将输入数据推算成合理的输出值。\n\n\n## 中间休息，总结\n\n到现在为止， 你知道， **模型**是什么：就是一组数据结构，保存了一个网络的形状，以及里面的参数， 通常，这个模型的数据可以被保存成文件，比如`.h5 .tflite .kmodel`等文件，都是用来阐述这个模型的形状结构和参数，只不过是不同软件使用。\n人们只需要设计模型结构以及参数，用来解决一类问题，比如常见的物体分类， 比如就是上面说的区分一张图里面是小球还是玩具。\n这个模型里面有很多参数，具体在需要识别物体的时候，使用已知分类的数据集让机器自动训练得出一套合适的模型参数。\n然后我们就可以输入数据，让通过模型推理出来输入的数据时什么类别了。\n\n所以， 如果我们不需要训练模型，直接使用别人训练好的模型，只需要：\n* 确认需求，找到现成的模型，因为模型已经是训练好的了，输入和输出的形状的含义都已经定了\n* 确认模型的输入形状，比如模型输入分辨率`10x10`的彩图，则使用时需要将符合要求的图片传个输入层\n* 确认输出层的含义，比如前面说的识别小球和玩具，最后输出是分别代表是该物体的概率的 list， 比如 `[0.9, 0.1]`, 第一个值代表是小球的概率，那我们就知道这张图里有 90% 的概率是小球， 只有 10% 的概率是玩具\n* 将模型放到推理程序进行运行。 具体用什么程序先不着急，会在下一章介绍\n\n到这里，应该大致上明白了以下东西：\n* 什么是机器学习\n* 什么是深度神经网络（简单概念）\n* 模型是什么\n* 什么是输入层，输出层，在上面举例的分类应用中分别表示什么含义，层形状是什么样的\n* 到此为止，我可能还不知道什么是模型训练\n* 如果我需要一个模型，我知道如何确认需求\n\n所以，**如果你只希望能够使用模型，不需要训练，到此即可**， 也不需要知道模型有些什么具体的东西，你就把它当成一个**黑盒工具箱**使用即可。 如果想要更深的了解，请继续看下面的内容。\n\n\n\n## 继续：深度神经网络（续\n\n既然设计了多层设计，那我们继续深入：\n\n**数据流** ， **权重**， **偏置**:\n在模型进行推理时，数据从输入层流动到输出层，就是这些网状箭头的方向（第三节网状图），每个箭头前一层到后一层的计算可以用一个熟悉的公式:`y = wx + b`, 称`w`为**权重**(weight), `b`为**偏置**（bias）, 注意是每个箭头都有一个单独的`w, b`, 也就是说后一层节点的值等于前一层节点经过这个公式计算过后的值， 后一层的节点有多个前一层节点指向，那就等于所有前一层节点的值经过这个公式计算后的值的和。\n就这样经历了无数次运算后，结果终于在输出层以一个值的形式出现了，整个推理也就完成了\n\n**激活函数**：\n\n上面的模型虽然可以通过输入得到结果，但是会发现，所有层计算都是线性函数，那么不管有多少层，整体其实还是一个线性函数，即`y0 = w1x + b1` + `y = w2y0 + b2` ==> `y = w2(w1x + b1) + b2` ==> `y = w2w1x + w2b1 + b2`, 其实还是一个线性函数，那么多层的意义就没有了，于是我们需要在中间加入非线性函数，让网络内部更加复杂一点， 于是就在每个节点上做手脚， 在每个节点输出数据前，先对其用一个非线性函数运算，比如`sigmod`或者`relu`函数，别听到名字害怕，其实很简单，看下图, 总之就是 x 和 y 不成线性关系：\n![sigmod](../../../../assets/dnn/sigmod.jpg) ![relu](../../../../assets/dnn/relu.jpg)\n\n即到现在为止， 除了输入层，所有节点输出的值都需要经过`Sigmod(∑(Wn * x + Bn))`, 输出一个浮点数值\n\n**softmax**:\n\n输出层在最后输出的时候，因为前面的运算，值的范围不是很统一，虽然我们可以同过比大小，值最大的即认为是答案，但是为了统一而且可以直观地知道每个类别的可能性（另外也为了训练的准确性，这里不讲），正如前面讲到，我们最后输出的一个类别的概率，取值范围∈[0, 1]， 且所有输出的值和为`1`，所以在输出层后面对输出层的所有值进行处理，公式为\n![softmax](../../../../assets/dnn/softmax.jpg)\n\n到此，从输入到输出的推理过程就结束了\n\n## 深度神经网络训练\n\n前面简单介绍了深度神经网络的结构组成， 以及从输入层到输出层的正向过程，在我们使用模型时，就是这个正向过程。\n那么，模型定好了，里面的参数（比如`w,b`）都是随机的值，怎么让它自动训练得到模型中参数的值呢？ 在前面我们讲到， 使用一些我们已知结果的数据输入，来得到参数，同样地，这里我们也输入已知结果的数据，得到第一次的输出结果\n\n**判定输出正确性(accuracy)（或者说误差/loss）** 和 **损失函数**：\n\n在输出层得出结果，比如得到了`[0.6, 0.4]` 代表是小球的概率`0.9`, 是玩具的概率`0.1`, 但是因为是已知答案的数据， 实际正确答案是`[1.0, 0.0]`, 这明显不符合要求。\n所以我们得出正确答案和推算的答案的误差为： `[0.4, -0.4]`, 但是发现一个问题就是这个误差值的范围不太好看，要是误差的取值范围∈`[0, ∞]` 就好了。 在高中数学中有个函数`y = log10(x)`, 坐标图如下：\n![log10](../../../../assets/dnn/log10x.jpg)\n发现`x`取值∈`[0, 1]`时， `-y`的取值刚好∈`[0, ∞]`， 而我们的输出结果也刚好∈`[0, 1]`！ 所以，我们直接这样计算误差： `error = -log10(输出)`， 也就是输出越接近`1`，误差就越接近 `0`，这种方法称之为`交叉熵损失（CEE, Cross Entropy Error)`， 除了这种方法还有其它的比如均方误差（MSE，Mean Squared Error）等\n\n至此，我们知道了现在结果和实际结果的误差\n\n**误差的反向传播** 和 **参数优化（权重更新）**：\n因为模型的参数还不符合我们的预期， 那我们需要对参数进行修正，我们使用反向传播的方式。\n前面我们得出了误差， 因为参数不够正确， 我们用这个误差去修改模型中的参数，来达到微调模型内参数的效果。 就好像你在开一个水龙头， 水打了（即误差大了），就把开关拧紧一点，小了就拧松一点，对其做调整。\n就像我们正向推算一样，这次换成了反向，从后往前，可以得到在每个节点处的误差值，然后再根据一定的学习率去更新模型内参数。这里暂时就不仔细展开讲了。\n\n总之，经过一轮反向的调整参数之后，得到了新的模型\n\n**衡量模型好坏：训练集误差和验证集误差**：\n\n我们使用训练数据集里面的数据反复去进行正向推理得出误差，然后反向调整这个过程，在使用完训练数据集后，可能会得到误差比较小，但是这只能说明这个模型对这批数据来说比较准确，换一些新的数据可能就不准确了，所以我们要用一些训练集里没有的数据去**验证**模型的效果：\n我们使用 **验证数据集** 去正向推算，得到误差，因为验证数据集没有参与训练，也就是说现在模型的参数和验证数据集没有任何关系，我们用这个得到的误差来恒定这个模型的好坏，误差越小则认为效果越好\n\n**多次迭代**：\n\n如果将所有数据集训练完了，发现误差依然很大，那么可以用多次训练的方法来继续训练，即**多次迭代**，每次迭代完成后都用 验证数据集 去验证效果如何， 如果训练集的误差和验证集的误差都足够小，我们就可以暂且认为模型已经有不错的效果了。\n\n**测试集**：\n这时，我们就可以用又一批新的数据去测试我们的模型效果如何，因为这是全新的数据，没有参与到训练也没参与到验证（即确定什么时候停止训练），理论上更有公信力。如果测试误差较小，那么训练就算成功了\n\n**优化训练**：\n如果最终效果不太好， 有很多地方可以调整， 比如\n* 训练迭代的次数，并不是越多越好，过多的在一批数据集上训练可能导致模型只对这批数据有效，泛化能力不够， 也就是**过度拟合**\n* 每次训练的学习率也可以调整\n* 检查数据集，是否有一些影响分类的数据存在\n* 优化网络结构，不管是输入输出还是内部结构和参数，根据不同的数据和任务可以有更优的设计，也叫**特征工程**\n\n\n## 说在最后\n\n到这里，应该大致上明白了以下东西：\n* 什么是机器学习\n* 什么是深度神经网络\n* 模型是什么\n* 什么是输入层，输出层，在上面举例的分类应用中分别表示什么含义，层形状是什么样的\n* 什么是训练，有什么作用\n* 数据训练集，验证集，测试集分别是什么，用在什么地方，需要注意什么\n* 衡量模型好坏的标准是什么\n\n如果还不明白的，可以再仔细理解一遍，或者查阅相关资料，如果你发现有更好的阐述方法，欢迎按照左边目录的文档贡献方法参与贡献\n\n\n## 修改记录\n\n| 日期 | 作者 | 备注 |\n| ---  | ---- | --- |\n| 2020.11.17 | [neucrack](https://neucrack.com) | 初始版本，根据 MaixPy 的需要介绍深度神经网络基本概念，初稿 |"}, "/soft/maixpy/zh/course/ai/basic/maixpy_hardware_ai_basic.html": {"title": "MaixPy AI 硬件加速基本知识", "content": "---\ntitle: MaixPy AI 硬件加速基本知识\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy AI 硬件加速基本知识\n---\n\n\n## 模型使用和硬件加速原理\n\n前面我们知道了模型是一个数据机构以及很多参数， 最终以一个文件比如`kmodel`格式的文件的形式存在。\n而这个模型要能在 MaixPy 的程序里面被使用， 首先需要程序能够理解`kmodel`这个文件的格式， 并且支持模型里面的算法，这样才能按照模型的描述将输入经过一些裂计算过程后得到输出。\n\n所以，重点就是支持模型里面的算法，称**算子**， 理论上，我们可以用软件去实现这些算子， 就可以成功运行模型了， 而执行软件的物理器件是`CPU`， 神经网络模型的计算量很大，加上我们输入的是图片，图片本身的数据量就挺庞大， 就算是`K210` `400MHz` 的主频， 也无法满足流畅的推算模型。\n\n所以， 要么升级 `CPU`，但是成本太高， 要么做一个专用的硬件， 让这个硬件专门去特定的算法，因为不像 `CPU` 一样要做通用计算， 所以速度会非常快，在电脑上， 我们通常使用专用的图像加速卡即`GPU`来加速图形计算， 在`K210`上，这个专门的硬件叫做`KPU`（kendryte proccess unit)，第一个但是是公司名， 其实和其它芯片的`NPU`做的事情是一样的。\n\n在 MaixPy 里面，已经集成了推导模型的代码，同时使用了`KPU`进行计算加速，使用时无需编写很多代码，只需要调用几个函数即可快速运行模型\n\n\n## 关于 KPU\n\n虽然 KPU 是能够加速模型运算了， 但是由于成本、时间、功耗、体积、发热、应用领域定位等各种因素，它的能力并不能像专业领域的强力`NPU`一样，包含了每一种算子，它只能处理一部分。\n\nKPU 实现了卷积，批归一化，激活，池化 这4钟基础操作的硬件加速， 但是它们不能分开单独使用，是一体的加速模块。\n\n所以， 在 KPU 上面推理模型， 以下要求（如果不需要训练和设计模型，暂时不需要仔细了解）：\n\n1. 内存限制\n\nK210 有 6MB 通用 RAM 和 2MB KPU 专用 RAM。模型的输入和输出特征图存储在 2MB KPU RAM 中。权重和其他参数存储在 6MB 通用 RAM 中。\n\n2. 哪些算子可以被 KPU 完全加速？\n\n下面的约束需要全部满足。\n\n* 特征图尺寸：输入特征图小于等于 320x240(WxH) 同时输出特征图大于等于 4x4(WxH)，通道数在 1 到 1024。\n* Same 对称 paddings (TensorFlow 在 stride=2 同时尺寸为偶数时使用非对称 paddings)。\n* 普通 Conv2D 和 DepthwiseConv2D，卷积核为 1x1 或 3x3，stride 为 1 或 2。\n* MaxPool(2x2 或 4x4) 和 AveragePool(2x2 或 4x4)。\n* 任意逐元素激活函数 (ReLU, ReLU6, LeakyRelu, Sigmoid...), KPU 不支持 PReLU。\n\n3. 哪些算子可以被 KPU 部分加速？\n\n* 非对称 paddings 或 valid paddings 卷积, nncase 会在其前后添加必要的 Pad 和 Crop。\n* 普通 Conv2D 和 DepthwiseConv2D，卷积核为 1x1 或 3x3，但 stride 不是 1 或 2. nncase 会把它分解为 KPUConv2D 和一个 StridedSlice (可能还需要 Pad)。\n* MatMul, nncase 会把它替换为一个 Pad(到 4x4)+ KPUConv2D(1x1 卷积和) + Crop(到 1x1)。\n* TransposeConv2D, nncase 会把它替换为一个 SpaceToBatch + KPUConv2D + BatchToSpace。\n\n说明来自[这里](https://github.com/kendryte/nncase/blob/master/docs/FAQ_ZH.md)\n\n\n## 模型转换\n\n前面说到， 模型其实就是一组结构和参数数据，不同的软件只能识别特定格式的模型， KPU 只认`.kmodel`格式的模型， 一般用电脑训练的模型则不是， 比如`tensorflow`是`.h5`格式或者`.tflite`格式， 要给`KPU`使用， 必须经过变成`kmodel`, 使用[nncase](https://github.com/kendryte/nncase)这个工具来达到模型转换的目的\n如果你需要转换模型， 具体使用方法看这个仓库里面的介绍\n\n## kmodel V3 模型 和 V4 模型\n\n由于代码更新， 在过程中产生了两个大版本,`V3` 和 `V4`， 其中`V3`模型是指用 [nncase v0.1.0 RC5](https://github.com/kendryte/nncase/releases/tag/v0.1.0-rc5) 转换出来的模型; `V4`模型指用[nncase v0.2.0](https://github.com/kendryte/nncase/releases/tag/v0.2.0-beta4)转换出来的模型\n\n两者有一定的不同，所以现在两者公存， `V3`代码量更少，占用内存小，效率也高，但是支持的算子少; `V4`支持的算子更多，但是都是软件实现的，没有硬件加速，内存使用更多，所以各有所长。 MaixPy 的固件也可以选择是否支持 `V4`。\n\n## MaixPy 中使用模型 kmodel\n\n1.加载 SD 卡 （TF 卡）中的模型\n\n将模型放到 SD 卡， 然后加载\n\n\n```python\n   import KPU as kpu\n   m = kpu.load(\"/sd/test.kmodel\")\n```\n\n2.加载 Flash 中的模型\n\n将模型下载到 Flash， 然后加载\n\n```python\n   import KPU as kpu\n   model_addr_in_flash = 0x300000\n   m = kpu.load(model_addr_in_flash)\n```\n\n此处的 `model_addr_in_flash` 为模型在 Flash 中的偏移地址，模型可以通过 kflash.py 或者 kflash_gui 烧录到 Flash 对应的地址中\n\n1. 准备输入\n\n一般情况下，我们会使用图像作为输入：\n* 直接使用摄像头采集的数据作为输入：\n```\nimg = sensor.snapshot()\n```\n这里 `img` 就可以直接作为输入， 这里需要**注意**：`snapshot`函数采集到图片后，会将图片数据放到两个地方\n(1) `RGB565`内存块， 图像以 `RGB565`的形式存放在一块内存中，方便图像处理的函数使用，注意在内存中的排序是`[像素1 RGB, 像素2 RGB...]`\n(2) `RGB888`内存块， 图像以`R8G8B8`的形式存放在另一块内存中，注意在内存中的排序是`[所有像素 R, 所有像素 G， 所有像素 B]`, 我们也称之为`AI`内存\n\n**其中，实际上作为 KPU 输入的数据是`RGB888`区域**， 这个在前面的文档 [MaixPy 图像及常用操作](./../../../course/image/basic/vary.html) 章节中有仔细讲解过\n\n* 从文件读取，或者修改过的摄像头图像\n\n直接从摄像头采集的图像会自动填充`RGB888`区域，但是我们使用图像处理函数比如`image.resize()`时，只会修改`RGB565`，没有修改`RGB888`,因为同时修改两处内存需要耗费大量时间，而 `KPU` 的输入又是`RGB888`内存， 所以在需要进行 `KPU` 运算时， 需要同步（刷新）一下`RGB888`内存块， 使用`img.pix_to_ai()`来进行同步，否则修改对 `KPU`没有生效。\n比如：\n```python\nimg = sensor.snapshot()\nimg = img.resize(240, 240)\nimg.pix_to_ai()\n```\n\n```python\nimg = image.Imag(\"/sd/test.jpg\")\nimg.pix_to_ai()\n```\n\n4. 前向运行模型\n\n前向运行模型，也就是按照 输入到输出的方向走一边模型计算， 通过输入得出输出的值：\n\n```python\n\nfeature_map = kpu.forward(m, img)\n```\n这里得到了`feature_map`， 是一个特征图， 比如我们前面将的`小球`和`玩具`的分类，输出特征图是两个节点， 每个节点表示了是对应物体的概率，我们将特征图转换为`list`对象\n```python\np_list = feature_map[:]\nprint(p_list)\n```\n就可以得到类似 `[0.9, 0.1]` 这样的结果了\n\n\n\n## KPU使用过程中的常见问题\n\n### KPU能够加载多大的模型？\n\nC 语言代码运行模型：\n    当k210运行 c 代码时，能够加载 < 6MB左右的模型， 具体看 C 代码内容。\nMaixPy 运行模型：\n    * 当运行 MaixPy(minimum版本)时，能够加载4MB左右的模型。 如果不使用摄像头和 LCD， 最大可以加载 5MiB 左右的模型（因为摄像头和 LCD 的缓冲区占用了很多内存，但实际应用也没多大意义了）\n    * 当运行 MaixPy(完整版)时，能够加载 2MiB 左右的模型\n    * 另外也支持实时从`Flash`加载模型， 理论上只要单层使用内存不超过 2MiB， 整体模型可以无限大，只不过要牺牲一点运算速度。 使用方法看[这里](https://github.com/sipeed/MaixPy_scripts/tree/master/machine_vision/load_big_model)。 如果对原理和实现感兴趣，可以看[这里](https://neucrack.com/p/313)\n\n\n\n### 报错\"memory overflow\"怎么办？\n\n出现这个问题，根据前面讲到过的系统内存管理可知，一般有两个可能性：\n1. 报错的地方跟系统堆无关系， 可能是`GC`内存不够导致，可是适当增加 `GC` 的总内存大小\n2. 由于模型过大引起的。可以依次尝试如下解决方案:\n  1. 更换maixpy mini版本固件\n  2. 进行模型剪枝优化\n  3. 使用 `kpu.load_flash`接口运行时实时加载模型，只是执行效率降低一点\n  4. 如果内存不足，而且`kpu.load_flash`性能无法满足， 那么你可能需要使用 [C SDK](https://github.com/kendryte/kendryte-standalone-sdk)进行开发。\n\n### 报错\"load error,only support kmodel v3/v4\"怎么办？\n\n出现这个问题可以尝试如下解决方案:\n\n1. 如果为加载 Flash 中的模型，请确保 `flash offset` 填写正确，并保证和 maixpy 固件的地址没有冲突（模型在 Flash 中的地址太靠前，然后往 Flash 烧录入固件时， 固件大小超过了模型所在的起始地址， 导致模型被破坏）\n2. 如果是采用 `nncase 0.2.0`进行转换的 `kmodel V4`，请尝试采用`nncase 0.1.0`进行转换，从而生成`kmodel V3`\n\n### 我想实现不同模型的选择加载(例如按下按钮运行目标分类，再次按下按钮则运行目标检测)，应该怎么写程序？\n\n因为内部RAM有限，所以当需要切换不同模型进行`kpu.load(address)`前，请先执行`kpu.deinit(k210model)`释放之前模型占用的内存，然后再加载新的模型。 也就是分时复用内存"}, "/soft/maixpy/zh/course/ai/train/maixhub.html": {"title": "Maixhub 模型训练", "content": "---\ntitle: Maixhub 模型训练\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Maixhub 模型训练\n---\n\n\nMaixhub 提供模型训练功能和模型分享功能， 只需要准备好需要训练的数据集， 不需要搭建训练环境和代码， 上传训练数据即可快速训练出模型\n\n目前 Maixhub 支持分类模型 和 目标检测模型的训练。\n\n你需要做的：\n* 确定目标， 是分类还是检测\n* 根据使用说明制作符合要求的数据集\n* 上传数据集等待云端自动训练\n* 训练完成， 结果会通过邮件进行通知， 不管是成功还是失败，都会有邮件通知，里面有详细的任务信息和结果文件\n\n\nMaixhub 使用说明参考 [Maixhub 训练使用说明](https://www.maixhub.com/ModelTrainingHelp_zh.html)"}, "/soft/maixpy/zh/course/ai/train/local_windows_2.html": {"title": "本地训练使用教程", "content": "# 本地训练使用教程\n\n配置好本地训练的环境之后，就可以开始进行本地训练了，如果没有配置好的，请看上一篇[教程](https://bbs.sipeed.com/thread/932)\n\n## 安装依赖\n\n打开解压后得到的文件夹，打开里面的 requirements.txt 文件，将里面的 tensorflow>=2.3.1 删除，保存关闭。\n\n![4.png](https://bbs.sipeed.com/storage/attachments/2021/07/21/2AZNFAWTnje3DQSuBplNRmJv3FXJO8rkAATuJdjf_thumb.png \"1460\")\n\n在文件夹的这里输入cmd, 回车，进入命令行界面\n\n![5.png](https://bbs.sipeed.com/storage/attachments/2021/07/21/hkzdghzlqlnZBTbcES61V7p15EnCKnYJNpPZ8tgJ_thumb.png \"1463\")\n\n输入 \n\n    pip install -r requirements.txt\n\n如果下载速度很慢的话，可以使用中科大源来进行下载\n\n    pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/\n\n等待全部包的安装结束就可以了\n\n## 数据集的制作\n\n对于数据集的制作，请严格按照maixhub上的数据集[制作要求](https://www.maixhub.com/ModelTrainingHelp_zh.html)来进行。如果是分类训练可以不用进行压缩，但是要按压缩包的文件层级要求来将文件放到文件夹中\n注意：对于压缩包中的文件夹名字和层级数一定要和要求中的一摸一样！一摸一样！不然会出现数据集读取不到等的一些奇奇怪怪的错误，导致训练不能开始。\n\n## 开始训练\n\n先进行初始化\n\n    python train.py init\n\n开始训练之前，我们需要将自己本地训练的参数进行修改，在instance/config.py中进行修改对应的参数，否则就会出现错误，再进行训练\n\n将数据集放到本地训练源码中的datasets文件夹中，然后在有train.py文件层级上启动命令行界面，和安装依赖的时的启动方法一样。\n> 小白不知道怎么改的可以不用去修改\n\n![5.png](https://bbs.sipeed.com/storage/attachments/2021/07/21/CkW1EwXQiKCLsouz5mPJzhVK6S6zn1vcxH1ZcQTA_thumb.png \"1461\")\n\n分类训练输入\n\n    python train.py -t classifier -z datasets/test_classifier_datasets.zip train\n\n如果是没有压缩的文件夹，则输入\n\n    python train.py -t classifier -d datasets/test_classifier_datasets train\n\n> 这里输入的命令中，在datasets/后面加的是你自己的所制作的数据集名字，不要上来就直接将复制命令运行。\n\n目标检测输入\n\n    python train.py -t detector -z datasets/test_detector_xml_format.zip train\n\n> 这里输入的命令中，在datasets/后面加的是你自己的所制作的数据集名字，不要上来就直接将复制命令运行。\n\n训练完之后就会得到一个out的文件夹，里面的文件就是训练之后得到的模型\n\n## 常见问题\n\n### 训练过程中发现没有使用GPU进行训练的\n\n在命令行中输入python，然后再输入\n\n```python\nimport tensorflow as tf\ntf.test.is_gpu_available()\n```\n\n![6.png](https://bbs.sipeed.com/storage/attachments/2021/07/21/i7d0N1b4QdKbXFI74qbDpkoOpSPP64EotABFrXUE_thumb.png \"1462\")\n\n检查一下这些文件有没有找到，和最后一行是否打印出True\n![]()\n如果没有，则说明你的前面的cuda和cudnn环境没有安装好，请将所有关于英伟达的软件驱动进行卸载，是卸载！！！不是将文件删除。然后再重新进行cuda和cudnn的环境配置。\n\n### 训练中出现Internal: no kernel image is available for execution on the device\n\n手动安装kernel可以解决\n\n    pip install kernel\n\n### 出现failed: TrainFailReason.ERROR_PARAM, datasets not valid: datasets format error: datasets error, not support format, please check\n\n这种就是没有严格的安装数据集要求来进行制作，检查你的文件夹名字，就可以解决的了，特别是images这个文件夹，容易少了个s\n\n## 出现报错之后，先自己将报错信息进行查看，看不懂可以翻译，不要报错了就直接问，自己都先排查一次"}, "/soft/maixpy/zh/course/ai/train/local.html": {"title": "本地模型训练 for Linux", "content": "---\ntitle: 本地模型训练 for Linux\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 本地模型训练\n---\n\nwindows10上使用本地训练教程看[这里](https://bbs.sipeed.com/thread/932)\n\n本地模型训练使用 [sipeed/maix_train](https://github.com/sipeed/maix_train) 这份代码进行， 使用了 Tensorflow 作为训练框架\n以下所有的训练使用的代码都是在linux下进行使用的，不是在windows下使用的！\n主要支持：\n* 物体分类模型（使用 Mobilenet V1）： 只识别图片中的物体是什么\n* 物体检测模型（使用 YOLO V2）： 找到图片中认识的图体，并同时找到其坐标和大小\n\n## 系统环境\n\n首先，需要一台有 Linux 系统的电脑\n如果你的主力系统是 Windows， 你可以用以下系统环境：\n* 使用虚拟机, `virtual box` 或者 `vmware` 都可以， 系统推荐安装`Ubuntu20.04`\n* 或者安装双系统，安装方法请自行搜索学习，或者看[这个双系统安装教程](https://neucrack.com/p/330)\n\n你可能想着在 `Windows` 下面进行开发， 但是这里强烈建议使用`Linux`而不是`Windows`：\n* 首先，大多数模型训练框架都是首先支持 `Linux`， 在`Linux`下面开发的难度会比`Windows`下开发更加容易\n* 作为一个开发者， 学会使用`Linux`是基础技能，当然，除非你是`Windows`狂热粉， 那我相信你一定有把其它系统的软件移植到`Windows`的能力\n* 对于windows环境的配置存在许多奇奇怪怪的现象，会出现无法使用GPU进行训练，只能使用CPU训练\n\n\n## 软件安装\n\n训练可以使用 CPU 进行训练，但是速度比较慢， 如果使用专用的显卡（GPU）进行加速，速度会快非常多，个人一般使用`Nvidia`的显卡， 比如`RTX 3090`， 当然，使用普通的`GTX 1060 6G内存`版本就可以愉快使用了\n\n初次接触，建议先使用 CPU 进行训练，环境安装会简单很多很多， 以下只讲 CPU 训练的方法， GPU 请自行学习\n> GPU 使用可以参考 Tensorflow 官方 [GPU 使用教程](https://tensorflow.google.cn/install/gpu)， 如果你显卡驱动遇到了问题，可以参考[这里](https://neucrack.com/p/252)， 另外如果你用 [docker 安装](https://tensorflow.google.cn/install/docker )遇到了问题， 也可以看[这里](https://neucrack.com/p/116)\n\n\n接下来的使用方法摘抄于仓库的 [README](https://github.com/sipeed/maix_train/blob/master/README.md), 如果有出入， 以仓库的`README`为准，注意分辨\n\n\n* 将训练代码克隆到本地\n\n```\ngit clone https://github.com/sipeed/maix_train --recursive\n```\n\n* 安装依赖\n\n```\ncd maix_train\npip3 install -r requirements.txt\n```\n中国用户可以使用阿里云或者清华的源， 下载速度更快\n```\npip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/\n```\n\n* 下载 [nncase v0.1.0-rc5](https://github.com/kendryte/nncase/releases/tag/v0.1.0-rc5) 并解压到 `maix_train/tools/ncc/ncc_v0.1`, 保证可执行文件的路径是 `maix_train/tools/ncc/ncc_v0.1/ncc`\n\n* 配置工程\n\n先初始化工程\n```\npython3 train.py init\n```\n然后根据你的硬件情况，编辑`maix_train/instance/config.py`配置\n\n## 准备数据集\n\n准备数据集， 图片大小为 `224x224`， 格式可以参考`maix_train/datasets`下的数据集示例\n\n也可以看 [Maxhub 的数据集要求](https://www.maixhub.com/index/mtrain/help.html)\n\n\n##  训练分类模型\n\n```\npython3 train.py -t classifier -z datasets/test_classifier_datasets.zip train\n```\n\n或者解压数据集到文件夹，指定数据集文件夹\n```\npython3 train.py -t classifier -d datasets/test_classifier_datasets train\n```\n\n## 训练目标检测模型\n\n```\npython3 train.py -t detector -z datasets/test_detector_xml_format.zip train\n```\n\n## 使用模型\n\n和使用`Maixhub`训练的模型一样， 在`out`文件夹会生成一个`zip`文件，里面包含了结果，把**所有**文件拷贝到`SD`卡根目录，然后开发板上电运行即可"}, "/soft/maixpy/zh/course/ai/train/local_windows_1.html": {"title": "本地训练 for windows", "content": "# 本地训练 for windows\n\n这个教程有手就行，不需要虚拟机，请严格按照教程的步骤一步步来。\ntensorflow-gpu 2.3.0版本对于cuda版本有点严格，之前的教程出现了问题了，可以运行分类训练，但是对于检测训练可以训练，但是不能进行模型输出。现在已经解决了，cuda版本必须是10.1版本，cudnn是 10.1 V7.**版本，不然是不能使用GPU进行训练。\n\n## 安装python3.8\n\n推荐安装python3.8，由于python3.9有一些不知名问题导致了环境可能会配置失败\n[点击下载安装python3.8](https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe)，双击打开python3.8安装包\n\n安装之后的python，按win+r，输入cmd打开命令行，然后输入python+回车，出现下图则表示python安装成功\n\n![3.png](https://bbs.sipeed.com/storage/attachments/2021/07/21/VIkEq8iIkf0ae6WJRB7xVOatpIcNBBBjHVLu0DPX_thumb.png \"1456\")\n\n## 安装pip\n\n在python环境下安装各种包是可以通过使用pip来进行安装的，具体的安装方式[这里](https://www.cnblogs.com/littlehb/p/8886409.html)\n\n可以通过 `pip list`来查看python上安装了的包\n\n## CUDA和CUDNN环境配置\n\n对于模型的训练，可以使用CPU或者是GPU进行训练，本教程是针对GPU训练的环境配置的。\n不同版本的CUDA有所对应不同的显卡驱动版本要求，可以参考[这里](https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html)下载对应的显卡驱动版本\n推荐使用CUDA10.1版本\n\n> 必须是英伟达的显卡，如果是AMD的显卡或者电脑上没有英伟达的显卡，可以跳过这一步\n\n### 安装显卡驱动\n\n点击[这里](https://www.nvidia.cn/Download/index.aspx?lang=cn),选择你对应的显卡型号，下载对应的显卡驱动，然后打开文件夹，进行显卡驱动的安装。\n\n可以通过右键的VNIDIA控制面版查看当前系统的显卡驱动版本\n\n### 安装CUDA\n\n打开cuda10.1下载的[链接](https://developer.nvidia.com/cuda-10.1-download-archive-base)，选择对应的系统版本和下载方式\n![111.png](https://bbs.sipeed.com/storage/attachments/2021/07/21/qCvepuVTJVbL8DgDkHzD9b4L7GLXPBHcqXVX4YLR_thumb.png \"1457\")\n\n点击Download进行下载，这个网页可能打开的比较慢，可以通过科学上网来打开。下载好的安装包，直接打开，然后一直点下一步就好了。\n\n### 安装CUDNN\n\n对于CUDNN下载，这个可以自行百度，由于这个网页没有科学上网的情况下打开是比较慢的。\n\n点击[这里](https://developer.nvidia.com/rdp/cudnn-archive)进入到cudnn的下载官网，选择cudnn v7.6.5.32 for cuda 10.1的版本进行下载，\n![2.png](https://bbs.sipeed.com/storage/attachments/2021/07/21/y7bzFvQanbwKTjypKgeMmJ1WWnjrn5KF0VVwBAZv_thumb.png \"1458\")\n\n下载之后会得到一个cudnn-10.1-windows10-x64-v7.6.5.32.zip的压缩包，将其解压。解压的得到的文件三个文件![文件](https://bbs.sipeed.com/storage/attachments/2021/08/02/6s0BxoZQX1Bhii36KnKQccwxXot5XDIgI6xgoLyw_thumb.png \"1608\")，都复制到 **C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1**文件下面。\n\n这时CUDA的环境已经配置好了\n\n## tensorflow安装\n\n对于tensorflow的安装，这是也是有要求的，需要安装tensorflow-gpu 2.3.0版\nwin+r，输入cmd，打开命令行\n\n在命令行中输入 \n\n    pip install tensorflow-gpu==2.3.0\n\n如果使用这命令的时候提示 **'pip'不是内部或外部命令，也不是可运行的程序或批处理文件**，这说明了你电脑上没有安装pip，为什么不好好看我前面的写的安装pip？？？？？？？\n\n如果下载的很慢，请输入\n\n    pip install tensorflow-gpu==2.3.0 -i https://pypi.mirrors.ustc.edu.cn/simple\n\n然后等待安装成功即可\n\n## MiaxHub本地训练\n\n配置了那么久的环境了，终于到最后一步了，[下载本地训练代码](https://github.com/sipeed/maix_train)\n\n进入连接之后，可以通过git命令进行下载，或者是点击Download ZIP进行下载压缩包\n\n![3.png](https://bbs.sipeed.com/storage/attachments/2021/07/21/bGnesxEq2b4YxRIsyFZobK36kpk9Ip3GVoQohgd5_thumb.png \"1459\")\n\n将压缩包解压，任何位置都都可以，只要你记得解压到哪里了。然后下载 [ncc-win7-x86_64](https://github.com/kendryte/nncase/releases/tag/v0.1.0-rc5) 并解压，就会得到一个叫ncc-win7-x86_64的文件夹，将这个文件夹名字修改为ncc_v0.1。\n\n再将这个文件夹的复制到maix_train/tools/ncc文件夹下面。（如果没有ncc这个文件夹就创建一个，路径一定要对的上）\n\n![maix_train_windows](./../../../../assets/get_started/maix_train_windows.gif)\n\n不会科学上网的同学可能会下载很慢，我已经下载好，上传到[gitee](https://gitee.com/Rui_worker/asdadasda)上了(里面也有ncc的文件了)。"}, "/soft/maixpy/zh/course/ai/image/self_learn_classifier.html": {"title": "自学习分类器（self learning classifier）", "content": "---\ntitle: 自学习分类器（self learning classifier）\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 自学习分类器（self learning classifier）\n---\n\n\n无需单独训练， 直接在开发板上对物体特征进行学习，然后直接使用\n\n演示视频： [youtube](https://www.youtube.com/watch?v=aLW1YQrT-2A) 或者 [bilibili](https://www.bilibili.com/video/BV1Ck4y1d7tx)\n\n## 使用方法\n\n* [在这里](https://dl.sipeed.com/shareURL/MAIX/MaixPy/release/master) 下载版本 >= v0.5.0-33 的固件\n* [下载 kmodel](https://maixhub.com/modelInfo?modelId=16)\n* 使用 [kflash_gui](https://github.com/sipeed/kflash_gui) 下载固件和模型\n* 运行 [示例脚本](https://github.com/sipeed/MaixPy_scripts/blob/master/machine_vision/self_learning_classifier/self_learning_classifier.py)\n> 如果使用 lite 版本的 kmodel, 应该在创建 classifier 的时候传入 `fea_len` 参数为`512`，使用另外一个大一点的（1.8MiB）模型的时候则不需要这个参数:\n```python\nclassifier = kpu.classifier(model, class_num, sample_num, fea_len=512)\n```\n\n然后运行启动后开始学习物体\n\n* 按开发板上的 `boot 按钮` 来捕获 3 个类别 `手机`, `小车`, `键盘`， 每个类别只需要捕获一次\n* 然后捕获 15 张图， 对顺序没有要求， 比如捕获 5 张 `手机`, 5 张 `小车` ， 5 张 `键盘` 的图片\n* 然后它会自动学习这 15 张图的特征\n* 最后识别到的图像类别会展示在左上角\n\n\n\n## 保存/加载学习好的特征\n\n* 使用 `classifier.save(path)` 来保存学习好的特征到`path`文件\n* 使用 `KPU.classifier.load()` 来加载特征, 参考 [self_learning_classifier_load.py](https://github.com/sipeed/MaixPy_scripts/blob/master/machine_vision/self_learning_classifier/self_learning_classifier_load.py) 文件"}, "/soft/maixpy/zh/course/ai/image/face_detect.html": {"title": "人脸检测", "content": "---\ntitle: 人脸检测\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 人脸检测\n---\n\n\n在一张图片中找出人脸， 并且框出人脸，即知道脸的位置和大小\n\n使用了`YOLO V2`模型对人脸进行检测\n\n## 使用方法：\n\n* 下载模型： 到[这里](https://dl.sipeed.com/MAIX/MaixPy/model) 下载 `face_model_at_0x300000.kfpkg` 这个模型文件\n* 用 kflash_gui 下载模型到 Flash， 或者放到 SD 卡中\n* 加载模型\n```python\ntask = kpu.load(0x300000)\n# task = kpu.load(\"/sd/face.kmodel\")\nanchor = (1.889, 2.5245, 2.9465, 3.94056, 3.99987, 5.3658, 5.155437, 6.92275, 6.718375, 9.01025)\nkpu.init_yolo2(task, 0.5, 0.3, 5, anchor)\n```\n因为使用了`YOLO V2`这个模型， 它有专用的函数接口， 使用`init_yolo2`来初始化模型\n\n参数分别为：\n* `kpu_net`: kpu 网络对象, 即加载的模型对象, `KPU.load()`的返回值\n* `threshold`: 概率阈值， 只有是这个物体的概率大于这个值才会输出结果， 取值范围：[0, 1]\n* `nms_value`: box_iou 门限, 为了防止同一个物体被框出多个框，当在同一个物体上框出了两个框，这两个框的交叉区域占两个框总占用面积的比例 如果小于这个值时， 就取其中概率最大的一个框\n* `anchor_num`: anchor 的锚点数， 这里固定为 `len(anchors)//2`\n* `anchor`: 锚点参数与模型参数一致，同一个模型这个参数是固定的，和模型绑定的（训练模型时即确定了）， 不能改成其它值。\n\n然后输入图片数据，运行模型\n\n```python\ncode = kpu.run_yolo2(task, img)\n```\n\n得到结果， 完整例程看[这里](https://github.com/sipeed/MaixPy_scripts/blob/master/machine_vision/face_find/demo_find_face.py)\n\nAPI 文档看 [Maix.KPU](./../../../api_reference/Maix/kpu.html)"}, "/soft/maixpy/zh/course/ai/image/1000_type_classifier.html": {"title": "1000 种物体分类模型", "content": "---\ntitle: 1000 种物体分类模型\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 1000 种物体分类模型\n---\n\n\n可以识别 1000 种物体\n\n## 使用方法\n\n* 使用`minimum` 版本固件\n* [下载模型文件](https://dl.sipeed.com/fileList/MAIX/MaixPy/model/mobilenet_0x300000.kfpkg)\n* 使用 `kflash_gui` 烧录模型文件到 `Flash`, 这个模型文件回自动烧录到地址0x300000上，不需要手动选择地址\n* 保存文件[labels.txt](https://github.com/sipeed/MaixPy_scripts/tree/master/machine_vision/mobilenet_1000_class/labels.txt) ([备用链接](https://en.bbs.sipeed.com/uploads/default/original/1X/d41ad9dfbe01f228abe726986fbf1baf4e288f2e.zip)) 到文件系统，具体方法见入门教程（发挥你的聪明才智）（参考答案：因为内容太多，如果使用 REPL 直接复制粘贴可能数据会出错， 所以要使用 工具传输。最简单的是放到 SD 卡； 如果要放到 `/flash`，minimum 可能不支持 IDE， 可以使用`upyloader`发送文件）\n* 因为这个模型有`4.2MiB`，比较大，所以使用了`minimum`的固件，同时保证`GC`使用的内存不要太大，可以通过以下方式设置小一点,把内存留给模型使用\n\n```python\nfrom Maix import utils\nimport machine\n\nutils.gc_heap_size(256*1024)\nmachine.reset()\n```\n\n* 导入模型\n\n```python\nimport KPU as kpu\ntask = kpu.load(0x300000)\n```\n\n* 读入 labels\n\n```python\nf=open('/sd/labels.txt','r')\nlabels=f.readlines()\nf.close()\n```\n\n* 初始化摄像头, LCD\n\n可以根据自己的硬件安装情况设置摄像头是否镜像，以及 LCD 是否旋转等\n\n略，请参考前面的教程\n\n* 识别物体\n\n```python\nfmap = kpu.forward(task, img)\nplist=fmap[:]\npmax=max(plist)\nmax_index=plist.index(pmax)\n```\n\n这里把运行的结果转换成了一个`list`对象， 然后找到了最大值的下标， 通过这个下标我们就知道标签名是什么了（`labels[max_index]`）\n\n\n* 显示结果\n\n```python\nimg = img.draw_string(0, 0, \"%.2f : %s\" %(pmax, labels[max_index].strip()), color=(255, 0, 0))\nlcd.display(img, oft=(0,0))\nprint(fps)\n```\n\n\n完整例程看 [maixpy_scripts](https://github.com/sipeed/MaixPy_scripts/tree/master/machine_vision/mobilenet_1000_class)"}, "/soft/maixpy/zh/course/ai/image/face_recognization.html": {"title": "人脸识别", "content": "---\ntitle: 人脸识别\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 人脸识别\n---\n\n\n除了检测到人脸的位置以外， 还可以识别到这个人是谁（需要先对准人按按钮学习）\n\n效果视频： [youtube](https://www.youtube.com/embed/hS_mcGptXeo) 或者 [bilibili](https://www.bilibili.com/video/BV1bJ411Q7L6)\n\n<iframe src=\"https://player.bilibili.com/player.html?aid=77466790&bvid=BV1bJ411Q7L6&cid=132521878&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=500 height=400> </iframe>\n\n## 使用方法\n\n\n* 从 [maixhub](https://www.maixhub.com) 按照说明下载模型， 获得模型`smodel`, 就是 加密版本的`kmodel`\n* 按照入门教程的方法下载模型到开发板\n* 运行脚本 [script](https://github.com/sipeed/MaixPy_scripts/blob/master/machine_vision/face_recognization/demo_face_recognization.py)\n\n\n## 程序理解\n\n总共用了三个模型， 分别是：\n* 人脸检测模型， 这和前面的人脸检测使用的是同一个模型， 即找到人脸\n* 人脸关键点检测模型，从前面找到的人脸中找到人脸的 眼睛 鼻子 和 嘴巴 的位置\n* 人脸特征提取模型， 从一张人脸图片中得出一个特征值\n\n步骤如下：\n* 检测到人脸\n* 裁出人脸，找到人脸的眼睛鼻子嘴巴， 这里裁成了`128x128`的图\n* 把人脸图中的脸旋转到标准位置\n* 用特征提取模型提取出人脸的特征值\n\n有了前面的基础， 这里的程序就能看懂了，也就不再进行详细的阐述了，只不过是从之前的使用一个模型，变成了按照顺序分别使用三个模型，再加上一点简单的图像裁减和旋转处理，都是调用`API`，仔细看一遍代码就知道具体的细节是如何实现的了"}, "/soft/maixpy/zh/course/index.html": {"title": "MaixPy 手把手教程说明", "content": "---\ntitle: MaixPy 手把手教程说明\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy 手把手教程说明\n---\n\n\n看本教程之前， 请**务必先看左侧目录【入门必看指南】**\n\n教程是在认为已经完全掌握了前面的 入门 部分的内容的基础上写的\n\n\n本教程主要分模块地介绍 MaixPy 包含的功能的使用方法，\n在看教程时，可能需要配合 API 文档 和 例程仓库[MaixPy_scripts](https://github.com/sipeed/maixpy_scripts) 一同学习"}, "/soft/maixpy/zh/course/network/network_config.html": {"title": "如何给 MaixPy 连接网络", "content": "---\ntitle: 如何给 MaixPy 连接网络\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 如何给 MaixPy 连接网络\n---\n\n\n> 大佬鼠 2020-11-26 编辑\n\n既然叫 AIOT 自然不能少了联网， MaixPy 现在支持 W5X00 / EPS32 / ESPAT 等联网的方法，如下所示。\n\n- ESP32 需要搭配[专用的 SPI 固件](https://github.com/sipeed/Maixduino_esp32_fimware)，支持 TCP / UDP 客户端。\n\n- ESPAT 配合乐鑫[AT 固件（esp-at）](https://github.com/espressif/esp-at)，只支持 TCP 客户端。\n\n- W5X00 接上网线就可以配置+使用了，支持 TCP / UDP 客户端。\n\n在使用 Socket 之前，请先把网络连接好，有线的需要解析 DNS 和 IP 地址、网关，无线的需要填 WIFI 的账号（SSID）和密码，千万不要问出“发现 Bug 了！！！怎么访问不了百度（我没有联网）”的问题。\n\n## 计算机网络基础\n\n> 不会这些基础，你也用不起来。\n\n在应用 MaixPy 网络功能建议知道以下关键词：\n\n- network 和 socket 是什么？\n- TCP \\ UDP 是什么？ HTTP \\ HTTPS \\ MQTT \\ FTP 又是什么？\n\n从实用主义的角度讲解，在 maixpy (micropython) 中，关于网络的内容分为最基础的以下两层接口。\n\n### network\n\n负责管理网卡的接口，网卡是将网络数据协议从硬件发出的一类硬件接口，属于硬件范畴。\n\n举例来说： 通常 WIFI 网卡主要职能就是连接无线路由器，帮助用户连接互联网，而有线网卡则是借由网线帮助用户连接互联网，它们会在这一层完成网关配置、DNS 解析、Ping 请求等操作，若是作为服务端还会完成无线配网、域名解析等功能。\n\n### socket \n\n与网卡不同的地方在于 socket 只负责应用层的数据协议的传输，通常由最底层的 PCB 连接块封装成现在常见的 socket 套接字接口模块，它主要提供 TCP/IP 与 UDP 的连接传输方法，用户可以基于该接口进行网络编程。\n\n#### TCP 和 UDP 是什么？\n\n在 socket 的基础上，我们分为 TCP 和 UDP 两个典型传输接口，主要强调的是两个应用之间通信是否保持连接，如果不保持连接，则使用 UDP 连接方式，需要与服务器保持长连接则使用 TCP 连接方式，注意 UDP 和 TCP 端口是彼此独立的存在，不需要混为一谈。\n\n> TCP 拥有流式长连接重传机制，通过内部几类计时器和数据拥堵窗口可以一定程度上保证用户数据不会丢失，但存在超时等待的情况。\n\n> UDP 则不需要连接，直接讲数据以广播的形式向上层交换机、路由器之间传输，所以 UDP 包具有一定的穿透性，可以在上级网络中不经过配置向外穿透数据包（实际情况会被改变）。\n\n#### HTTP \\ HTTPS \\ MQTT \\ FTP 是什么？\n\n而基于此可以拓展出运行在 80 端口的 HTTP 协议，在 443 端口传输的 HTTP 等通信协议，在 21 端口的 FTP 文件传输协议，基于此的还有 MQTT 和 WebSocket 等应用传输协议，但它们都是基于原始 socket 接口完成的功能，不同的只是封装的应用协议。\n\n### 如何联网？\n\n请根据自己的网络情况选择对应的联网脚本，可以直接运行，也可以将其作为类库上传到硬件中，方便后续的 socket 开发，可以使用类似如下的脚本完成网络的配置，这在示例代码中可以得知具体用法。\n\n一般验证用法：\n\n```python\n\nimport network_esp32\nprint(network_esp32)\nprint(dir(network_esp32))\n\nfrom network_esp32 import wifi\nprint(wifi)\n\n'''ouput\n>>> <module 'network_esp32' from 'network_esp32.py'>\n['__class__', '__name__', '__file__', 'GPIO', 'network', 'time', 'board_info', 'fm', 'wifi']\n<class 'wifi'>\nMicroPython v0.5.1-140-g7bf6445e7-dirty on 2020-11-26; Sipeed_M1 with kendryte-k210\nType \"help()\" for more information.\n>>> \n'''\n\n```\n\n真实环境用法：\n\n```python\n\nSSID = \"Sipeed_2.4G\"\nPASW = \"xxxxxxxx\"\n\ndef enable_esp32():\n    from network_esp32 import wifi\n    if wifi.isconnected() == False:\n        for i in range(5):\n            try:\n                # Running within 3 seconds of power-up can cause an SD load error\n                # wifi.reset(is_hard=False)\n                wifi.reset(is_hard=True)\n                print('try AT connect wifi...')\n                wifi.connect(SSID, PASW)\n                if wifi.isconnected():\n                    break\n            except Exception as e:\n                print(e)\n    print('network state:', wifi.isconnected(), wifi.ifconfig())\n\nenable_esp32()\n\ndef enable_espat():\n    from network_espat import wifi\n    if wifi.isconnected() == False:\n        for i in range(5):\n            try:\n                wifi.reset()\n                print('try AT connect wifi...')\n                wifi.connect(SSID, PASW)\n                if wifi.isconnected():\n                    break\n            except Exception as e:\n                print(e)\n    print('network state:', wifi.isconnected(), wifi.ifconfig())\n\n#enable_espat()\n\n```\n\n#### Maixduino + ESP32\n\n使用 Maixduino 的 esp32 联网，上传该类库 [network_esp32.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/network_esp32.py) 即可。\n\n```python\n# This file is part of MaixPY\n# Copyright (c) sipeed.com\n#\n# Licensed under the MIT license:\n#   http://www.opensource.org/licenses/mit-license.php\n#\n\nimport time, network\nfrom Maix import GPIO\nfrom fpioa_manager import fm\n\nclass wifi():\n\n    nic = None\n\n    def reset(force=False, reply=5, is_hard=True):\n        if force == False and __class__.isconnected():\n            return True\n        try:\n            # IO map for ESP32 on Maixduino\n            fm.register(25,fm.fpioa.GPIOHS10)#cs\n            fm.register(8,fm.fpioa.GPIOHS11)#rst\n            fm.register(9,fm.fpioa.GPIOHS12)#rdy\n\n            if is_hard:\n                print(\"Use Hareware SPI for other maixduino\")\n                fm.register(28,fm.fpioa.SPI1_D0, force=True)#mosi\n                fm.register(26,fm.fpioa.SPI1_D1, force=True)#miso\n                fm.register(27,fm.fpioa.SPI1_SCLK, force=True)#sclk\n                __class__.nic = network.ESP32_SPI(cs=fm.fpioa.GPIOHS10, rst=fm.fpioa.GPIOHS11, rdy=fm.fpioa.GPIOHS12, spi=1)\n                print(\"ESP32_SPI firmware version:\", __class__.nic.version())\n            else:\n                # Running within 3 seconds of power-up can cause an SD load error\n                print(\"Use Software SPI for other hardware\")\n                fm.register(28,fm.fpioa.GPIOHS13, force=True)#mosi\n                fm.register(26,fm.fpioa.GPIOHS14, force=True)#miso\n                fm.register(27,fm.fpioa.GPIOHS15, force=True)#sclk\n                __class__.nic = network.ESP32_SPI(cs=fm.fpioa.GPIOHS10,rst=fm.fpioa.GPIOHS11,rdy=fm.fpioa.GPIOHS12, mosi=fm.fpioa.GPIOHS13,miso=fm.fpioa.GPIOHS14,sclk=fm.fpioa.GPIOHS15)\n                print(\"ESP32_SPI firmware version:\", __class__.nic.version())\n\n            # time.sleep_ms(500) # wait at ready to connect\n        except Exception as e:\n            print(e)\n            return False\n        return True\n\n    def connect(ssid=\"wifi_name\", pasw=\"pass_word\"):\n        if __class__.nic != None:\n            return __class__.nic.connect(ssid, pasw)\n\n    def ifconfig(): # should check ip != 0.0.0.0\n        if __class__.nic != None:\n            return __class__.nic.ifconfig()\n\n    def isconnected():\n        if __class__.nic != None:\n            return __class__.nic.isconnected()\n        return False\n\nif __name__ == \"__main__\":\n    # It is recommended to callas a class library (upload network_espat.py)\n\n    # from network_esp32 import wifi\n    SSID = \"Sipeed_2.4G\"\n    PASW = \"xxxxxxxx\"\n\n    def check_wifi_net(reply=5):\n        if wifi.isconnected() != True:\n            for i in range(reply):\n                try:\n                    wifi.reset(is_hard=True)\n                    print('try AT connect wifi...')\n                    wifi.connect(SSID, PASW)\n                    if wifi.isconnected():\n                        break\n                except Exception as e:\n                    print(e)\n        return wifi.isconnected()\n\n    if wifi.isconnected() == False:\n        check_wifi_net()\n    print('network state:', wifi.isconnected(), wifi.ifconfig())\n\n    # The network is no longer configured repeatedly\n    import socket\n    sock = socket.socket()\n    # your send or recv\n    # see other demo_socket_tcp.py / udp / http / mqtt\n    sock.close()\n\n'''ouput\n    MicroPython v0.5.1-136-g039f72b6c-dirty on 2020-11-18; Sipeed_M1 with kendryte-k210\n    Type \"help()\" for more information.\n    >>>\n    >>>\n    >>>\n    raw REPL; CTRL-B to exit\n    >OK\n    Use Hareware SPI for other maixduino\n    [esp32_spi] use hard spi(1)\n    hard spi\n    esp32 set hard spi clk:9159090\n    Get version fail\n    try AT connect wifi...\n    Use Hareware SPI for other maixduino\n    [Warning] function is used by unknown(pin:10)\n    [Warning] function is used by unknown(pin:6)\n    [Warning] function is used by unknown(pin:11)\n    [esp32_spi] use hard spi(1)\n    hard spi\n    esp32 set hard spi clk:9159090\n    ESP32_SPI firmware version: 1.4.0\n    try AT connect wifi...\n    network state: True ('192.168.0.180', '255.255.255.0', '192.168.0.1')\n    >\n    MicroPython v0.5.1-136-g039f72b6c-dirty on 2020-11-18; Sipeed_M1 with kendryte-k210\n    Type \"help()\" for more information.\n    >>>\n    >>>\n    >>>\n    raw REPL; CTRL-B to exit\n    >OK\n    network state: True ('192.168.0.180', '255.255.255.0', '192.168.0.1')\n    >\n    MicroPython v0.5.1-136-g039f72b6c-dirty on 2020-11-18; Sipeed_M1 with kendryte-k210\n    Type \"help()\" for more information.\n    >>>\n'''\n```\n\n#### ESP82XX 的 AT 固件\n\n使用 ESP8266/85 的 AT 固件联网，上传该类库 [network_espat.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/network_espat.py) 即可\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](../../api_reference/builtin_py/board_info.html)。\n\n```python\n# This file is part of MaixPY\n# Copyright (c) sipeed.com\n#\n# Licensed under the MIT license:\n#   http://www.opensource.org/licenses/mit-license.php\n#\n\nimport time, network\nfrom Maix import GPIO\nfrom machine import UART\nfrom fpioa_manager import fm\nfrom board import board_info\n\nclass wifi():\n\n    __is_m1w__ = True\n    uart = None\n    eb = None\n    nic = None\n\n    def init():\n        if __class__.__is_m1w__:\n            fm.register(0, fm.fpioa.GPIOHS1, force=True)\n            M1wPower=GPIO(GPIO.GPIOHS1, GPIO.OUT)\n            M1wPower.value(0) # b'\\r\\n ets Jan  8 2013,rst cause:1, boot mode:(7,6)\\r\\n\\r\\nwaiting for host\\r\\n'\n\n        fm.register(board_info.WIFI_EN, fm.fpioa.GPIOHS0) # board_info.WIFI_EN == IO 8\n        __class__.en = GPIO(GPIO.GPIOHS0,GPIO.OUT)\n\n        fm.register(board_info.WIFI_RX,fm.fpioa.UART2_TX) # board_info.WIFI_RX == IO 7\n        fm.register(board_info.WIFI_TX,fm.fpioa.UART2_RX) # board_info.WIFI_TX == IO 6\n        __class__.uart = UART(UART.UART2, 115200, timeout=1000, read_buf_len=8192)\n\n    def enable(en):\n        __class__.en.value(en)\n\n    def _at_cmd(cmd=\"AT\\r\\n\", resp=\"OK\\r\\n\", timeout=20):\n        __class__.uart.write(cmd) # \"AT+GMR\\r\\n\"\n        time.sleep_ms(timeout)\n        tmp = __class__.uart.read()\n        # print(tmp)\n        if tmp and tmp.endswith(resp):\n            return True\n        return False\n\n    def at_cmd(cmd=\"AT\\r\\n\", timeout=20):\n        __class__.uart.write(cmd) # \"AT+GMR\\r\\n\"\n        time.sleep_ms(timeout)\n        tmp = __class__.uart.read()\n        return tmp\n\n    def reset(force=False, reply=5):\n        if force == False and __class__.isconnected():\n            return True\n        __class__.init()\n        for i in range(reply):\n            print('reset...')\n            __class__.enable(False)\n            time.sleep_ms(50)\n            __class__.enable(True)\n            time.sleep_ms(500) # at start > 500ms\n            if __class__._at_cmd(timeout=500):\n                break\n        __class__._at_cmd()\n        __class__._at_cmd('AT+UART_CUR=921600,8,1,0,0\\r\\n', \"OK\\r\\n\")\n        __class__.uart = UART(UART.UART2, 921600, timeout=1000, read_buf_len=10240)\n        # important! baudrate too low or read_buf_len too small will loose data\n        #print(__class__._at_cmd())\n        try:\n            __class__.nic = network.ESP8285(__class__.uart)\n            time.sleep_ms(500) # wait at ready to connect\n        except Exception as e:\n            print(e)\n            return False\n        return True\n\n    def connect(ssid=\"wifi_name\", pasw=\"pass_word\"):\n        if __class__.nic != None:\n            return __class__.nic.connect(ssid, pasw)\n\n    def ifconfig(): # should check ip != 0.0.0.0\n        if __class__.nic != None:\n            return __class__.nic.ifconfig()\n\n    def isconnected():\n        if __class__.nic != None:\n            return __class__.nic.isconnected()\n        return False\n\nif __name__ == \"__main__\":\n    # It is recommended to callas a class library (upload network_espat.py) \n\n    # from network_espat import wifi\n    SSID = \"Sipeed_2.4G\"\n    PASW = \"xxxxxxxx\"\n\n    def check_wifi_net(reply=5):\n        if wifi.isconnected() != True:\n            for i in range(reply):\n                try:\n                    wifi.reset()\n                    print('try AT connect wifi...', wifi._at_cmd())\n                    wifi.connect(SSID, PASW)\n                    if wifi.isconnected():\n                        break\n                except Exception as e:\n                    print(e)\n        return wifi.isconnected()\n\n    if wifi.isconnected() == False:\n        check_wifi_net()\n    print('network state:', wifi.isconnected(), wifi.ifconfig())\n\n    # The network is no longer configured repeatedly\n    import socket\n    sock = socket.socket()\n    # your send or recv\n    # see other demo_socket_tcp.py / udp / http / mqtt\n    sock.close()\n\n'''ouput\n    >>>\n    raw REPL; CTRL-B to exit\n    >OK\n    [Warning] function is used by fm.fpioa.GPIOHS1(pin:17)\n    [Warning] function is used by fm.fpioa.GPIOHS0(pin:16)\n    reset...\n    try AT connect wifi... True\n    could not connect to ssid=Sipeed_2.4G\n    reset...\n    try AT connect wifi... True\n    network state: True ('192.168.0.165', '255.255.255.0', '192.168.0.1', '0', '0', 'b0:b9:8a:5b:be:7f', 'Sipeed_2.4G')\n    >\n    MicroPython v0.5.1-136-g039f72b6c-dirty on 2020-11-18; Sipeed_M1 with kendryte-k210\n    Type \"help()\" for more information.\n    >>>\n    >>>\n    >>>\n    raw REPL; CTRL-B to exit\n    >OK\n    network state: True ('192.168.0.165', '255.255.255.0', '192.168.0.1', '0', '0', 'b0:b9:8a:5b:be:7f', 'Sipeed_2.4G')\n    >\n'''\n```\n\n#### Spmod 的 WIZNET5K\n\n使用 Spmod 的 WIZNET5K 网卡联网，运行此类中的代码 [network_wiznet5k.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/network_wiznet5k.py) 即可，可以直接获取对应的 IP 信息\n\n\nWIZNET5K 为有线网卡模块, 使用时只需要将网线插好即可, 使用 SPI 协议, 在完整固件中默认使能了此模块, 最小固件中没有.\n\n```python\nspi1 = SPI(4, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n            polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=WIZNET5K_SPI_SCK, mosi=WIZNET5K_SPI_MOSI, miso = WIZNET5K_SPI_MISO)\n\nnic = network.WIZNET5K(spi = spi1, cs = WIZNET5K_SPI_CS)\nprint(\"Static IP: \", nic.ifconfig())\n\n#dhcp 动态获取 IP, 因为上面已经设置了静态 IP , 这一步可跳过, 要注意的是如果使用 DHCP, 必须像下面代码一样使用死循环, 否则将获取不成功\nwhile True:\n    if(nic.dhclient()):\n        print(\"DHCP IP:\", nic.ifconfig() )\n        break;\n\n'''output\n>>> Static IP:  ('192.168.0.117', '255.255.255.0', '192.168.0.1', '8.8.8.8')\ninit dhcp\nDHCP IP: ('192.168.0.165', '255.255.255.0', '192.168.0.1', '8.8.8.8')\n'''\n\n```\n\n### 联网表现\n\n请在确认了联网，得到了 IP 地址才开始使用 socket 网络编程喔，就如下获得了 IP 地址。\n\n```shell\nnetwork state: True ('192.168.0.165', '255.255.255.0', '192.168.0.1', '0', '0', 'b0:b9:8a:5b:be:7f', 'Sipeed_2.4G')\n```"}, "/soft/maixpy/zh/course/network/socket_usage.html": {"title": "如何使用 Socket 网络编程", "content": "---\ntitle: 如何使用 Socket 网络编程\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 如何使用 Socket 网络编程\n---\n\n\n> 大佬鼠 2020-11-26 编辑，截止目前 MaixPy 的 socket 模块还未能实现 listen / bind / accept 等接口。\n\n## 如何使用 TCP 和 UDP 客户端连接服务器\n\n假设已知 [如何给 MaixPy 连接网络](./network_config.html) 的基础内容，直接运行示例代码。\n\n* 警告：不准问：“没联网为什么不能访问网络的问题！”\n\n请确认 地址 和 端口后再使用以下客户端代码。\n\n### 准备客户端代码\n\n有如下几类典型客户端代码：\n\n- TCP 客户端 [demo_socket_tcp_client.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_socket_tcp_client.py)\n- UDP 客户端 [demo_socket_udp_client.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_socket_udp_client.py)\n- TCP 图传 客户端 [demo_socket_pic_client.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_socket_pic_client.py)\n\n### 准备调试工具（服务端代码）\n\n常见于网络调试助手，或者自己在电脑上运行提供的 Python3 服务端脚本。\n\n- TCP 服务端 [demo_socket_tcp_server.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_socket_tcp_server.py)\n- UDP 服务端 [demo_socket_udp_server.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_socket_udp_server.py)\n- TCP 图传 服务端 [demo_socket_pic_server.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_socket_pic_server.py)\n\n先起一个已知 IP 地址和端口的网络服务，等待 MaixPy 作为客户端发送数据过来服务器。\n\n### 典型客户端代码举例\n\n- TCP\n\n```python\nimport socket\nADDR = (\"192.168.0.107\", 60000)\nsock = socket.socket()\nsock.connect(ADDR)\nsock.settimeout(1)\nwhile 1:\n    sock.send(\"hello\\n\")\n    #data = sock.recv(10) # old maxipy have bug (recv timeout no return last data)\n    #print(data) # fix\n    try:\n      data = b\"\"\n      while True:\n        tmp = sock.recv(1)\n        print(tmp)\n        if len(tmp) == 0:\n            raise Exception('timeout or disconnected')\n        data += tmp\n    except Exception as e:\n      print(\"rcv:\", len(data), data)\n    #time.sleep(2)\n\nsock.close()\n```\n\n- UDP\n\n```python\nimport socket\nADDR = (\"192.168.0.107\", 60000)\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsock.settimeout(1)\nwhile 1:\n    try:\n        sock.sendto(\"hello\\n\", ADDR)\n        data, addr = sock.recvfrom(1024)\n    except Exception as e:\n        print(\"receive error:\", e)\n        continue\n    print(\"addr:\", addr, \"data:\", data)\n    time.sleep(2)\nsock.close()\n'''\n>>>\nraw REPL; CTRL-B to exit\n>OK\nnetwork state: True ('192.168.0.186', '255.255.255.0', '192.168.0.1')\naddr: ('192.168.0.107', 60000) data: b'HELLO\\n'\naddr: ('192.168.0.107', 60000) data: b'HELLO\\n'\naddr: ('192.168.0.107', 60000) data: b'HELLO\\n'\n'''\n```\n\n### 其他网络功能\n\n以下为特殊功能代码。\n\n#### esp32 的 ping\n\n- [demo_esp32_ping.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_esp32_ping.py)\n\n```shell\n    ESP32_SPI firmware version: 1.4.0\n    try AT connect wifi...\n    network state: True ('192.168.0.180', '255.255.255.0', '192.168.0.1')\n    ping baidu.com: 40 ms\n    >\n    MicroPython v0.5.1-136-g039f72b6c-dirty on 2020-11-18; Sipeed_M1 with kendryte-k210\n    Type \"help()\" for more information.\n    >>>\n```\n\n#### esp32 的 ADC\n\n- [demo_esp32_read_adc.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_esp32_read_adc.py)\n\n```shell\n    MicroPython v0.5.1-136-g039f72b6c-dirty on 2020-11-18; Sipeed_M1 with kendryte-k210\n    Type \"help()\" for more information.\n    >>> \n    raw REPL; CTRL-B to exit\n    >OK\n    (2370, 3102, 3071)\n    2017 2753 0977 2709 0963 0855  : adc\n    0617 0757 0150 0095 0133 0153  : adc\n    1319 1478 0955 0939 0698 0619  : adc\n    2403 3231 3299 3298 1483 0779  : adc\n    1119 1815 1274 1315 0230 0255  : adc\n    0951 0951 0295 0283 0319 0399  : adc\n    2175 2769 2576 2579 1487 1104  : adc\n    1995 2846 2647 2699 0839 0441  : adc\n```\n\n> 其实 espAT 也是这样获取 ADC 的，但只能在指定的引脚上。\n\n#### HTTP 的支持\n\n- [demo_http_get_jpg.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_http_get_jpg.py)\n\n#### https 的支持\n\n该功能默认是不被编译的，但所以提供的是 HTTP 的使用方法，而 HTTP 和 HTTPS 只是路径 url 的区别，注意这个 https 的 IP 解析依赖于网卡固件，并不在 K210 上完成。\n\n- [demo_socket_https.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_socket_https.py)\n\n#### esp32、82XX 的 scan WIFI AP 热点\n\n- [demo_esp32_ap_scan.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_esp32_ap_scan.py)\n\n- [demo_espat_ap_scan.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_espat_ap_scan.py)\n\n```python\n'''\n    >>>\n    raw REPL; CTRL-B to exit\n    >OK\n    SSID:    Sipeed_2.4G     , ENC:WPA/WPA2 PSK , RSSI:        -57\n    SSID:   ChinaNet-Ffdj    , ENC:WPA/WPA2 PSK , RSSI:        -58\n    SSID:      wea_615       , ENC:WPA/WPA2 PSK , RSSI:        -67\n    SSID:   ChinaNet-PnAN    , ENC:WPA/WPA2 PSK , RSSI:        -70\n    SSID:      wea_613       , ENC:WPA/WPA2 PSK , RSSI:        -73\n    SSID:   ChinaNet-TnSG    , ENC:WPA/WPA2 PSK , RSSI:        -82\n    SSID:  chipshine_GUEST   , ENC:WPA/WPA2 PSK , RSSI:        -83\n    SSID:        ASUS        , ENC:WPA/WPA2 PSK , RSSI:        -86\n    SSID:       gta888       , ENC:WPA/WPA2 PSK , RSSI:        -87\n    SSID:       huahua       , ENC:WPA/WPA2 PSK , RSSI:        -88\n    >\n    MicroPython v0.5.1-136-g039f72b6c-dirty on 2020-11-18; Sipeed_M1 with kendryte-k210\n    Type \"help()\" for more information.\n    >>>\n'''\n```\n\n#### mqtt 支持\n\n这个是来自于 micropython 的官方仓库提供的代码，如果是商业用途，请将 socket 配置为非阻塞且添加 MQTT 保活的协议。\n\n- [demo_socket_mqtt.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_socket_mqtt.py)\n\n#### 更新 ESP82XX 的 AT 固件\n\n> 这是给 AT 固件提供的功能，懂的自然懂。\n\n- [demo_espat_ap_test.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_espat_ap_test.py)\n\n- [espat_upgrade.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/espat_upgrade.py)"}, "/soft/maixpy/zh/course/others/pye.html": {"title": "pye (Micropython Editor)", "content": "---\ntitle: pye (Micropython Editor)\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: pye (Micropython Editor)\n---\n\n\n在 MaixPy 中, 我们内置了一款编开源编辑器 [Micropython Editor(pye)](https://github.com/robert-hh/Micropython-Editor)\n\n> 注意在`minimum`版本的固件中不包含此功能\n\n使用 `os.listdir()` 可以查看当前目录下的文件,\n\n使用 `pye(\"hello.py\")` 可以创建文件并进入编辑模式, 快捷键等使用说明可以在[这里查看](https://github.com/robert-hh/Micropython-Editor/blob/master/Pyboard%20Editor.pdf)\n\n比如我们写入代码\n\n```python\nprint(\"hello maixpy\")\n```\n\n然后按 `Ctrl+S` 按 `Enter` 键保存, 按 `Ctrl+Q` 退出编辑\n\n**注意**： 使用这款编辑器对使用的串口工具有一定要求, 必须将 `BackSpace` 按键设置为 `DEL` 功能, 否则按 `BackSpace` 调用的是 `Ctrl+H` 一样的功能（即字符替换）。\n\nLinux 下推荐使用 `minicom`, 需要使用 `sudo minicom -s` 来设置,参考[前面的教程](./../../get_started/env_serial_tools.html)\n\nWindows 下也一样, 根据自己使用的工具上网搜设置方法, 比如 `xshell` 搜 `xshell如何设置backspace为del` 得到结果：\n\n`文件` -> `属性` -> `终端` -> `键盘`,\n把 delete 和 backspace 序列改为 ASCII 127 即可."}, "/soft/maixpy/zh/course/others/mem.html": {"title": "内存管理", "content": "---\ntitle: 内存管理\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 内存管理\n---\n\n\n\n在 MaixPy 中， 目前使用了两种内存管理， 一种是 GC（垃圾回收）， 另一种是系统堆内存， 两者同时存在。\n\n比如：芯片有 6MiB 内存，加入固件使用了前面的 2MiB， 还剩 4MiB， 默认 `GC`使用 512KiB， 剩下的给系统堆内存管理。\n\n\n* 在`mpy`层面写的代码， 变量都是存在`GC`管理的内存块中，比如定义一个变量`a = [1,2,3,4]`, 如果`GC'`内存不足了， 会自动触发`gc.collect()`函数的执行， `GC`会自动把没有在使用了的变量给销毁，留出来空间给新的变量使用。\n> `GC`使用`标记-清除`的方式进行内存回收，有兴趣可以看[这里](https://neucrack.com/p/46)\n* 因为`GC`要扫描内存， 如果除了程序占用的内存，剩下的都给`GC`，那每次扫描需要耗费大量时间，所以分成了两中内存。 堆内存由 `C`层面的代码控制，主要用于图片内存， AI内存， LCD 内存， 以及模型加载到内存等\n\n\n`GC` 内存的总大小是可以设置的， 所以，根据具体的使用情况可以适当修改`GC`内存大小， 比如：\n* 为了加载更大的模型，可以把 `GC`内存设置小一点\n* 如果分配新的变量提示内存不足， 可以适当将`GC`内存设置大一点即可\n* 如果都不够了， 就要考虑缩减固件大小，或者优化代码了\n\n设置`GC`内存大小示例：\n\n```python\nfrom Maix import utils\nimport machine\n\nprint(utils.gc_heap_size())\n\nutils.gc_heap_size(1024*1024) # 1MiB\nmachine.reset()\n```\n\n注意修改后需要重启生效\n\n查看内存分配情况：\n\n```python\nimport gc\n\nprint(gc.mem_free() / 1024) # stack mem\n\nimport Maix\n\nprint(Maix.utils.heap_free() / 1024) # heap mem\n\n'''\n>>> \nraw REPL; CTRL-B to exit\n>OK\n352.0937\n4640.0\n>\nMicroPython v0.5.1-136-g039f72b6c-dirty on 2020-11-18; Sipeed_M1 with kendryte-k210\nType \"help()\" for more information.\n>>> \n'''\n```"}, "/soft/maixpy/zh/course/others/maixui.html": {"title": "MaixUI 基础使用指导", "content": "---\ntitle: MaixUI 基础使用指导\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixUI 基础使用指导\n---\n\n\n如何正确的食用 MaixUI 项目？\n\n## 为什么要开发它？它的意义和存在价值是什么？\n\n在任何芯片下永远存在对 UI 框架的基本需求，但由于 K210 无法在支持 Ai 功能的情况下继续使用 LVGL 环境，导致 UI 失去了本来存在的意义。\n\n也就是在不能用 QT 也不能用 LVGL 的时候，又希望能够使用 Python 编写 UI 应用，所以才诞生了基于 image 的 MaixUI UI 框架。\n\n## 对 MaixUI 的要求\n\n在最新 MaixPy 固件的基础上 2020年10月7日 满足如下要求。\n\n- 确保 MicroPython 的 GC 内存在任何时候都是使用可回收可控的。\n\n- 确保 UI 组件代码独立，不包含在固件，可被调试修改。\n\n- 确保系统稳定性，保证代码和硬件资源均可重入，不会出现 core dump 现象。\n\n- 运行可重入，也就运行动态代码展示 UI 样式，类似 HTML5 / CSS 的设计。\n\n- Python 的异常捕获实时反馈到屏幕上，快速定位出错行。\n\n- UI 相关的绘制函数可被多处装饰使用，也可独立运行。\n\n- 框架提供的所有 MicroPython 硬件驱动均可独立运行相应的单元测试。\n\n- 框架运行时允许动态加载外部符合结构的 UI 应用，可以从 storage 或 network 上获取用户自定义应用。\n\n所以在最基础的示例中，它将严格控制内存占用控制在 512k ~ 1M ，并将绘图性能保持 15 ~ 24fps 之间。\n\n## 如何食用？\n\n来，我们从最简单的入口代码开始说起，完整的代码在这里 [app_main.py](https://github.com/sipeed/MaixUI/blob/master/app/app_main.py) 。\n\n```python\n# This file is part of MaixUI\n# Copyright (c) sipeed.com\n#\n# Licensed under the MIT license:\n#   http://www.opensource.org/licenses/mit-license.php\n#\n\nimport time, gc, math, sys\n\ntry:\n  from core import agent, system\n  from dialog import draw_dialog_alpha\n  from ui_canvas import ui, print_mem_free\n  from ui_container import container\n  from wdt import protect\n  from creater import get_time_curve\nexcept ImportError as e:\n  sys.print_exception(e)\n  from lib.core import agent, system\n  from lib.dialog import draw_dialog_alpha\n  from ui.ui_canvas import ui, print_mem_free\n  from ui.ui_container import container\n  from driver.wdt import protect\n  from lib.creater import get_time_curve\n\n```\n\n分别是运行它所需要 import 的依赖代码，有如下依赖：\n\n- from core import agent, system\n  - 提供一个 agent 软定时器和一个全局实例 system 软定时器对象。\n- from dialog import draw_dialog_alpha\n  - 提供了一个圆角边框 MessageBox 控件的绘图操作。\n- from ui_canvas import ui, print_mem_free\n  - 提供了一个 UI 画布的基础接口，通过它来管理全局的统一绘图操作。\n- from ui_container import container\n  - 提供了一种运行 UI 应用的容器模块，可以通过它切换不同的 UI 应用。\n- from wdt import protect\n  - 看门狗，保证系统在出现 core dump 后能够重启恢复过来。\n- from creater import get_time_curve\n  - 一种基于时间或计数器的曲线生成函数，用来维持非线性动画效果。\n\n这两段代码是用来 import 加载到不同区域（在 Flash/SD 的根目录或文件夹下）的代码，所以你知道怎么 import 代码了就行。\n\n- 可以使用 MaixPy IDE 发送文件，也可以使用 [mpfshell-lite](https://github.com/junhuanchen/mpfshell-lite) put 文件到硬件的 flash 或 sd 中。\n- 可以使用 SD 读卡器，把整个 maixui 仓库下的文件夹放到 SD 卡中启动即可。\n\n### 定义 UI 应用\n\n接着介绍一种典型的基础应用的案例，准备如下代码（class launcher 静态类）。\n\n```python\n\nclass launcher:\n\n  def load():\n    __class__.ctrl = agent()\n    __class__.ctrl.event(20, __class__.draw)\n\n  def free():\n    __class__.ctrl = None\n\n  @ui.warp_template(ui.blank_draw)\n  @ui.warp_template(ui.grey_draw)\n  @ui.warp_template(ui.bg_in_draw)\n  @ui.warp_template(ui.anime_in_draw)\n  @ui.warp_template(ui.help_in_draw)\n  #@ui.warp_template(taskbar.time_draw)\n  #@ui.warp_template(taskbar.mem_draw)\n  #@catch # need sipeed_button\n  def draw():\n    height = 100 + int(get_time_curve(3, 250) * 60)\n    pos = draw_dialog_alpha(ui.canvas, 20, height, 200, 20, 10, color=(255, 0, 0), alpha=200)\n    ui.canvas.draw_string(pos[0] + 10, pos[1] + 10, \"Welcome to MaixUI\", scale=2, color=(0,0,0))\n    ui.display()\n\n  def event():\n    __class__.ctrl.cycle()\n\n```\n\n在这里， __class__ 类似于 实例类 中的 this 指针，可以通过它访问当前类的全局变量。\n\n该静态类拥有有 load / free / event 三个生命周期函数用以提供给 UI 容器维持该 UI 应用的持续运行。\n\n- load 只会执行一次，用于 UI 应用的初始化。\n- free 只会执行一次，用于 UI 应用的释放。\n- event 将会提供给 UI 容器循环执行其中的操作。\n  - UI 容器指的是 [ui/ui_container.py](https://github.com/sipeed/MaixUI/tree/master/ui/ui_container.py) 。\n  - 当然你也可以不通过 UI 容器来维持运行。\n\n可以看到该 UI 应用在 load 的时候定义了 agent 软定时器和设置了绘图函数的期望执行周期为 20ms ，设置再小也不会低于真实运行的周期。\n\n```python\n    __class__.ctrl = agent()\n    __class__.ctrl.event(20, __class__.draw)\n```\n\n然后在 event 函数中维持 软定时器 ctrl 拥有的分时事件（非阻塞 no-block），因此基于此设计你可以制作很多个不同定时的分时任务。\n\n```python\n    __class__.ctrl.cycle()\n```\n\n它可以周期执行，也可以用完删除，就如下示范。\n\n```python\n    self.ctrl = agent()\n    # loop\n    self.ctrl.event(5, self.draw)\n    # once\n    def into_launcher(self):\n      container.reload(launcher)\n      self.remove(into_launcher)\n    self.ctrl.event(2000, into_launcher)\n```\n\n接着我们看到具体的 UI 绘图事件，不同于按键/触摸等硬件驱动事件，但无论是哪类事件，我们都期望它能够尽快结束，交出运行核心。\n\n```python\n  @ui.warp_template(ui.blank_draw)\n  @ui.warp_template(ui.grey_draw)\n  @ui.warp_template(ui.bg_in_draw)\n  @ui.warp_template(ui.anime_in_draw)\n  @ui.warp_template(ui.help_in_draw)\n  #@ui.warp_template(taskbar.time_draw)\n  #@ui.warp_template(taskbar.mem_draw)\n  #@catch # need sipeed_button\n  def draw():\n    height = 100 + int(get_time_curve(3, 250) * 60)\n    pos = draw_dialog_alpha(ui.canvas, 20, height, 200, 20, 10, color=(255, 0, 0), alpha=200)\n    ui.canvas.draw_string(pos[0] + 10, pos[1] + 10, \"Welcome to MaixUI\", scale=2, color=(0,0,0))\n    ui.display()\n```\n\n在这里，我们有一个最基础的 draw() 绘图函数，也为它装饰了 5 个基础函数，事实上装饰只是好看，它实际上等效于如下代码，所以是否使用取决于你的喜好。\n\n```python\n  def draw():\n    ui.blank_draw()    # 准备一个空白的 image 画布对象\n    ui.grey_draw()     # 给 画布 画上灰色\n    ui.bg_in_draw()    # 给 画布 画上内置的 背景图 一个 sipeed 的 logo 。\n    ui.anime_in_draw() # 给 画布 加载四周水波动画效果\n    ui.help_in_draw()  # 给 画布 画上 内置的 帮助说明。\n\n    height = 100 + int(get_time_curve(3, 250) * 60) # 获取基于时间的正弦曲线值\n    # 在指定位置画出 圆角边框的 MessageBox 的效果，并获取边框的 左上角起点 。\n    pos = draw_dialog_alpha(ui.canvas, 20, height, 200, 20, 10, color=(255, 0, 0), alpha=200)\n    # 在指定位置打印 \"Welcome to MaixUI\" 字符串。\n    ui.canvas.draw_string(pos[0] + 10, pos[1] + 10, \"Welcome to MaixUI\", scale=2, color=(0,0,0))\n    # 把当前的画布显示到屏幕上，多次执行也不影响，执行后会释放当前画布对象。\n    ui.display()\n```\n\n接入其他按键/触摸/摄像头的事件亦如此，可以在此查看 UI 绘图的具体实现 [ui/ui_canvas.py](https://github.com/sipeed/MaixUI/tree/master/ui/ui_canvas.py)。\n\n### 运行 UI 框架\n\n在真正进入上述的业务逻辑之前，我们需要把 UI 框架跑起来，因此我们需要一个入口函数，如 `if __name__ == \"__main__\":` 中的代码。\n\n```python\n\nif __name__ == \"__main__\":\n  container.reload(launcher)\n  while True:\n    container.forever()\n\n```\n\n讲解一下，我们看到使用 UI 容器 （container.reload(launcher)） 加载一个名为 launcher 的 UI 应用即可运行，可以在此查看 UI 容器的具体实现 [ui/ui_container.py](https://github.com/sipeed/MaixUI/tree/master/ui/ui_container.py)。\n\n但仅仅这样写是不够稳定的，所以我们可以通过两个 while True 保持程序永远不会退出（除非系统 core dump 崩溃）。\n\n并通过 last 与 当前 tick_ms 做差得到当前的 fps 值，建议非调试场合建议关闭 print 这个函数，它非常耗时（ms 级）。\n\n```python\n  while True:\n    while True:\n      last = time.ticks_ms() - 1\n      while True:\n        try:\n          #time.sleep(0.1)\n          print(1000 // (time.ticks_ms() - last), 'fps')\n          last = time.ticks_ms()\n        except Exception as e:\n          gc.collect()\n          print(e)\n        finally:\n          try:\n            ui.display()\n          except:\n            pass\n\n```\n\n然后我们加强一下环境的稳定性，加入看门狗的维持（protect.keep()）和 GC 内存回收（gc.collect()），还有维持一个全局的软定时器（system.parallel_cycle()），用作全局的定时器线程。\n\n```python\n\nif __name__ == \"__main__\":\n  container.reload(launcher)\n  while True:\n    while True:\n      last = time.ticks_ms() - 1\n      while True:\n        try:\n          #time.sleep(0.1)\n          print(1000 // (time.ticks_ms() - last), 'fps')\n          last = time.ticks_ms()\n\n          gc.collect()\n          container.forever()\n          system.parallel_cycle()\n\n          protect.keep()\n          #gc.collect()\n          #print_mem_free()\n        except KeyboardInterrupt:\n          protect.stop()\n          raise KeyboardInterrupt\n        #except Exception as e:\n          #gc.collect()\n          #print(e)\n        finally:\n          try:\n            ui.display()\n          except:\n            pass\n\n```\n\n- 你可以通过 time.sleep(0.1) 来降低 UI 容器的执行速率来观察 UI 的变化状态是否符合预期，有时候高于 15 fps 的变化人眼感知不到，就可以减少不必要的绘图过程，压缩绘图过程提高性能。\n- 你可以通过 except Exception as e: 来保证任何异常都不会导致 UI 框架的崩溃，但调试的时候可以把这个注释，来捕获可能出现的异常。\n\n> 默认情况下程序超过 10 秒没有执行 protect.keep() 重置看门狗，则系统自动重启，这从 import wdt 驱动的时候就开始计时了，详细可以看 [driver/wdt.py](https://github.com/sipeed/MaixUI/tree/master/driver/wdt.py) 驱动。\n\n最后再加入捕获 KeyboardInterrupt 异常事件来保证程序可以在 IDE 或 Ctrl + C 输入后，停下来并被重新运行，并停下看门狗事件（protect.stop()），同时还要在 finally 中试图执行 ui.display() 防止绘图事件中存在异常导致没有释放画布，保证 image 画布对象永远都能在循环的最后被释放。\n\n```python\n  try:\n    protect.keep()\n  except KeyboardInterrupt:\n    protect.stop()\n    raise KeyboardInterrupt\n  except Exception as e:\n    gc.collect()\n    print(e)\n  finally:\n    try:\n      ui.display()\n    except:\n      pass\n```\n\n以上就是 MaixUI 框架最基础的示范，虽然 MaixUI 只会提供 Cube 和 Amigo 的应用案例，但只要基于 MaixPy 均可使用，或者说，支持 image 接口对象的 MicroPython 环境均可使用。\n\n希望我们未来能会同步到 CPython 共用的，也就是可以在 CPython 上进行 UI 样式的开发同步到 MicroPython 环境中，这会高效率的完成开发的，但性能也不能落下。\n\n### 最后\n\n本文档介绍如何运行最基础的示例，如果想看更多示例，可以参考 [app_cube.py](https://github.com/sipeed/MaixUI/tree/master/app/app_cube.py) & [app_amigo.py](https://github.com/sipeed/MaixUI/tree/master/app/app_amigo.py) 两个案例。\n\n> 截至目前 2020年10月7日 已经完成 MaixPy 的常见功能使用的 App 案例，不过这需要你亲自烧写一下体验看看了 XD ， 说明里只有一点简单的交互与动画展示。\n\n目前 app_main.py 运行效果如下：\n\n![](./image/app_main.gif)"}, "/soft/maixpy/zh/course/others/lvgl.html": {"title": "lvgl", "content": "---\ntitle: lvgl\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: LittlevGL\n---\n\n\n**现在已经不推荐使用该模块，请使用者具备足够的开发水平，不接收有关于 LVGL 与 AI 功能共用的问题，谢谢配合（2020年12月11日大佬鼠宣）**\n\n请使用带有 LVGL 字样的 bin 固件进行操作。\n\n参考官方文档： [lvgl blog page](https://blog.littlevgl.com/2019-02-20/micropython-bindings)\n\n## 例程\n\n参考 [github 的 MaixPy_Scripts](https://github.com/sipeed/MaixPy_scripts/tree/master/multimedia/gui/lvgl)"}, "/soft/maixpy/zh/course/others/system.html": {"title": "系统控制", "content": "---\ntitle: 系统控制\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 系统控制\n---\n\n\n## 复位（reset）\n\n```python\nimport machine\n\nmachine.reset()\n```\n\n\n## 主频（cpu）\n\n可以设置 CPU 和 KPU 的主频， 具体参考[Maix.freq](./../../api_reference/Maix/freq.html)模块\n\n```python\nfrom Maix import freq\nfreq.set(cpu = 400, kpu = 400)\n```"}, "/soft/maixpy/zh/course/media/video.html": {"title": "video（视频） 的使用", "content": "---\ntitle: video（视频） 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: video（视频） 的使用\n---\n\n\n详细 API 参考：[video API](./../../api_reference/media/video.html)\n\n## 使用方法\n\n> MaixAmigo, MaixCube在使用音频前需要[初始化 ES8374 音频解码芯片](https://github.com/sipeed/MaixPy_scripts/blob/master/modules/others/es8374/es8374.py)\n\n* 创建 video 对象，设置音量\n\n```python \nimport video\n\nv = video.open(\"/sd/badapple.avi\")\nv.volume(50)\n```\n\n* 初始化 lcd，用于播放画面\n\n```python\nimport lcd\n\nlcd.init()\n```\n\n* 创建 I2S，用于处理音频对象\n\n```python\nfrom Maix import GPIO, I2S\n\ni2s = I2S(I2S.DEVICE_0)\ni2s.channel_config(i2s.CHANNEL_1, I2S.TRANSMITTER, resolution=I2S.RESOLUTION_16_BIT,\n                       cycles=I2S.SCLK_CYCLES_32, align_mode=I2S.RIGHT_JUSTIFYING_MODE)\nfm.register(34,  fm.fpioa.I2S0_OUT_D1, force=True)\nfm.register(35,  fm.fpioa.I2S0_SCLK, force=True)\nfm.register(33,  fm.fpioa.I2S0_WS, force=True)\n\n```\n\n* 播放视频\n\n```python\nwhile True:\n    if v.play() == 0:\n        print(\"play end\")\n        break\n```\n\n* 回收对象\n\n```python\nv.__del__()\n```\n\n## 例程\n\n> 测试用例中 avi 文件地址：[badapple.avi](https://api.dl.sipeed.com/shareURL/MAIX/MaixPy/assets)\n\n* 播放 avi 文件：[video_play](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/video/demo_video_play.py)\n* 使用摄像头录制视频为 avi 文件并保存：[record_video](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/video/demo_video_record.py)\n* 顺序捕获 avi 视频每个画面并显示：[video_capture](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/video/demo_video_capture.py)\n* amigo 播放 avi 文件：[amigo_play_video](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/video/amigo_play_video.py)"}, "/soft/maixpy/zh/course/media/audio.html": {"title": "audio（音频） 的使用", "content": "---\ntitle: audio（音频） 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: audio（音频） 的使用\n---\n\n\n详细 API 参考：[audio API](./../../api_reference/media/audio.html)\n\n## 使用方法\n\n> MaixAmigo, MaixCube 在使用音频前需要[初始化 ES8374 音频解码芯片](https://github.com/sipeed/MaixPy_scripts/blob/master/modules/others/es8374/es8374.py)\n\n* 创建 audio 对象\n\n```python \nimport audio\n\nplayer = audio.Audio(path = \"/sd/6.wav\")\n```\n\n* 创建 I2S 对象（用于处理音频对象）\n\n```python\nfrom Maix import I2S\n\n# init i2s(i2s0)\nwav_dev = I2S(I2S.DEVICE_0)\n# config i2s according to audio info\nwav_dev.channel_config(wav_dev.CHANNEL_1, I2S.TRANSMITTER,resolution = I2S.RESOLUTION_16_BIT ,cycles = I2S.SCLK_CYCLES_32, align_mode = I2S.RIGHT_JUSTIFYING_MODE)\n```\n\n* 获取 audio 对象信息并关联 I2S 对象\n\n```python\n# read audio info\nwav_info = player.play_process(wav_dev)\nprint(\"wav file head information: \", wav_info)\n```\n\n* 根据 audio 信息配置 I2S 对象\n\n```python\nsample_rate = wav_info[1]\nwav_dev.set_sample_rate(sample_rate)\n```\n\n* 使用已关联的 I2S 对象播放音频\n\n```python\n# loop to play audio\nwhile True:\n    ret = player.play()\n    if ret == None:\n        print(\"format error\")\n        break\n    elif ret==0:\n        print(\"end\")\n        break\n```\n\n* 结束播放\n\n```python\nplayer.finish()\n```\n\n## 例程\n\n> 测试音频地址：[6.wav](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/audio/6.wav)\n\n* 播放 wav 文件：[play_wav](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/audio/play_wav.py)\n* 录制音频为 wav 文件并保存：[record_wav](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/audio/record_wav.py)"}, "/soft/maixpy/zh/course/advance/add_c_module.html": {"title": "如何用 C 添加一个 MaixPy 模块", "content": "---\ntitle: 如何用 C 添加一个 MaixPy 模块\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 如何用 C 添加一个 MaixPy 模块\n---\n\n\n\n## 预备知识\n\n在 `python` 中万物皆对象\n\n需要先知道 module，type， function， class 分别是什么，有什么关系和区别 \n\n* module（模块）\n\n在`MaixPy`中，把每个类别的功能放到一个 模块 中，\n比如内置的 `uos`,`usys`,`machine`，\n另外我们自己新建的文件， 比如`test.py` 也可以是一个模块，\n我们使用模块都这样使用：\n```python\nimport uos\nimport machine\nimport test\n```\n> 在 C 源码中就是 `mp_type_module`\n\n* type（类型）\n\n用来表示一个基本的类型， 它可以包含一些方法或者变量\n\n> 在 C 源码中就是 `mp_type_type`\n\n* class（类）\n\n一个 class 其实就是一个 `type`，比如\n```python\nclass A:pass\nprint(type(A))\n```\n会输出\n```\n<class 'type'>\n```\n\n当对`A`进行了实例化\n```\nclass A:pass\na = A()\nprint(type(a))\n```\n会输出\n```\n<class 'A'>\n```\n表示`a`是`A`的一个实例（对象）\n\n> 在 C 中定义一个类其实就是定义一个 `mp_type_type`\n\n## 在 C 中添加模块\n\n我们的目标是实现在`MaixPy`层面可以使用以下代码：\n```python\nimport my_lib\nprint(my_lib.__name__)\nmy_lib.hello()\n```\n\n\n### 在`components/port/src`目录下新建一个文件夹比如取名`my_lib`\n\n### 然后在`my_lib`文件夹下新建`my_lib.c`文件\n\n### 编辑`my_lib.c`添加代码\n#### 定义一个模块：\n```c\n#include \"obj.h\"\n\nconst mp_obj_module_t my_lib_module = {\n    .base = { &mp_type_module },\n    .globals = (mp_obj_dict_t*)&mp_module_my_lib_globals_dict,\n};\n```\n这里`my_lib_module`是定义的`my_lib`模块对象,\n`mp_type_module`表明是一个模块，\n`mp_module_my_lib_globals_dict`是模块的全局变量和函数，是一个`dict`对象，有我们自己定义， 现在还没定义\n\n#### 定义模块的全局变量\n\n```c\nSTATIC mp_obj_t hello()\n{\n    mp_printf(&mp_plat_print, \"hello from my_lib\");\n    return mp_const_none;\n}\n\nMP_DEFINE_CONST_FUN_OBJ_0(my_lib_func_hello_obj, my_lib_func_hello);\n\nSTATIC const mp_map_elem_t my_lib_globals_table[] = {\n    { MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR_my_lib) },\n    { MP_OBJ_NEW_QSTR(MP_QSTR_hello), (mp_obj_t)&my_lib_func_hello_obj },\n    \n};\n\nSTATIC MP_DEFINE_CONST_DICT (\n    mp_module_my_lib_globals_dict,\n    my_lib_globals_table\n);\n```\n\n这里定义了一组键值对数组，键值对数值, `mp_map_elem_t`的定义如下：\n```c\ntypedef struct _mp_map_elem_t {\n    mp_obj_t key;\n    mp_obj_t value;\n} mp_map_elem_t;\n```\n\n* 第一个值是`key`，类型是`str`对象， 即在`MaixPy`层面使用`my_lib.key`来调用。这里用了`MP_OBJ_NEW_QSTR(MP_QSTR___name__)`生成了一个值为`__name__`的`str`对象，你可能有疑问`__name__`这个`c`变量定义在哪里，这是在编译阶段使用工具自动生成`c`变量，总之记住这样可以写可以生成一个常量`str`对象保存在固件里就好了\n* 第二个值是数值，类型是一个对象，可以是`str/function/int/float/tuple/list/dict`等， 方式如下：\n  * `str`: 这里同样是定义了一个`str`类型的值为`my_lib`,即在`MaixPy`层面使用`my_lib.__name__`得到结果`my_lib`。\n  * `其它常量对象`： 可以使用`mp_obj_new_xxx`,比如`int`变量`mp_obj_new_int(10)`， 函数在`obj.h`中搜索\n  * `函数`： 这里的`key``hello`对应的值为为`(mp_obj_t)&my_lib_func_hello_obj`，是一个函数对象，注意不是`C`函数，前面说了`python`中一切皆对象， 这里也是使用了一个函数对象，然后去地址强制转换成 `mp_obj_t`。这个函数对象使用了`MP_DEFINE_CONST_FUN_OBJ_0`宏定义将`my_lib_func_hello`这个`C`函数定义为`my_lib_func_hello_obj`这个对象，注意`hello`函数需要返回一个值`mp_const_none`,注意不能返回`NULL`， 因为`NULL`不是一个(`MaixPy`)对象， 这个返回值也就是`MaixPy`层面调用`hello()`函数时的返回值\n  > 除了`MP_DEFINE_CONST_FUN_OBJ_0`即没有参数之外，还有`1/2/3/n`个参数，以及带关键字参数，这些请翻阅源码举一反三学习\n\n\n然后使用`MP_DEFINE_CONST_DICT`宏定义将`my_lib_globals_table`这个键值对变成`MaixPy`层面能理解的`dict`对象（`mp_map_elem_t`只是`C`层面能理解）`mp_module_my_lib_globals_dict`, 这个对象也被上一步中定义模块的时候使用\n\n到此一个模块就定义完成了， 在 `MaixPy`层面，理论上可以使用如下语句进行使用了\n```python\nimport my_lib\nprint(my_lib.__name__)\nmy_lib.hello()\n```\n\n但是我们还没编译\n\n#### 将模块添加到固件， 并进行编译\n\n* 在`my_lib.c`文件末尾添加:\n\n```c\nMP_REGISTER_MODULE(MP_QSTR_my_lib, my_lib_module, MODULE_MY_LIB_ENABLED);\n\n```\n\n这行代码注册这个模块，但是是否编译进固件取决与`MODULE_MY_LIB_ENABLED`这个宏定义在`mpconfigport.h`中是否定义为`1`\n\n* 所以我们打开`mpconfigport.h`文件，在里面添加\n\n```c\n#define MODULE_MY_LIB_ENABLED (1)\n```\n\n* 打开`components/micropython/CMakeLists.txt`编辑\n\n找到文件中有`############## Add source files ###############` 的地方，\n在后面添加\n```cmake\nappend_srcs_dir(MPY_PORT_SRCS \"port/src/my_lib\")\n```\n到此，项目才会将`my_lib`这个文件夹编译到固件\n\n然后`python project.py rebuild`编译固件即可，因为新增了文件，一定要用`rebuild`命令而不是`build`，注意编译提示，如果有报错，注意修改\n\n\n## 在模块中添加一个 type\n\n前面定义了一个`my_lib`模块，现在我们希望在`my_lib`中定义一个类，叫`A`，如下\n\n```python\nimport my_lib\n\na = my_lib.A()\nprint(a.add(1, 2))\n```\n\n这里只讲大致上的思路，然后提供样例，聪明的你一下就能理解了\n\n* 定义一个`mp_obj_type_t` 对象，正如前面定义`mp_obj_module_t`一样\n* 同样的，给这个类对象一个`dict`对象，作为这个类的成员，成员可以是常量或者函数甚至是另一个`type`对象\n* 将这个类对象注册到前面的`my_lib`模块\n\n定义`mp_obj_type_t`对象和成员定义可以参考`port/src/standard_lib/machine/machine_i2c.c`中的实现\n> 定义`mp_obj_type_t`时有一个`make_new`成员，这个函数是用来新建对象时会被调用的函数，比如`a = my_lib.A(); a.add(1,2)`\n> 如果不新建对象，直接调用类方法或变量，这个函数不会被调用`A.var_a`\n\n比如我们定义了一个`const mp_obj_type_t my_lib_A_type ... `\n\n然后在`my_lib/my_lib.c`中 `my_lib_globals_table`中添加这个对象，并将其映射到`key` `A`即可\n```c\n{ MP_ROM_QSTR(MP_QSTR_A),  MP_ROM_PTR(&my_lib_A_type) },\n```\n\n\n\n## 使用 C 语言编写固件时需要注意\n\n* `mp_printf` vs `printk` vs `printf`：\n因为`IDE`使用了串口通信协议，所以在`C`层面不要直接使用`printk`或者`printf`函数打印消息，**必须**使用`mp_printf`函数来打印，不然会导致 `IDE` 运行时收到不理解的数据而断开连接！！\n\n当然平时调试可以使用`printk`，因为这个函数不会触发系统中断，可以在中断函数里面调用，但是仅限调试时使用， 实际提交代码时一定要删除掉！！"}, "/soft/maixpy/zh/course/advance/compile.html": {"title": "如何编译", "content": "---\ntitle: 如何编译\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 如何编译\n---\n\n\n本文是为了帮助一些想要成为开发者的用户而写的开源项目の开发文档。\n\n## 获取 maixpy 开源项目\n\n请准备 linux 系统环境（在 Windows 上使用 WSL 也可以），挂上 XXX 代理，输入 `git clone https://github.com/sipeed/MaixPy` 拉取 MaixPy 仓库代码和子模块，确保拿到后阅读目录下的 [build.md](https://github.com/sipeed/MaixPy/blob/master/build.md) 文档。\n\n> 没有代理的同学可以用 github 镜像站列表（`https://github.com/rc1844/fastgithub`）加速拉取 maixpy 仓库，请不要用 gitee 拉取 maixpy 仓库，会掉子模块仓库的。\n\n```\njuwan@juwan-N85-N870HL:~$ git clone https://gitclone.com/github.com/sipeed/MaixPy\n正克隆到 'MaixPy'...\nremote: 对象计数中: 77517, 完成.\nremote: 压缩对象中: 100% (20929/20929), 完成.\nremote: Total 77517 (delta 56791), reused 76050 (delta 55761)\n接收对象中: 100% (77517/77517), 53.62 MiB | 972.00 KiB/s, 完成.\n处理 delta 中: 100% (56791/56791), 完成.\njuwan@juwan-N85-N870HL:~$ cd MaixPy/\njuwan@juwan-N85-N870HL:~/MaixPy$ git submodule update --recursive --init\n子模组 'components/kendryte_sdk/kendryte-standalone-sdk'（https://github.com/sipeed/kendryte-standalone-sdk）已对路径 'components/kendryte_sdk/kendryte-standalone-sdk' 注册\n子模组 'components/micropython/core'（https://github.com/micropython/micropython.git）已对路径 'components/micropython/core' 注册\n子模组 'components/micropython/port/src/lvgl/lv_bindings'（https://github.com/littlevgl/lv_binding_micropython.git）已对路径 'components/micropython/port/src/lvgl/lv_bindings' 注册\n子模组 'components/micropython/port/src/ulab/micropython-ulab'（https://github.com/Neutree/micropython-ulab.git）已对路径 'components/micropython/port/src/ulab/micropython-ulab' 注册\n子模组 'components/spiffs/core'（https://github.com/pellepl/spiffs.git）已对路径 'components/spiffs/core' 注册\n子模组 'tools/flash/kflash_py'（https://github.com/sipeed/kflash.py.git）已对路径 'tools/flash/kflash_py' 注册\n子模组 'tools/kconfig/Kconfiglib'（https://github.com/ulfalizer/Kconfiglib.git）已对路径 'tools/kconfig/Kconfiglib' 注册\n子模组 'tools/spiffs/mkspiffs'（https://github.com/igrr/mkspiffs.git）已对路径 'tools/spiffs/mkspiffs' 注册\n正克隆到 '/home/juwan/MaixPy/components/kendryte_sdk/kendryte-standalone-sdk'...\n正克隆到 '/home/juwan/MaixPy/components/micropython/core'...\n```\n\n注意，这之后拉取子仓库是没有加速的，会从 github 试图拉取，你也可以用同样的方法单独拉取子模块位置（在 `.gitmodules` 中定义），本篇文档是无法帮你解决网络问题的。\n\n> 如果 https://gitclone.com 挂了，就自己想办法找其他线路吧。\n\n如何确认最终子模块是否拉取完整，可以输入 `git submodule status`，不完整请不要进行编译，必出错误。\n\n```shell\njuwan@juwan-N85-N870HL:~/Desktop/maixpy$ git submodule status \n 7fdb511fe61026eec5874885de5981c4f60f664d components/kendryte_sdk/kendryte-standalone-sdk (v0.5.2-181-g7fdb511)\n ced340d739e84737dd5c8e6b4ab9af2ea44e29e7 components/micropython/core (v1.11-64-gced340d73)\n ddf09164ee1711a61169030a7ee8bf370ee5743f components/micropython/port/src/lvgl/lv_bindings (remotes/origin/dev-6.0-32-gddf0916)\n c315a571df49a19b843f7dffc300c21ccb7d4edd components/micropython/port/src/ulab/micropython-ulab (0.24-27-gc315a57)\n ec68ba8208d7550860e4e78299d58a529b88bf85 components/spiffs/core (0.2-234-gec68ba8)\n 1ef6f4c0b2cb8b1872b6ffe9337f4e02d5487fa6 tools/flash/kflash_py (v1.0-79-g1ef6f4c)\n 53c72959ac4d71f99913e4b0eea99261a6585430 tools/kconfig/Kconfiglib (v12.12.1-14-g53c7295)\n 983970e40ff381d95d68a9bddff70c4d9921021b tools/spiffs/mkspiffs (0.2.3-6-g983970e)\n```\n\n### 编译 maixpy 开源项目\n\n> 这节内容假设你没有任何搭建交叉编译链的经验。\n\n首先按 [build.md](https://github.com/sipeed/MaixPy/blob/master/build.md) 顺序执行各种操作即可，如果你不会英文你可以开翻译机。\n\n步骤说明如下：\n\n- 给 linux 环境安装必须的编译工具和 Python 模块，确保 cmake / make / python3 可用。\n- 设置 toolchain 工具链到系统 `/opt/kendryte-toolchain/` 目录下，方便 SDK 寻找编译工具，确保存在 /opt/kendryte-toolchain/bin/riscv64-unknown-elf-gcc 编译工具。\n- 进入到 MaixPy 的具体硬件项目下 `cd projects/maixpy_k210` 然后输入 `python3 project.py build` 开始编译。\n\n整个编译步骤就这样结束了， 编译成功后你就会在 `projects/maixpy_k210` 目录下得到一个 build 文件夹，里面有如下文件：\n\n- maixpy.bin 将要被烧录到 0x000000 地址的 K210 固件。\n- maixpy.txt 当前固件对应的反编译代码内容，辅助你排查 core dump 的指针地址的信息。\n\n其他文件是编译过程中产生的 .a 和 .o 中间编译文件，可忽略。\n\n### 烧录 maixpy 固件到你的硬件\n\n现在你拿到了 maixpy.bin 固件，插入硬件，然后使用 `python3 project.py -B goE -p /dev/ttyUSB1 -b 1500000 flash` 烧录硬件，以 `-B` 参数为例。\n\n```shell\njuwan@juwan-N85-N870HL:~/Desktop/maixpy/projects/maixpy_k210$ python3 project.py -h\n-- SDK_PATH:/home/juwan/Desktop/maixpy\nmaixpy\nusage: project.py [-h] [-p PORT] [-b BAUDRATE] [-t] [-n] [-s] [-B {dan,bit,bit_mic,goE,goD,maixduino,kd233,auto}] [-S] [--toolchain PATH] [--toolchain-prefix PREFIX]\n                  [--config_file PATH] [--verbose]\n                  {config,build,rebuild,menuconfig,clean,distclean,clean_conf,flash}\n\nbuild tool, e.g. `python project.py build`\n```\n\n其中 `-B goE` 是选择版型，可选的项有 `dan,bit,bit_mic,goE,goD,maixduino,kd233,auto` 表示烧录方式，这个和具体硬件有很大关系。\n\n- bit 通常对应使用 CH340 的芯片。\n\n- maixduino 通常对应使用 CH552 的芯片。\n\n具体你可以多种试试，还可以选择烧录频率 115200 、1500000 的 BAUDRATE 选择，当然，无论是哪种配置，只要能烧录进去就行，更多的使用方法你需要查看 -h 的帮助说明。\n\n常见的烧录过程如下：\n\n```shell\n➜  maixpy_k210_minimum git:(master) ✗ sudo kflash -b 1500000 -p /dev/ttyUSB0 build/maixpy.bin\n[sudo] fqr 的密码： \n[INFO] COM Port Selected Manually:  /dev/ttyUSB0 \n[INFO] Default baudrate is 115200 , later it may be changed to the value you set. \n[INFO] Trying to Enter the ISP Mode... \n._\n[INFO] Automatically detected goE/kd233 \n\n[INFO] Greeting Message Detected, Start Downloading ISP \nDownloading ISP: |============================================================================================================| 100.0% 10kiB/s\n[INFO] Booting From 0x80000000 \n[INFO] Wait For 0.1 second for ISP to Boot \n[INFO] Boot to Flashmode Successfully \n[INFO] Selected Baudrate:  1500000 \n[INFO] Baudrate changed, greeting with ISP again ...  \n[INFO] Boot to Flashmode Successfully \n[INFO] Selected Flash:  On-Board \n[INFO] Initialization flash Successfully \nProgramming BIN: |============================================================================================================| 100.0% 47kiB/s\n[INFO] Rebooting... \n```\n\n### 命令行连接硬件 & 运行代码\n\n到这一步基本都会使用了吧。\n\n这里推荐一下开发时的一些 linux 或 micropython 的快速操作，首先可以使用 minicom 或 picocom 串口工具进入 MicroPython 终端（在烧录命令后加上 ` && picocom /dev/ttyUSB0 -b 115200` 就可以了），接着进入到 micropython 可以按下 Ctrl + E 进入粘贴模式，然后粘贴代码后输入 Ctrl + D 结束输入运行代码。\n\n```python\n>>> \nhello world!\n>>> \n```\n\n这样你就完成了快速的验证和开发，但如果你是要调试某一段功能代码，你可以通过 [mpfshell-lite](https://github.com/junhuanchen/mpfshell-lite) 直接命令行上传代码，复位就运行，然后报错和调试。\n\n> 底层开发动态语言经常这样操作，所以要感谢所有做解释器接口的开发者做了大量的接口验证。\n\n## MaixPy 项目应用说明\n\n假设已经知道如何使用 MaixPy 工程进行开发、编译、烧录，接下来将深入介绍一些工具的用法，这里面只交待一些常见用法，并不会展开细节说明。\n\n### 介绍 cmake 的工程编译方法\n\ncmake 是通过 CMakeLists.txt 编写代码和规则后编译生成 Makefile 的工具，用法和细节自行百度，这里有一个结构简单的 cmake 工程[Get_static_library_by_cmake](https://github.com/junhuanchen/Get_static_library_by_cmake.git)供你运行和参考学习。\n\n\n在没有 cmake 之前，都是使用 makefile 的方式进行工程管理，直到今天 micropython 官方也依然是使用双层 Makefile + inclue(makefile) 的工程管理多版型硬件的方法。\n\n但 MaixPy 只把 micropython 当做一个依赖库包加入到自己的环境当中，所以实际上 MaixPy 的软件架构设计是围绕着 K210 软件组件的形式进行构建的。\n\n因此可以来到 maixpy 文件夹里存在一个 hello_world 的工程，让看看它是怎么构成的。\n\n- hello_world\n  - build\n  - compile\n  - main\n  - CMakeLists.txt\n  - config_defaults.mk\n  - project.py\n\nMaixPy 项目已经准备了一个模板提供给你进行 K210 的项目构建，这里忽略项目构建的过程，重点关注需要可以编译链接的工程配置部分，也就是 main 下的 CMakeLists.txt ，它的内容如下。\n\n```cmake\n\n############### Add include ###################\n# list(APPEND ADD_INCLUDE \"include\"\n#     )\n# list(APPEND ADD_PRIVATE_INCLUDE \"\")\n###############################################\n\n############ Add source files #################\nlist(APPEND ADD_SRCS  \"src/main.cpp\"\n    )\n# aux_source_directory(src ADD_SRCS)\n# list(REMOVE_ITEM COMPONENT_SRCS \"src/test2.c\")\n###############################################\n\n###### Add required/dependent components ######\nlist(APPEND ADD_REQUIREMENTS kendryte_sdk)\n###############################################\n\n############ Add static libs ##################\n# list(APPEND ADD_STATIC_LIB \"lib/libtest.a\")\n###############################################\n\nregister_component()\n\n```\n\n可以看到 `ADD_SRCS` 链接了一个 `src/main.cpp` 代码文件作为程序入口。\n\n通过 `ADD_REQUIREMENTS` 就可以加载其他地方的模块进来，例如 `list(APPEND ADD_REQUIREMENTS kendryte_sdk)` 则请求了 `kendryte_sdk` 这个 SDK 包。\n\n如果想要链接自己的 nncase 库呢？其他库代码呢？\n\n可以直接则改为绝对路径下的 `LINK_DIRECTORIES(/home/juwan/maixpy/projects/maixpy_old/main/src/nncase)` 的代码就可以了，这样做的前提是这个库是由 cmake 工程的方式提供的。\n\n> 这里示范了如何在编译调用自己的 nncase 库，结合这些关键讯息再去阅读工程，应该就可以较为轻松的用起来了吧。\n\n### 如何打包 micropython spiffs 文件系统分享出来\n\n如果你深入使用了 MaixPy 进行开发，你会发现 MaixUI 提供了一种文件系统文件（img），当你刷入这个 UI 系统一样的 img ，你就会在烧录后直接进入 UI 界面。\n\n需要知道 MicroPython 是从 0x0 开始的程序，在程序中会通过 spiffs 在 Flash 的 [0xD00000, (0xD00000 + 0x300000)) 区间构建 VFS （虚拟文件系统），是由 maixpy/projects/maixpy_xxxxx/config_defaults.mk 中定义得到的。\n\n```makefile\nCONFIG_SPIFFS_SIZE=0x300000\nCONFIG_SPIFFS_START_ADDR=0xD00000\n```\n\n> 这里只讨论工具的使用，而不对其实现做详解。\n\n而 [spiffs](https://github.com/pellepl/spiffs) 是不支持目录结构的，那么我们会发现 ui 的 img 在 flash 里的文件名称会存在 `lib/core.py` 这样的名称，而正常情况下我们是不可能将这个文件创建起来的，所以要通过工具将其打包。\n\n在 tools/spiffs/mkspiffs 目录下有 gen_spiffs_image.py 脚本完成这个打包镜像的功能，用法请看 tools/spiffs/README.md 说明。\n\n- 在 spiffs 目录下准备一个 fs 文件夹，包含你要打包的代码或资源文件内容。\n- 执行 `python gen_spiffs_image.py ../../projects/maixpy_k210/config_defaults.mk` 即可得到 maixpy_spiffs.img 二进制文件。\n- 将上述得到的 img 烧入到 0xD00000 就恢复 micropython 的文件系统里的内容。\n\n如果你做了一些小系统，用这样的方式发布，用户拿到你提供的 img 文件，烧入就可以立刻得到和你一样的环境啦，这其实和基于 Linux 系统发布某系统镜像的结构是一样的。\n\n现在，你学会了吗？\n\n### MaixPy 的持续集成服务（Travis CI）\n\nTravis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。\n\n提及一下 MaixPy 是有借助 travis + tools/release.sh 完成项目的编译后，将编译目录上传到了发布服务器上从而完成了每日构建，这常见于各类包的自动化构建与编译，感兴趣不妨自己亲手试试。\n\n> [持续集成服务 Travis CI 教程](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html)\n\n### 如何更好的阅读开源项目源代码\n\n说到这里，以个人的角度来看，基于阅读代码这种基本功要求之外，想要更好的阅读源代码，对于不同的项目有不同的组织架构，任何一位刚进入这个行业的初学者，可以用亲身经历的项目作为切入点，逐渐从项目架构、源码、编译、测试、发布软件等方面建立起完整的软件工程意识，围绕此进行知识的深入学习也是一种不错的手段，希望你能通过这篇文章建立起完整的软件工程体系吧。\n\n## 最后的参考资料\n\n- bing.com + keyword + yourself"}, "/soft/maixpy/zh/course/advance/project_framework.html": {"title": "代码框架结构", "content": "---\ntitle: 代码框架结构\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 代码框架结构\n---\n\n\n\n\n## 目录简介\n\n| 目录 | 子目录 | 子目录2 | 子目录3 | 内容梗概 | \n| -- | -- | -- | -- | -- |\n|  assets  |  |  | | 资源文件 |\n|  projects  |  | | | 工程文件， 每个文件夹一个工程 | \n|  tools | | | | 工具 |\n| components|┐ | | | 组件 |\n|               | └-boards | | | 板级代码 |\n|               | └-drivers | | | 驱动 |\n|               | └-micropython |┐ | | micropython 相关代码 |\n|               |                |└-core | | micropython 源码 |\n|               |                |└-port|┐ | maixpy 自定义部分源码 |\n|               |                |          |└-builtin_py | maixpy 默认内置类 |\n|               |                |          |└-include | 移植部分头文件 |\n|               |                |          |└-src | 功能模块源码 |\n|               | └-spiffs | | | SPIFFS 文件系统 |\n|               | └-utils | | | 工具类（函数） |\n\n\n> 现在的代码因为历史遗留原因在 `components/micropython/port/src` 目录下代码结构不是很好，以后的代码尽量按照现在的框架做到层次分明\n\n\n## 添加代码\n\n工程使用 `CMake` 进行组织， 并且工程支持多个可配置选项（`Kconfig`）\n\n* 如果不添加文件夹和配置项，可以在现有的文件夹内添加文件编译即可\n* 如果需要添加模块，可以修改 `CMakeLists.txt` 来添加内容， 可以参考内容更少的[c_cpp_project_framework](https://github.com/Neutree/c_cpp_project_framework)\n* 如果需要添加配置项， 可以通过修改 `Kconfig` 文件来达到目的，所有配置项在编译时会生成宏定义添加到`global_config.h`(生成的文件)中去， 而且在 `CmakeLists.txt` 文件中都可以使用该宏定义。\n> 比如在 Kconfig 中定义 `config BOARD_M5STICK`, 在 CMakeLists.txt 中可以通过判断CONFIG_BOARD_M5STICK 是否为真来决定是否编译特定的代码。 编译时就可以通过`python3 project.py menuconfig`来选择是否勾选了"}, "/soft/maixpy/zh/course/advance/pack_fs.html": {"title": "打包文件系统", "content": "---\ntitle: 打包文件系统\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 打包文件系统\n---\n\n\n将 PC 上的若干个文件打包成一个 SPIFFS 文件系统镜像，使用 kflash 烧录到 flash 特定的地址， 这些文件就能直接在开发板上(MaixPy)读取到了\n\n详情请看使用说明： [pack SPIFFS for MaixPy](https://github.com/sipeed/MaixPy/tree/master/tools/spiffs)\n\n操作示例 GIF：\n![pack fs](https://cdn.sipeed.com/pack_spiffs_ops.gif)\n\nGIF 备用链接： [pack_spiffs_ops.gif](../../../assets/course/advance/pack_spiffs_ops.gif)"}, "/soft/maixpy/zh/course/maixpy/demo_find_green_blob.html": {"title": "MaixPy 查找色块", "content": "---\ntitle: MaixPy 查找色块\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy 查找色块\n---\n\n## MaixPy 查找色块\n\n```python\nimport sensor\nimport image\nimport lcd\nimport time\n\nlcd.init(freq=15000000)\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\ngreen_threshold   = (0,   80,  -70,   -10,   -0,   30)\nwhile True:\n    img=sensor.snapshot()\n    blobs = img.find_blobs([green_threshold])\n    if blobs:\n        for b in blobs:\n            tmp=img.draw_rectangle(b[0:4])\n            tmp=img.draw_cross(b[5], b[6])\n            c=img.get_pixel(b[5], b[6])\n    lcd.display(img)\n```"}, "/soft/maixpy/zh/course/speech/recognizer_mfcc.html": {"title": "isolated word", "content": "---\ntitle: isolated word\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: isolated word\n---\n\n\n> **本文档在 MaixPy 0.5.1_128 minimum_speech_with_ide_support 固件测试通过，使用前请确保硬件录音功能可用。**\n\n这是一个孤立词识别的算法模块,用户通过录音生成词汇模板加载到模块中，再通过它识别到用户加载的词汇模板，并返回匹配的可能性，实现请参考[基于STM32的孤立词语音识别](https://gk969.com/stm32-speech-recognition/)。\n\n- 孤立词识别\n\n    按照语音发音方式来分，有孤立词识别、连接词识别、连续语音识别 3 种；所谓孤立词识别（Isolated Word Recognition）是指在发待识别音时，每次只含词汇表中的一个词条。\n\n- 词汇模板\n\n    我们将一段用人声说出的词汇录音下来，通过算法制作成可识别的模板，称为词汇模板。\n\n- 模板匹配\n\n    假设算法模块加载了词汇模板，我们通过录音输入数据给算法模块后，它会进行内部匹配得到最有可能的识别结果。\n\n> 本模块具体识别流程是：预滤波、ADC、分帧、端点检测、预加重、加窗、特征提取、特征匹配。端点检测(VAD)采用短时幅度和短时过零率相结合。检测出有效语音后，根据人耳听觉感知特性，计算每帧语音的Mel频率倒谱系数(MFCC)。然后采用动态时间弯折(DTW)算法与特征模板相匹配，最终输出识别结果。\n\n## 如何使用？\n\n目前硬件支持程度：Maix BIT / DOCK / DUINO / GO 。\n\n> 截至 20201123 由于 Cube & Amigo 经过 ES8374 后，麦克风底噪过大会被判断为噪音环境，还需要修复。\n\n### 开箱即用示例代码\n\n- 使用 maixduino / maixbit 的测试用例 [isolated_word.py](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/speech_recognizer/isolated_word.py)，使用方法请阅读代码，请注意硬件的 麦克风 配置 和 声道 配置。\n- Maix DOCK 可直接使用的示例代码[demo_isolated_word_on_maixdock.py](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/speech_recognizer/demo_isolated_word_on_maixdock.py)，按屏幕提示说话即可，具体看[测试录像](https://www.bilibili.com/video/BV1oz4y1C7yE?from=search&seid=17464946072274851468)。\n\n### 模块调用流程\n\n为了能够更好地使用本模块，请了解使用流程。\n\n#### 准备 I2S 录音模块\n\n配置一个 I2S.DEVICE_0 设备，并设置 CHANNEL_0 通道到录音输入。\n\n```python\nfrom Maix import GPIO, I2S\nfrom fpioa_manager import fm\n\nfm.register(20,fm.fpioa.I2S0_IN_D0, force=True)\nfm.register(18,fm.fpioa.I2S0_SCLK, force=True) # dock 32\nfm.register(19,fm.fpioa.I2S0_WS, force=True)   # dock 30\n\nrx = I2S(I2S.DEVICE_0)\nrx.channel_config(rx.CHANNEL_0, rx.RECEIVER, align_mode=I2S.STANDARD_MODE)\nrx.set_sample_rate(16000)\nprint(rx)\n```\n\n运行结果：\n\n```shell\n[MAIXPY]i2s0:(sampling rate=16003, sampling points=1024)\n[MAIXPY]channle0:(resolution=2, cycles=2, align_mode=1, mode=1)\n[MAIXPY]channle1:(resolution=0, cycles=0, align_mode=0, mode=0)\n[MAIXPY]channle2:(resolution=0, cycles=0, align_mode=0, mode=0)\n[MAIXPY]channle3:(resolution=0, cycles=0, align_mode=0, mode=0)\n```\n\n#### 创建 孤立词 模块\n\nisolated_word 初始化的参数如下：\n\n- [dmac] 录音所使用的 DMA 通道，默认使用【通道 2】。\n- [i2s] 录音设备，默认使用 I2S.DEVICE_0 。\n- [size] 词汇模板容量，表示可以加载的模板总数，默认为 10 个。\n- [shift] 声道选择，Maix 系列的硬件录音设备通常为单声道输入，设置 0 为左声道，所以 1 为右声道。\n\n```python\nfrom speech_recognizer import isolated_word\n\n# default: maix dock / maix duino set shift=0\nsr = isolated_word(dmac=2, i2s=I2S.DEVICE_0, size=10, shift=0) # maix bit set shift=1\nprint(sr.size())\nprint(sr)\n\n## threshold\nsr.set_threshold(0, 0, 10000)\n```\n\n运行结果如下：\n\n```shell\n10\n[MAIXPY] isolated_word:(80212a60)\n mfcc_dats=8023a060\n\n size=10\n\n i2s_device_number_t=0\n\n dmac_channel_number_t=2\n```\n\n#### 录入词汇模板\n\n调用如下代码：\n\n- 如果周围环境很嘈杂，它就会反复输出 2 (isolated_word.Ready) 到 3 (isolated_word.MaybeNoise) ，需要处于安静环境下才能录入词汇模板\n- 如果状态为 isolated_word.Speak 则表示你可以说话了\n- 如果运行 sr.record(0) 它状态变成了 isolated_word.Done 则表示录入完成，并保存到编号 0 的模板。\n- 你可以通过 sr.state() 可以查看当前模块的状态\n\n```python\n## record and get & set\nwhile True:\n  time.sleep_ms(100)\n  print(sr.state())\n  if sr.Done == sr.record(0):\n    data = sr.get(0)\n    print(data)\n    break\n  if sr.Speak == sr.state():\n    print('speak A')\n#sr.set(1, data)\n```\n\n同理，如果你要录入第二个【词汇模板】，只需要改变录入的位置，如改成 sr.record(1)（计算机存储数组从 0 开始计数）。\n\n#### 识别词汇模板\n\n假设你已经录入了【词汇模板】则调用如下代码，它会持续识别当前的声音开始匹配录入的【词汇模板】，也就是所谓的孤立词语音识别。\n\n```python\nprint('recognizer')\nwhile True:\n  time.sleep_ms(200)\n  #print(sr.state())\n  #print(sr.dtw(data))\n  if sr.Done == sr.recognize():\n    res = sr.result()\n    print(res)\n```\n\n最终呈现的效果就是打印出最优匹配的【词汇模板】编号以及相关数据，具体请查看 result 函数用法，可以根据实际情况来判断本次识别是否合理，如匹配的帧长/匹配度是否符合预期，过大或过小都是不合理的。"}, "/soft/maixpy/zh/course/speech/fft_waterfall.html": {"title": "FFT 瀑布图(雨图)", "content": "---\ntitle: FFT 瀑布图(雨图)\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: FFT 瀑布图(雨图)\n---\n\n\nFFT 瀑布图即为数据随时间变化的频率分布图，下面将介绍如何使用 MaixPy 绘制瀑布图。\n\n## 绘制方法\n\n* 准备时域信号（例如音频数据）\n\n```python\nrx = I2S(I2S.DEVICE_0)\nrx.channel_config(rx.CHANNEL_0, rx.RECEIVER, align_mode = I2S.STANDARD_MODE)\nrx.set_sample_rate(sample_rate)\naudio = rx.record(sample_points)\n```\n\n* 进行FFT运算（将数据进行 FFT 运算并获取其频率分布情况）\n\n```python\nfft_points = 512\nfft_res = FFT.run(audio.to_bytes(),fft_points)\nfft_amp = FFT.amplitude(fft_res)\n```\n\n* 绘制在 image （由于 FFT 结果的对称性，只需要绘制其中一部分即可）\n\n```python\nhist_x_num = 128\nimg = image.Image(size=(128,128))\nfor i in range(hist_x_num):\n        img[i] = fft_amp[i]\n```\n\n*详细API参考[I2S-API](../../api_reference/Maix/i2s.html), [FFT-API](../../api_reference/Maix/fft.html)*\n\n## 例程\n\n> 以下例程在固件v0.5.1 MaixDock 测试通过\n\n实时采集音频数据并绘制为 FFT 瀑布图\n\n[demo_fft_waterfall.py](https://github.com/sipeed/MaixPy_scripts/blob/master/hardware/demo_fft_waterfall.py)\n\n效果：\n\n![](../../../assets/course/fft_waterfall.gif)"}, "/soft/maixpy/zh/course/speech/fft.html": {"title": "FFT 信号处理", "content": "---\ntitle: FFT 信号处理\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: FFT 信号处理\n---\n\n\nFFT 即快速傅里叶变换（Fast Fourier Transform），将时域信号转化为频域信号，应用范围非常广，例如消除音频图像噪声。\n\n## 使用方法\n\nk210 带有硬件 FFT 模块，支持 64 点、 128 点、 256 点以及 512 点的 FFT。\n\n* 导入 FFT 模块\n\n```python\nimport FFT\n```\n\n* 输入时域数据（例如音频数据）并进行 FFT 运算\n\n```python\nres = FFT.run(data, points, shift)\n```\n\n相关 API 解释请参考[FFT-API](../../api_reference/Maix/fft.html)\n\n## 例程\n\n采集声音并进行 FFT 运算，将运算后的数据在屏幕上显示为柱状图: [demo_fft_spectrum](https://github.com/sipeed/MaixPy_scripts/blob/master/hardware/demo_fft_spectrum.py)\n\n效果：\n<iframe width=\"600\" height=\"350\"  src=\"//player.bilibili.com/player.html?aid=44617696&cid=78104545&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>"}, "/soft/maixpy/zh/course/speech/recognizer_cnn.html": {"title": "maix asr（自动语音识别）", "content": "---\ntitle: maix asr（自动语音识别）\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: maix asr（自动语音识别）\n---\n\n\n> **本文档在 MaixPy 0.5.1_128 minimum_speech_with_ide_support 固件测试通过，使用前请确保录音功能/调用模型可用。**\n\n这是一个基于声学模型的语音识别模块，用户设置拼音组成的词汇加载到模块中，就可以开始录音识别用户输入的词汇，并返回可能匹配的词汇列表。\n\n> 2021年02月01日最近收到一些反馈，确认有个别同学在 IDE 的下运行不出结果，这时请切换到菜单》终端中运行才可以看到结果。\n\n## 使用方法\n\n**警告** 不会【使用录音】和【调用模型】的同学，请先去学习前置技能再来使用本篇文档。\n\n- 烧录声学模型\n\n> TODO 之后存放到下载站统一链接。\n\n从这里获取声学模型[maix_asr_2900k_0x500000](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/speech_recognizer/maix_asr_2900k_0x500000.kmodel), 烧录到 0x500000 地址即可。\n\n> 没有烧模型就加载模块会 core dump ，不要跑来问怎么报错了。\n\n- 创建录音设备\n\n本模块支持所有 Maix 系列硬件使用，我们只需要配置一个 I2S.DEVICE_0 设备，并设置 CHANNEL_0 通道到录音输入就可以了，如果是 Cube 和 amigo 则需要先配置具体的音频解码芯片，再打开 I2C 录音设备。\n\n```python\nfrom Maix import GPIO, I2S\nfrom fpioa_manager import fm\n\nfm.register(20,fm.fpioa.I2S0_IN_D0, force=True)\nfm.register(18,fm.fpioa.I2S0_SCLK, force=True) # dock 32\nfm.register(19,fm.fpioa.I2S0_WS, force=True)   # dock 30\n\nrx = I2S(I2S.DEVICE_0)\nrx.channel_config(rx.CHANNEL_0, rx.RECEIVER, align_mode=I2S.STANDARD_MODE)\nrx.set_sample_rate(16000)\nprint(rx)\n```\n\n- 创建 maix_asr 的辅助类，可以跳过不看。\n\n```python\n\nfrom speech_recognizer import asr\n\nclass maix_asr(asr):\n\n  asr_vocab = [\"lv\", \"shi\", \"yang\", \"chun\", \"yan\", \"jing\", \"da\", \"kuai\", \"wen\", \"zhang\", \"de\", \"di\", \"se\", \"si\", \"yue\", \"lin\", \"luan\", \"geng\", \"xian\", \"huo\", \"xiu\", \"mei\", \"yi\", \"ang\", \"ran\", \"ta\", \"jin\", \"ping\", \"yao\", \"bu\", \"li\", \"liang\", \"zai\", \"yong\", \"dao\", \"shang\", \"xia\", \"fan\", \"teng\", \"dong\", \"she\", \"xing\", \"zhuang\", \"ru\", \"hai\", \"tun\", \"zhi\", \"tou\", \"you\", \"ling\", \"pao\", \"hao\", \"le\", \"zha\", \"zen\", \"me\", \"zheng\", \"cai\", \"ya\", \"shu\", \"tuo\", \"qu\", \"fu\", \"guang\", \"bang\", \"zi\", \"chong\", \"shui\", \"cuan\", \"ke\", \"shei\", \"wan\", \"hou\", \"zhao\", \"jian\", \"zuo\", \"cu\", \"hei\", \"yu\", \"ce\", \"ming\", \"dui\", \"cheng\", \"men\", \"wo\", \"bei\", \"dai\", \"zhe\", \"hu\", \"jiao\", \"pang\", \"ji\", \"lao\", \"nong\", \"kang\", \"yuan\", \"chao\", \"hui\", \"xiang\", \"bing\", \"qi\", \"chang\", \"nian\", \"jia\", \"tu\", \"bi\", \"pin\", \"xi\", \"zou\", \"chu\", \"cun\", \"wang\", \"na\", \"ge\", \"an\", \"ning\", \"tian\", \"xiao\", \"zhong\", \"shen\", \"nan\", \"er\", \"ri\", \"zhu\", \"xin\", \"wai\", \"luo\", \"gang\", \"qing\", \"xun\", \"te\", \"cong\", \"gan\", \"lai\", \"he\", \"dan\", \"wei\", \"die\", \"kai\", \"ci\", \"gu\", \"neng\", \"ba\", \"bao\", \"xue\", \"shuai\", \"dou\", \"cao\", \"mao\", \"bo\", \"zhou\", \"lie\", \"qie\", \"ju\", \"chuan\", \"guo\", \"lan\", \"ni\", \"tang\", \"ban\", \"su\", \"quan\", \"huan\", \"ying\", \"a\", \"min\", \"meng\", \"wu\", \"tai\", \"hua\", \"xie\", \"pai\", \"huang\", \"gua\", \"jiang\", \"pian\", \"ma\", \"jie\", \"wa\", \"san\", \"ka\", \"zong\", \"nv\", \"gao\", \"ye\", \"biao\", \"bie\", \"zui\", \"ren\", \"jun\", \"duo\", \"ze\", \"tan\", \"mu\", \"gui\", \"qiu\", \"bai\", \"sang\", \"jiu\", \"yin\", \"huai\", \"rang\", \"zan\", \"shuo\", \"sha\", \"ben\", \"yun\", \"la\", \"cuo\", \"hang\", \"ha\", \"tuan\", \"gong\", \"shan\", \"ai\", \"kou\", \"zhen\", \"qiong\", \"ding\", \"dang\", \"que\", \"weng\", \"qian\", \"feng\", \"jue\", \"zhuan\", \"ceng\", \"zu\", \"bian\", \"nei\", \"sheng\", \"chan\", \"zao\", \"fang\", \"qin\", \"e\", \"lian\", \"fa\", \"lu\", \"sun\", \"xu\", \"deng\", \"guan\", \"shou\", \"mo\", \"zhan\", \"po\", \"pi\", \"gun\", \"shuang\", \"qiang\", \"kao\", \"hong\", \"kan\", \"dian\", \"kong\", \"pei\", \"tong\", \"ting\", \"zang\", \"kuang\", \"reng\", \"ti\", \"pan\", \"heng\", \"chi\", \"lun\", \"kun\", \"han\", \"lei\", \"zuan\", \"man\", \"sen\", \"duan\", \"leng\", \"sui\", \"gai\", \"ga\", \"fou\", \"kuo\", \"ou\", \"suo\", \"sou\", \"nu\", \"du\", \"mian\", \"chou\", \"hen\", \"kua\", \"shao\", \"rou\", \"xuan\", \"can\", \"sai\", \"dun\", \"niao\", \"chui\", \"chen\", \"hun\", \"peng\", \"fen\", \"cang\", \"gen\", \"shua\", \"chuo\", \"shun\", \"cha\", \"gou\", \"mai\", \"liu\", \"diao\", \"tao\", \"niu\", \"mi\", \"chai\", \"long\", \"guai\", \"xiong\", \"mou\", \"rong\", \"ku\", \"song\", \"che\", \"sao\", \"piao\", \"pu\", \"tui\", \"lang\", \"chuang\", \"keng\", \"liao\", \"miao\", \"zhui\", \"nai\", \"lou\", \"bin\", \"juan\", \"zhua\", \"run\", \"zeng\", \"ao\", \"re\", \"pa\", \"qun\", \"lia\", \"cou\", \"tie\", \"zhai\", \"kuan\", \"kui\", \"cui\", \"mie\", \"fei\", \"tiao\", \"nuo\", \"gei\", \"ca\", \"zhun\", \"nie\", \"mang\", \"zhuo\", \"pen\", \"zun\", \"niang\", \"suan\", \"nao\", \"ruan\", \"qiao\", \"fo\", \"rui\", \"rao\", \"ruo\", \"zei\", \"en\", \"za\", \"diu\", \"nve\", \"sa\", \"nin\", \"shai\", \"nen\", \"ken\", \"chuai\", \"shuan\", \"beng\", \"ne\", \"lve\", \"qia\", \"jiong\", \"pie\", \"seng\", \"nuan\", \"nang\", \"miu\", \"pou\", \"cen\", \"dia\", \"o\", \"zhuai\", \"yo\", \"dei\", \"n\", \"ei\", \"nou\", \"bia\", \"eng\", \"den\", \"_\"]\n\n  def get_asr_list(string='xiao-ai-fas-tong-xue'):\n    return [__class__.asr_vocab.index(t) for t in string.split('-') if t in __class__.asr_vocab]\n\n  def get_asr_string(listobj=[117, 214, 257, 144]):\n    return '-'.join([__class__.asr_vocab[t] for t in listobj if t < len(__class__.asr_vocab)])\n\n  def unit_test():\n    print(__class__.get_asr_list('xiao-ai'))\n    print(__class__.get_asr_string(__class__.get_asr_list('xiao-ai-fas-tong-xue')))\n\n  def config(self, sets):\n    self.set([(sets[key], __class__.get_asr_list(key)) for key in sets])\n\n  def recognize(self):\n    res = self.result()\n    # print(tmp)\n    if res != None:\n      sets = {}\n      for tmp in res:\n        sets[__class__.get_asr_string(tmp[1])] = tmp[0]\n        #print(tmp[0], get_asr_string(tmp[1]))\n      return sets\n    return None\n\nfrom machine import Timer\n\ndef on_timer(timer):\n  #print(\"time up:\",timer)\n  #print(\"param:\",timer.callback_arg())\n  timer.callback_arg().state()\n\ntry:\n  # default: maix dock / maix duino set shift=0\n  t = maix_asr(0x500000, I2S.DEVICE_0, 3, shift=0) # maix bit set shift=1\n  tim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PERIODIC, period=64, callback=on_timer, arg=t)\n  tim.start()\n\n  #for i in range(50):\n    #time.sleep_ms(100)\n  #t.stop()\n  #for i in range(50):\n    #time.sleep_ms(100)\n  #t.run()\n\n  t.config({\n    'xiao-ai-ya' : 0.3,\n    'hao-de-ya' : 0.2,\n    'ni-hao-ya' : 0.3,\n  })\n\n  print(t.get())\n\n  while True:\n    #time.sleep(1)\n    tmp = t.recognize()\n    # print(tmp)\n    if tmp != None:\n      print(tmp)\nexcept Exception as e:\n  print(e)\nfinally:\n  tim.stop()\n  t.__del__()\n  del t\n```\n\n- 对麦克风说话\n\n我们可以看到代码中定义了以下词汇：\n\n```python\n  t.config({\n    'xiao-ai' : 0.3,\n    'hao-de' : 0.2,\n    'ni-hao' : 0.3,\n  })\n\n  print(t.get())\n```\n\n也就是你对着麦克风在 6 秒内，说【你-好】、【好-的】、【小-爱】就可以完成识别了，配置项为两个字段，第一个字段长度不超过六组拼音，第二个字段表示识别的最低门限（匹配的阈值），高于该值就打印，低于该值就丢弃。\n\n最开始测试的时候，说话可以大声一点，具体效果看[演示视频](https://www.bilibili.com/video/BV1C5411L7JC/), 完整示例: [test_maix_asr.py](https://github.com/sipeed/MaixPy_scripts/blob/master/multimedia/speech_recognizer/test_maix_asr.py)"}, "/soft/maixpy/zh/maixpy_history.html": {"title": "MaixPy 发展历程", "content": "---\ntitle: MaixPy 发展历程\nkeywords: maixpy, k210, AIOT, 边缘计算, 人工智能, 深度学习\ndesc: maixpy doc: MaixPy 发展历程\n---\n\n\n写下本篇发展历程， 希望让后来的开发者们了解到 MaixPy 都经历了什么，以及一些重大的改变的原因是什么，以及在何时取得了重大的进步等\n\n\n代码提交历史可以在 [historic](https://github.com/sipeed/MaixPy/commits/historic) 和 [master](https://github.com/sipeed/MaixPy/commits/master) 分支看到\n\n\n## 2018 年 9 月\n\nMaixPy 项目启动，契机是 K210 芯片流片完成。\n\n于是大家想着做一套让更多人在嵌入式使用的 AI 开发的易使用的软件套件， 因为 Micropython 的易用性，而且 k210 有 6+2MiB 内存，主频 400MHz，完全能够驾驭 Micropython， 故选择了 Micropython 作为编程语法\n\n基于开发板 Maix dock， 这时取名为 荔枝丹， QQ 群名也叫荔枝丹炼丹群\n\n[xiaohui](https://github.com/xiaoxiaohuixxh) 和 [wipping](https://github.com/wipping) 开始尝试对 Micropython 移植\n\n## 2018 年 12 月\n\nk210 SDK 从 freertos 换成了 standalone SDK, 并且着手片上外设驱动适配\n\n[neucrack](https://github.com/neutree) ，[xel](https://github.com/xelll) 和 [zepan](https://github.com/Zepan) 加入项目组\n\n\n## 2019 年 2 月\n\n发布第一版固件 [v0.1.1 beta](https://github.com/sipeed/MaixPy/releases/tag/v0.1.1), 支持了基本的外设， 继承了 openmv 的 image sensor lcd API，适配了一些开源的工具比如 upyloader，armpy等, 编写文档 并发布在 maixpy.sipeed.com\n\n另外这时也有了 Maix bit 和 Maix Go 两块新开发板\n\nxiaohui 退出项目组\n\n## 2019 年 3 月\n\n发布第二版固件 [v0.2.4](https://github.com/sipeed/MaixPy/releases/tag/v0.2.4), 增加了 jpeg， wav， kpu， nes， avi， lvgl 等支持\n\n\n## 2019 年 4 月\n\n适配了 OpenMV IDE 也就是 MaixPy IDE， 在原来软件的基础上只将 USB 通信改成了 k210 支持的 串口通信， 其它功能没有变化\n\n预编译固件开始区分功能分成多个固件， 主要考虑到运行模型内存不足的问题\n\nwipping 退出项目组， zepan 和 xel 专注到其它项目组\n\n\n## 2019 年 6 月\n\n\n重构了项目结构， 之前是直接在 micropython 的目录结构中添加代码， 在 port 目录中添加代码， 但是这会有一个问题， 就是更新 micropython 程序变得比较麻烦， 需要将 micropython 和 MaixPy 增加的代码分开， 而且旧的代码结构太混乱， Makefile 写得也不是很好，构建缓慢。\n所以有了现在的目录结构， 使用了 cmake + kconfig 对工程进行构建， 同时将各个组件模块化， 并且可以选择是否编译进固件， 编译框架在[这里](https://github.com/Neutree/c_cpp_project_framework)。 但是仍有遗留问题， 目录下面有一些遗留代码没有完全接偶。\n\n\n## 2019 年 7 月\n\n增加 M5Stick-V 开发板的支持， 由 [Martin Han](https://github.com/MarsTechHAN) 维护\n\n\n## 2019 年 12 月\n\n[Maixhub](https://www.maixhub.com) 上线， 用于在线模型训练，只需要上传数据集无须编写代码\n\n硬件更新： 上线 M1N 模块， 金手指模块\n\n## 2020 年 4 月\n\n[糖老鸭](https://github.com/QinYUN575) 加入项目组\n\n\n## 2020 年 5 月\n\n[大佬鼠](https://github.com/junhuanchen) 加入项目组\n\n## 2020 年 6 月\n\n硬件更新： 上线 Maix Cube 开发板\n\n## 2020 年 7 月\n\n为不同板子增加板级配置文件， 放在文件系统中， 开机读取， 主要是由于 Cube 和 Amigo 增加了电源芯片， 在开机时为了能正常使用必须先设置电源芯片\n\n硬件更新： 上线 Maix Amigo 开发板， 增加了外壳\n\n## 2020 年 11 月\n\n重新梳理文档， 更完美的文档和社区\n\n## 2021 年 1 月\n\n稳定 MaixPy 各项功能，补充缺失的文档，迎接 MaixPy3 项目的到来。"}, "/soft/maixpy/zh/share/open_projects.html": {"title": "MaixPy 相关开源项目精选", "content": "---\ntitle: MaixPy 相关开源项目精选\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy 相关开源项目精选\n---\n\n\n这里收集了一些比较不错的 MaixPy 相关的开源项目分享，欢迎 star\n\n如果你也有不错的 MaixPy 相关的开源项目， 欢迎提交 [issue](https://github.com/sipeed/MaixPy_DOC/issues) 请求添加，\n要求：\n* 与 MaixPy 相关\n* 项目有完整清晰的`README`，包括简介，效果，代码，使用方法等\n\n## 应用\n\n| 项目主页 | 简介 | 作者 |\n| --  |  --  | --  |\n| [LZBUAV/K210_Python](https://github.com/LZBUAV/K210_Python) | Kendryte K210 AI芯片应用程序的集合，其中包括面部检测，颜色检测，目标检测和分类，QR码和Apriltag码检测以及与ArduPilot飞行软件的通信 | [LZBUAV](https://github.com/LZBUAV) |\n| [BBS](https://cn.bbs.sipeed.com/d/490-maixpy-maixpy-explorer-aiot) | MaixPy + 腾讯云Explorer+小程序 快速打造一个 AIOT应用 | [neucrack](https://github.com/neutree) |\n\n\n## 模型训练\n\n| 项目主页 | 简介 | 作者 |\n| --  |  --  | --  |\n| [sipeed/maix_train](https://github.com/sipeed/maix_train) | 分类和检测模型训练项目 | [Sipeed](https://github.com/sipeed/maix_train/graphs/contributors) |\n| [lemariva/MaixPy_YoloV2](https://github.com/lemariva/MaixPy_YoloV2) | 使用 Mobilenet+YOLOv2 在 Sipeed Maix Dock 开发板上进行物体检测, 更多说明看[博客](https://lemariva.com/blog/2020/01/maixpy-object-detector-mobilenet-and-yolov2-sipeed-maix-dock) | [lemariva](https://github.com/lemariva) |\n| [zhen8838/K210_Yolo_framework](https://github.com/zhen8838/K210_Yolo_framework)| k210 上的 yolo v3 模型训练框架  | [zhen8838](https://github.com/zhen8838) |\n| [TonyZ1Min/yolo-for-k210](https://github.com/TonyZ1Min/yolo-for-k210) | 在 windows 训练 YOLO 物体检测模型 | [TonyZ1Min](https://github.com/TonyZ1Min)|\n\n\n\n## UI & System\n\n| 项目主页 | 简介 | 作者 |\n| --  |  --  | --  |\n| [eggfly/M5StickVComputer](https://github.com/eggfly/M5StickVComputer) | 运行在`M5StickV`上的纯 Python 应用框架 | [eggfly](https://github.com/eggfly) |"}, "/soft/maixpy/zh/share/recommend_articles.html": {"title": "MaixPy 精选文章", "content": "---\ntitle: MaixPy 精选文章\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy 精选文章\n---\n\n\n\n从社区**精选**的文章，收集一些不错的文章到这里，方便大家学习交流。\n\n另外，如果你有经验想要分享，也欢迎参与， 写好文章后，提交 [issue](https://github.com/sipeed/MaixPy_DOC/issues) 请求添加\n要求：\n* 与 MaixPy 相关\n* 文章目录层次结构清晰\n* 文章逻辑清晰，需要写明分享的简介、效果、操作过程、总结，图文并茂\n\n你也可以按照[参与经验分享/分享模板](../share/my_share/index.html)直接在文档中添加经验分享，如果写得不错，也会被收录到本页面\n\n-----------\n\n文章链接全部收录进以下帖子以方便更新：\n\n[【精选文章导航】](https://cn.bbs.sipeed.com/d/481)"}, "/soft/maixpy/zh/share/my_share/index.html": {"title": "MaixPy 经验分享 —— XXX", "content": "---\ntitle: MaixPy 经验分享 —— XXX\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy 经验分享 —— XXX\n---\n\n\n本目录下主要用于大家分享自己的经验，或者教程，也可以在作者允许转载的情况下搬运，并著名出处。\n\n\n## 要参与分享，你需要提前掌握的知识\n\n* git 和 github 的使用\n* github PR（pull request）的使用\n\n在入门教程里面有简要的介绍， 详细的使用方法请自行学习\n\n如果你没有信心掌握这些技能， 你可以到提交[issue](https://github.com/sipeed/MaixPy_DOC/issues) 来说明问题或者贡献经验等，我们帮助你进行添加\n\n\n## 如何添加\n\n\n### 克隆文档到本地\n\n```\ngit clone https://github.com/sipeed/MaixPy_DOC\ncd MaixPy_DOC\n```\n\n\n### 新建目录\n\n需要新建一个目录专门用于写分享的文章，\n在`MaixPy_DOC/zh/share/my_share/`目录下建立一个文件夹， 文件夹名只能用小写英文和下划线，可以用你的英文名字命名，比如`tom`或者`lihua`,\n以下用`MaixPy_DOC/zh/share/my_share/tom`举例\n\n当然，如果你写的是英文文档，需要放到`MaixPy_DOC/en/share/my_share/tom`文件夹下\n\n在这个文件夹内建立一个文件，命名为`readme.md`, 然后在里面使用`markdown`语法编写分享，\n建立`MaixPy_DOC/zh/share/my_share/tom/assets`目录，用来存放图片，\n文档里面引用图片使用相对路径，比如放了一张图片路径是`MaixPy_DOC/zh/share/my_share/tom/assets/cover.jpg`，则在`MaixPy_DOC/zh/share/my_share/tom/readme.md`中引用图片使用如下语法\n```\n![封面](./assets/cover.jpg)\n```\n\n注意， 不要往文件夹内放大文件， 图片也不要用太大的，否则会导致文档仓库巨大无比\n\n\n### 编写文档\n\n为了文档看起来格式正确，更易于阅读，\n编写文档**必须**遵循语法和格式要求： **看 [文档规范](../../contribute/doc_convention.html)**\n\n**文档模板**, 按照模板写文章， 可以根据自己的情况修改\n\n```\n\n\n| 作者 | 联系方式        | 个人主页    |\n| ---- | --------------- | ----------  |\n| XXX  |  XXXX@XXX.com   | [github/sipeed](http://github.com/sipeed)  |\n\n\n## 简介：\n\n描述下本次分享的背景，最终实现的效果展示等，可以使用图片或者 GIF 或者视频进行展示，但是不要放太大的图片到`assets`文件夹，不然用户因为网速问题很久都无法加载出来，就失去了意义了\n\n\n\n## 准备:\n\n### 预备知识\n\n### 需要准备的软硬件环境\n\n#### 硬件\n\n图文描述使用到的开发板， 外设模块等\n\n#### 软件\n\n图文描述使用到的软件工具，MaixPy 版本\n如果使用到第三方软件工具，可以附加相关名称或下载链接\n\n\n\n## 过程，具体标题自定义\n\n\n\n## 过程， 具体标题自定义\n\n\n\n## 结果\n\n建议添加图片展示实际运行效果\n\n\n\n## 总结\n\n对本次分享进行总结\n\n\n## 问题和反馈\n\n可以提供反馈方式\n\n\n\n## 参考\n\n在这里以列表的方式注明文章中引用的文章和源码\n\n* 引用文章1: https://www.sipeed.com\n\n```\n\n\n### 添加这篇分享到文档左边的目录栏\n\n\n打开`MaixPy_DOC/zh/SUMMARY.md`, 在末尾添加自己的分享，比如\n\n\n\n```\n## 社区 & 分享\n\n- [精选教程](./share/recommend_articles.html)\n- [开源项目](./share/open_projects.html)\n- 大家的经验分享\n  * [参与经验分享/分享模板](./share/my_share/index.html)\n  * [jerry 的模型训练教程](./share/my_share/jerry/index.html)\n\n```\n\n添加自己的卡后效果是：\n\n```\n## 社区 & 分享\n\n- [精选教程](./share/recommend_articles.html)\n- [开源项目](./share/open_projects.html)\n- 大家的经验分享\n  * [参与经验分享/分享模板](./share/my_share/index.html)\n  * [模型训练教程-jerry](./share/my_share/jerry/index.html)\n  * [如何设计一个自己的模型-tom](./share/my_share/tom/index.html)\n```\n\n注意是**\\***号前面是两个空格，不是`tab`\n\n\n### 提交\n\n编写完后提交修改，然后在 github 上提交 PR， PR 通过后官方文档页面就会有这篇文章了"}, "/soft/maixpy/zh/others/open_projects.html": {"title": "与 MaixPy 相关的开源项目", "content": "---\ntitle: 与 MaixPy 相关的开源项目\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 与 MaixPy 相关的开源项目\n---\n\n\n\n如果你有什么跟 MaixPy 相关的开源项目， 欢迎通过邮件(support@sipeed.com)或者 [issues](https://github.com/sipeed/MaixPy_DOC/issues/new) 告诉我们，或者直接修改文档提交 PR\n\n非常期待大家的好玩有趣或者实用的作品哦～～～"}, "/soft/maixpy/zh/others/maixhub_faq.html": {"title": "Maixhub 常见问题", "content": "---\ntitle: Maixhub 常见问题\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Maixhub 常见问题\n---\n\n\n## 怎么制作数据集\n\n参考 [maixhub](https://www.maixhub.com) 训练页面的帮助文档\n\n## 训练失败了怎么办\n\n训练失败后请去邮箱查看失败详情"}, "/soft/maixpy/zh/others/maixpy_faq.html": {"title": "MaixPy 常见问题", "content": "---\ntitle: MaixPy 常见问题\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy 常见问题\n---\n\n\n\n## MaixPy 与 C 开发有什么异同，我该怎么选择\n\nMaixPy 是基于 Micropython 的脚本语言， 不需要编译，在运行时解析，编写起来更简单方便，只是运行时时实性不如 C 语言。\n所以如果是快速验证、新手、只会 python、头发少等都可以用 MaixPy; 追求极限性能效率或者熟悉 C ，以及对 MaixPy 的长期运行的稳定性不太有信心的都可以使用 C 语言开发\n\n## MaixPy IDE 无法成功连接开发板\n\n**现象:**\n\n​\t开发板到手之后，一直无法连接 MaixPy IDE\n\n* 检查固件是否支持 IDE， 早期的固件以及名字带`minimum`的固件都不支持\n* 检查串口是否被占用（其它软件也打开了串口）\n* 点击连接后，不用和终端工具同时使用，否则会出现串口占用无法打开\n* 如果一直无法成功连接成功， 检查：\n  * 请检查是否开发板型号选择错误；\n\n  * 观察开发板屏幕是否有变化，如果没有反应可能是串口选择错误；\n\n  * 尝试升级到最新的 [master 分支固件](http://cn.dl.sipeed.com/MAIX/MaixPy/release/master)， 以及最新的 MaixPy IDE 软件\n\n    > MaixPy 版本号低于 0.5.0_v0 不支持连接 MaixPy IDE\n\n## 文档网页打不开，速度慢\n\n如果遇到有些页面无法访问， 请检查一下网址（路径）是否正确， 可以回到首页 (`maixpy.sipeed.com`) 重新进入即可。\n\n比如这个网址就是由于点击过快导致的：\n```\nhttp://localhost:4000/zh/zh/get_started/how_to_read.html\n```\n正确的网址应该是：\n```\nhttp://localhost:4000/zh/get_started/how_to_read.html\n```\n\n另外，可以换个网络线路试试，比如挂代理，或者换手机流量试试， 国内也可以使用`cn.maixpy.sipeed.com`\n\n## 下载站文件下载速度慢，文件无法下载\n\n如果遇到在 dl.sipeed.com 下载站下载速度慢，可以使用国内的同步服务器 cn.dl.sipeed.com 下载，路径相同，每天同步一次；\n部分文件提供了 CDN 下载链接，速度会比较快， 比如 IDE 在 readme.txt 中有说明\n\n## Micro SD 卡读取不到\n\n\nMicro SD 读取不到现象及解决方法:\n\n1. 确认 SD 能否在电脑上正常使用，如果不能即 SD 已损坏，\n\n2. 电脑能够正常使用，读取 SD，但 MaixPy 开发板无法使用：\n\n  SD 卡未格式化为 MBR 分区 FAT32 格式\n\n3. 电脑能够正常使用 SD 卡，也确认 SD 卡的磁盘格式为 FAT32，但 MaixPy 开发板依旧无法使用：\n\n  可能存在的原因：部分 SD 出厂时，sd 中没有磁盘分区表，或者磁盘分区表类型不是 MBR\n\n  解决的方法：使用第三方磁盘管理软件，将 sd 分区表类型转换为 MBR, 并且将 sd 格式格式化为 FAT32\n\n> 这里使用 **Diskgenius** 来转换磁盘分区表格式\n\n![Diskgenius](../../assets/other/diskgenius.png)\n\n\n![GPT 类型转 MBR](../../assets/other/diskgenius_sd_gpt_to_mbr.png)\n\n![MBR 类型](../../assets/other/diskgenius_sd.png)\n\n\n3. SD 卡不支持 SPI 协议\n\n目前硬件只能支持 SPI 协议读取， 尽量购买正规的卡\n\n比如：下图左边两张卡 MaixPy 的驱动不支持， 中间和右边的都支持， 但是中间的 class10 卡速度最快（最高测过 128GB可用）\n> 另外测试过网上购买的几张闪迪、金士顿、三星的卡，其中发现有一张三星的卡无法使用\n\n![](../../assets/hardware/other/tf_sdcard.png)\n\n\n## SD 卡支持多大容量\n\n最大测试过 128GiB 可以使用\n\n## 使用 SD 加载文件、模型不成功\n\n现象：我们在使用过程中可能遇到加载模型提示错误，\n\n可能存在的问题原因: sd 不兼容，挂载不成功\n\n验证 sd 卡是否挂载方法:\n\n```python\nimport os\nprint(os.listdir(\"/\"))\n>>['flash'] # 没有挂载 SD 卡\n\n>>['flash', 'sd'] # 挂载 SD 卡成功\n```\n\n## 为什么连接了 IDE 帧率降低了很多\n\nK210 没有 USB 外设， 因此只能使用串口与 IDE 通信， 速度不如 USB 设备快，因此会影响帧率， 可以关闭 IDE 的摄像头预览\n\n\n## 为什么 IDE 上预览的摄像头图像很模糊\n\nK210 没有 USB 外设， 因此只能使用串口与 IDE 通信， 速度不如 USB 设备快， 因此对图片进行了压缩，如果需要看清晰的图像请在开发板的屏幕上看，或者保存成图片传到电脑查看\n\n所以 IDE 的图像预览功能主要是给教学和演示使用， 平时建议使用屏幕，\n可以使用以下代码来设置预览图质量\n```python\nsensor.set_jb_quality(95)\n```\n这样就将预览图的质量设置为了 `95%`， 但是帧率会有明显降低\n\n\n## 怎么提高摄像头帧率\n\n* 换更好的摄像头，比如 `ov7740` 帧率会比 `ov2640` 高一点。 但前提是摄像头电路必须与开发板的电路兼容\n* 增加摄像头时钟频率(`sensor.reset(freq=)`)，但是注意不要太高，太高会让画面变差\n* 可以自己编译源码，打开摄像头双缓冲选项（默认打开），并且 `sensor.reset(dual_buff=True)`，帧率会有所增加，但是相应地，耗费的内存也会增加（大约为 384KiB ）\n\n\n## IDE 帧缓冲区成像方向不正确，LCD 显示方向不正确\n\n由于 MaixPy 支持的硬件型号较多，在使用 MaixPy IDE 或者 LCD 显示的时候会出现显示的方向不正确,那么这时候我们就需要对图像进行旋转了;\n在修正显示方向之前,我们需要确认是 Sensor 方向旋转(MaixPy IDE 右上角的图像即为 Sensor 直接输出的图像)了，还是 LCD 方向旋转了\n修正方法:\n\n- sensor 方向修正：\n\n```python\n# 设置摄像头水平镜像\n# `enable`: 1 表示开启水平镜像 0 表示关闭水平镜像\nsensor.set_hmirror(enable)\n\n# 设置摄像头垂直镜像\n# `enable`: 1 表示开启垂直镜像 0 表示关闭垂直镜像\nsensor.set_vflip(enable)\n```\n\n- lcd 方向修正：\n\n```python\n# 设置 `LCD` 屏幕方向\n# 参数: `dir`: 取值范围 [0,3]， 从`0`到`3`依次顺时针旋转\n# 返回值: 当前方向，取值[0,3]\nlcd.rotation(dir)\n\n# 设置 `LCD` 是否镜面显示\n# 参数: `invert`： 是否镜面显示， `True` 或者 `False`\n# 返回值: 当前设置，是否镜面显示，返回`True`或者`False`\nlcd.mirror(invert)\n```\n\n## 烧录 MaixPy 之后，MaixPy 出现无法启动\n\n现象：我们在使用过程中可能遇到烧录 MaixPy 之后，MaixPy 出现无法启动(表象为 无法点亮屏幕，白屏 等)，\n问题原因: 出现这种现象很大一部分是内部文件系统中的配置文件读取出错，或者我们设置的系统配置值(如 gc heap 值过大)出错导致系统无法启动。\n\n解决方法：擦除文件系统(擦除全部 flash)\n\n使用 kflash_gui 右上角选择`擦除`功能，然后加载`MaixPy 文件系统`模板，地址变成`0xD00000`, 长度变为`3MiB`\n\n或者下载擦除固件: erase.fpkg/flash_erase_16MB.bin/[erase_spiffs.kfpkg](https://cn.dl.sipeed.com/MAIX/MaixPy/release)\n\n\n## 使用 JTAG 调试器一直无法接连 K210\n\n现象：使用裸机开发 K210, JTAG 调试器一直无法接连 K210\n\n可能的原因：\n  1. OpenOCD 调试环境搭建有问题（细节这里不说明）\n  2. 烧录过 ken_gen.bin 之后，将永久禁用 K210 的 JTAG 调试功能\n\n## 下载，保存脚本到 MaixPy 内部flash 之后，板子无法更新固件，无法启动运行脚本\n\n- 可能现象：下载，保存脚本到 MaixPy 内部flash 之后，板子无法更新固件，板子无法启动\n\n\n> 问题可以从硬件和软件上面去定位:\n\n可能的硬件原因：\n\n​\tTODO: 待更新\n\n可能的软件原因：\n\n  1. 程序中拉高了 GPIO16, 造成了自动下载点电路无法拉低 GPIO16,使 K210 进入 ISP 模式\n\n## kflash 无法烧录/更新 MaixPy 固件\n\nkflash_gui 配置选项\n\n- 开发板型号\n  - 开发板型号选错\n- 烧录空间(SRAM/Flash)\n  - 烧录空间选错\n- 波特率&下载速度模式\n  - 下载波特率过高\n\n## 出现type object 'board_info' has no attribute 'XX'\n请看[开发板配置文件](./../get_started/board_info.html),对开发板进行重新配置\n\n## TF卡格式没有问题，但是无法读取TF卡，挂载失败\n请使用\n```python\nfrom machine import SDCard\nSDCard.remount()\n```\n进行重新挂载\n使用\n```python\ndef sd_check():\n    import os\n    try:\n        os.listdir(\"/sd/.\")\n    except Exception as e:\n        return False\n    return True\nprint(sd_check())\n```\n进行检测是否挂载成功\n\n## 出现ValueError:[MAIXPY]kpu: load error:2002, ERR_KMODEL_VERSION: onlysupport kmodel V3/V4 now\n1、更新固件，更新固件，更新到最新版本支持v3/v4的MaixPy固件，具体更新方法看前面的文档\n2、检查存放模型的位置是否与读取的位置是否一致，如果将模型放到sd上，然后读取的位置为flash的0x300000时就会出现这样的错误\n3、有可能不是模型本身的问题\n\n## 在MaixPyIDE上运行boot.py文件时，卡死，没有显示，没有报错\n如果你的模型是烧录到flash上，你需要在串口终端上运行boot.py里面的代码，输出一段红色的报错信息为`Out of memory`，这时你需要将模型放到sd上，然后再进行读取（一定要可以挂载的sd卡，否则都是白干）"}, "/soft/maixpy/zh/thanks.html": {"title": "致谢", "content": "---\ntitle: 致谢\nkeywords: maixpy, k210, AIOT, 边缘计算, 人工智能, 深度学习\ndesc: maixpy doc: 致谢\n---\n\n\n* [MaixPy 源码贡献者](https://github.com/sipeed/MaixPy/graphs/contributors)\n* [MaixPy_scripts 示例代码贡献者](https://github.com/sipeed/MaixPy_scripts/graphs/contributors)\n* [Maixduino 源码贡献者](https://github.com/sipeed/Maixduino/graphs/contributors)\n* [MaixPy_DOC 文档贡献者](https://github.com/sipeed/MaixPy_DOC/graphs/contributors)"}, "/soft/maixpy/zh/develop_kit_board/module_microphone.html": {"title": "Sipeed Microphone", "content": "---\ntitle: Sipeed Microphone\nkeywords: maixpy, k210, AIOT, 边缘计算, Sipeed Microphone\ndesc: maixpy doc: Sipeed Microphone\n---\n\n\n<table border=\"2\">\n    <tr>\n        <th colspan=3>Sipeed 麦克风模块</th>\n    </tr>\n    <tr>\n        <td>描述</td>\n        <td>实物图</td>\n        <td>说明</td>\n    </tr>\n        <td>\n            单麦克风模块\n        </td>\n        <td>\n            <img src=\"../../assets/hardware/module/microphone_taobao_400x400.jpg\" height=\"200\">\n            </p>\n            <a href=\"https://sipeed.taobao.com/\">点击购买 麦克风模块</a>\n        </td>\n        <td>\n        1.麦克风 IC: MSM261S4030H0</p>\n        2.接口：6P 2.54mm 排线接口</p>\n        3.供电电压：3.3V@5mA</p>\n        4.模块尺寸：15.2mm*9.1mm</p>\n        4.工作温度: -30℃~80℃</p>\n    <tr>\n    <tr>\n        <td>\n            单麦克风模块\n        </td>\n        <td>\n            <img src=\"../../assets/hardware/module/mic_array_taobao.jpg\" height=\"200\">\n            </p>\n            <a href=\"https://sipeed.taobao.com/\">点击购买 麦克风模块</a>\n        </td>\n        <td>\n        1.麦克风 IC: 6 个 MSM261S4030H0</p>\n        2.接口：10Pfpc / 10 pin 2.54mm 排线接口</p>\n        3.供电电压：5V@mA</p>\n        4.模块尺寸：15.2mm*9.1mm</p>\n        4.工作温度: -30℃~80℃</p>\n    </tr>\n</table>\n\n\n## Sipeed Mic-Array\n\nMic-Array 麦克风阵列，截止 MaixPy 版本 `MicroPython v0.5.0-218-g8053a70`, 麦克风阵列硬件上的 pin io 支持自定义配置\n\n\n| No. | MaixGo(默认配置 IO) | 说明 |\n| --- | --- | --- |\n| MIC_D0 | 23 | --- |\n| MIC_D1 | 22 | --- |\n| MIC_D2 | 21 | --- |\n| MIC_D3 | 20 | --- |\n| MIC_WS | 19 | --- |\n| MIC_SCLK | 18 | --- |\n| --- | --- | --- |\n| LED_DAT | 24 | SK9822 DAT |\n| LED_CLK | 25 | SK9822 CLK |\n\n### 例程\n\n声源定位\n\n```python\nfrom Maix import MIC_ARRAY as mic\nimport lcd\n\nlcd.init()\nmic.init()#默认配置\n# mic.init(i2s_d0=23, i2s_d1=22, i2s_d2=21, i2s_d3=20, i2s_ws=19, i2s_sclk=18, sk9822_dat=24, sk9822_clk=25)#可自定义配置 IO\n\nwhile True:\n    imga = mic.get_map()    # 获取声音源分布图像\n    b = mic.get_dir(imga)   # 计算、获取声源方向\n    a = mic.set_led(b,(0,0,255))# 配置 RGB LED 颜色值\n    imgb = imga.resize(160,160)\n    imgc = imgb.to_rainbow(1) # 将图像转换为彩虹图像\n    a = lcd.display(imgc)\nmic.deinit()\n```\n\n效果：\n\n<iframe width=\"600\" height=\"350\"  src=\"//player.bilibili.com/player.html?aid=37058760&cid=65120313&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>"}, "/soft/maixpy/zh/develop_kit_board/maix_dock.html": {"title": "Maix Dock", "content": "---\ntitle: Maix Dock\nkeywords: maixpy, k210, AIOT, 边缘计算,  Maix Dock\ndesc: maixpy doc: Maix Dock\n---\n\n\n## 外观及功能介绍\n\n### 外观一览\n\n- MaixDock(M1W)\n\n![MaixDock(M1W)](../../assets/hardware/maix_dock/sipeed_maix_dock_m1w.jpg)\n\n- MaixDock(M1)\n\n![MaixDock(M1)](../../assets/hardware/maix_dock/sipeed_maix_dock_m1.jpg)\n\n### 板载功能\n\n| 项目             | 说明                                                                                |\n| ---------------- | ----------------------------------------------------------------------------------- |\n| CPU：            | 双核 64bit RISC-V / 400MHz* (双精度FPU集成)                                         |\n| 内存：           | 8MiB 64bit 片上 SRAM                                                                |\n| 存储：           | 16MiB Flash, 支持 micro SDXC 拓展存储 (最大128GB)                                   |\n| 屏幕（套餐）：   | 2.4 寸 TFT, 屏幕分辨率：320\\*240                                            |\n| 摄像头（套餐）： | 30W 像素 GC0328 摄像头                                                              |\n| WIFI：           | MaixDock(M1W) 采用 M1W（内部集成 ESP8285 WIFI SOC）； MaixDock(M1) 内部无 WIFI 功能 |\n| TF 卡槽：        | 多媒体资源扩展，支持大容量储存                                                      |\n\n### 引脚资源\n\n![](../../assets/hardware/maix_dock/maixdock_pin_maps.svg)\n\n## 资料下载\n\nSipeed-Maix-Dock 资料下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Dock)\n\nSipeed-Maix-Dock 规格书下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Dock/Specifications)\n\nSipeed-Maix-Dock 原理图下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Dock/Maix-Dock_11.27/Maix-Dock_11.27%28Schematic%29.pdf)"}, "/soft/maixpy/zh/develop_kit_board/maix_nano.html": {"title": "Maix Nano", "content": "---\ntitle: Maix Nano\nkeywords: maixpy, k210, AIOT, 边缘计算, Maix Nano\ndesc: maixpy doc: Maix Nano\n---\n\n\n## 外观及功能介绍\n\n### 外观一览\n\n![Maix Nano](../../assets/hardware/m1n/sipeed_maix_nano.png)\n\n### 板载功能\n\n| 项目             | 说明                                              |\n| ---------------- | ------------------------------------------------- |\n| CPU：            | 双核 64bit RISC-V / 400MHz* (双精度FPU集成)       |\n| 内存：           | 8MiB 64bit 片上 SRAM                              |\n| 存储：           | 16MiB Flash, 支持 micro SDXC 拓展存储 (最大128GB) |\n| 屏幕：           | 无屏幕                                            |\n| 摄像头（套餐）： | 30W 像素 GC0328 摄像头                            |\n\n### 硬件板载扩展接口\n\nMaix Nano 预留了一个 [SP_MOD](../modules/sp_mod/index.html) 接口\n\n## 资料下载\n\n* M1n 资料下载：[dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1n)\n* M1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf)"}, "/soft/maixpy/zh/develop_kit_board/maix_go.html": {"title": "Maix Go", "content": "---\ntitle: Maix Go\nkeywords: maixpy, k210, AIOT, 边缘计算, Maix Go\ndesc: maixpy doc: Maix Go\n---\n\n\n## 外观及功能介绍\n\n### 外观一览\n\n![Maix Go](../../assets/hardware/maix_go/Go.png)\n\n### 板载功能\n\n| 项目           | 说明                                              |\n| -------------- | ------------------------------------------------- |\n| CPU：          | 双核 64bit RISC-V / 400MHz* (双精度FPU集成)       |\n| 内存：         | 8MiB 64bit 片上 SRAM                              |\n| 存储：         | 16MiB Flash, 支持 micro SDXC 拓展存储 (最大128GB) |\n| 屏幕：         | 2.4 寸 TFT, 电容触摸屏幕分辨率：320\\*240          |\n| 摄像头(套餐)： | 200W 像素(实际使用 30W)，0V2640 型号 M12 摄像头   |\n| TF 卡槽：      | 多媒体资源扩展，支持大容量储存                    |\n\n## 资料下载\n\nSipeed-Maix-Go 资料下载：[Sipeed-Maix-Go](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-GO)"}, "/soft/maixpy/zh/develop_kit_board/grove_ai_hat.html": {"title": "Grove AI HAT", "content": "---\ntitle: Grove AI HAT\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Grove AI HAT\n---\n\n## 外观及功能介绍\n\n### 外观一览\n\n![Grove AI HAT](../../assets/hardware/grove_ai_hat/grove_ai_hat1.png)\n\n### 板载功能\n\n| 项目             | 说明                                                   |\n| ---------------- | ------------------------------------------------------ |\n| CPU：            | 双核 64bit RISC-V / 400MHz (双精度FPU集成)             |\n| 内存：           | 8MiB 64bit 片上 SRAM                                   |\n| 存储：           | 16MiB Flash                                            |\n| 屏幕（套餐）：   | 2.4 寸 TFT, 电容触摸屏幕分辨率：320\\*240               |\n| 摄像头（套餐）： | 搭载 **OV7740** 或 **OV5642** **30W** 像素 **Sensor** |\n| 按键：           | 复位按键，电源按键（短按开机，长按 *8S* 关机）         |\n| USB：            | Type-C 接口，正反盲插                                  |\n| 板载传感器：     | 三轴加速度传感器（ADXL345BCCZ-RL），ADC（ADS1115IDGS） |\n\n\n### 硬件板载扩展接口\n\n该开发版对用户开放了四个 [Grove](https://cn.maixpy.sipeed.com/zh/modules/grove/) 接口,用户可以很方便的进行 DIY。\n\n### 板载 I2C 设备\n\n| 传感器  | 功能         | I2C 地址(7位地址) | SCL  | SDA  | 示例代码               |\n| ------- | ------------ | ----------------- | ---- | ---- | ---------------------- |\n| ADS1115 | ADC          | 0x48              | IO23 | IO24 | [script](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/others/ads1115) |\n| ADXL345 | 三轴加速度计 | 0x53              | IO23 | IO24 | [script](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/others/adxl345) |\n\n## 资源下载\n\n[原理图](http://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Grove_AI_HAT/Grove_AI_HAT_for_Edge_Computing_v1.0_SCH_190514.pdf)"}, "/soft/maixpy/zh/develop_kit_board/maix_amigo.html": {"title": "MaixAmigo", "content": "---\ntitle: MaixAmigo\nkeywords: maixpy, k210, AIOT, 边缘计算, MaixAmigo\ndesc: maixpy doc: MaixAmigo\n---\n\n\n## 概述\n\n  SIPEED **MaixAmigo** 可开发编程学习套件, MaixAmigo 在硬件上集成前后各 30W 像素摄像头、可扩展 TF 卡槽、用户按键、3.5‘TFT 寸显示屏、520mAh 锂电池、扬声器,麦克风、SPMOD,GROVE 扩展接口等。\n\n  软件上 MaixAmigo 默认搭载 MaixPy, 用户可以非常轻松的使用 MicroPython 语法快速进行人脸识别、物体分类等多种 AIoT 开发，同时还预留开发调试接口，也能将其作为一款功能强大的 AI 学习开发板。\n\n## 外观及功能介绍\n\n### 外观一览\n\n![MaixAmigo](../../assets/hardware/maix_amigo/maix_amigo_0.png)\n\n### 板载功能\n\n| 项目               | 说明                                                             |\n| ------------------ | ---------------------------------------------------------------- |\n| CPU：              | 双核 64bit RISC-V / 400MHz* (双精度FPU集成)                      |\n| 内存：             | 8MiB 64bit 片上 SRAM                                             |\n| 存储：             | 16MiB Flash, 支持 micro SDXC 拓展存储 (最大128GB)                |\n| 屏幕：             | 3.5寸 TFT 显示屏, 分辨率：320\\*480, 支持电容触摸(FT6X36)         |\n| 摄像头：           | OV7740 (后摄)与GC0328(前摄) 各 30W 像素(最大分辨率 VGA:640\\*480) |\n| 灯：              | 三颗单色 LED 灯，一颗闪光灯                                         |\n| 电池：             | 板载可充电锂聚合物电池 (容量520mAh )                             |\n| 板载扬声器与麦克风 | 集成单音频控制器 ES8374 1W 8Ω 扬声器                             |\n| 板载接口：         | USB-C \\*2 (K210 调试供电接口+兼容 STM32 核心板 USB 接口)         |\n| 板载传感器:        | MSA301 三轴加速度传感器                                          |\n| TF 卡槽：          | 多媒体资源扩展，支持大容量储存                                   |\n| 电池:              | 520mAh 锂电池                                                    |\n\n### 引脚资源\n\n![MaixAmigo](../../assets/hardware/maix_amigo/sipeed_maix_amigo_vi.jpg)\n\n### 硬件板载扩展接口\n\nMaixAmigo 对用户开放了两种高度扩展的接口：三个 [SP-MOD](./../modules/sp_mod/index.html) 与 三个 [Grove](./../modules/grove/index.html) 接口,用户可以很方便的进行 DIY。\n\n### 板载 I2C 设备\n\nMaixAmigo 板载 I2C 传感器/IC\n\n| IC     | 设备 id     | I2C 地址(7位地址) | MaixPy 读取地址  | 示例代码 |\n| ------ | ----------- | ----------------- | ---------------------------- |----|\n| ES8374 | 0x08        | 0x10              | D(16)                        |[code](https://github.com/sipeed/MaixPy_scripts/blob/79a5485ec983e67bb8861305a52418b29e0dc205/modules/others/es8374/es8374.py)|\n| MSA301 | 0x13        | 0x26              | D(38)                        |[code](https://github.com/sipeed/MaixPy_scripts/blob/7fea2359a7f0c05f586be915aa8e6112262e0caa/multimedia/gui/maixui/msa301.py)|\n| AXP173 | 0x68        | 0x34              | D(52)                        |[code](https://github.com/sipeed/MaixPy_scripts/blob/7fea2359a7f0c05f586be915aa8e6112262e0caa/multimedia/gui/maixui/pmu_axp173.py)|\n\n\n## 上手把玩\n\nMaixAmigo 同样使用 MaixPy 入门 AIoT ，由于硬件特殊性，请在[配置 amigo 硬件](https://github.com/sipeed/MaixPy_scripts/blob/master/board/config_maix_amigo.py) 后再使用 MaixPy （如果不配置会导致摄像头拍摄的照片有噪点）。\n\n而在开发之前我们需要了解并准备相关工具，以减少我们后边因为准备不足而走的坑路\n\n上手步骤:\n\n1. 下载需要的驱动，软件\n2. 开发板连接电脑，并安装 USB 驱动\n3. 更新最新固件\n4. 下载并打开最新的 MaixPy IDE\n5. MaixPy IDE 连接开发板 运行 MaixPy 示例程序\n\n### 软硬件准备\n\n硬件准备:\n\n  - **电脑**一台\n  - **MaixAmigo** 开发板\n  - **可靠**的 USB Type-C 数据线一条：注意一定要**可靠**的数据线\n\n软件准备:\n\n  - USB 驱动：**FT2232** ->[[下载链接点这里](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)\n  - Kflash_gui：[https://dl.sipeed.com/shareURL/MAIX/tools/kflash_gui](https://dl.sipeed.com/shareURL/MAIX/tools/kflash_gui)\n  - MaixPy IDE ：[https://dl.sipeed.com/shareURL/MAIX/MaixPy/ide/_/v0.2.5](https://dl.sipeed.com/shareURL/MAIX/MaixPy/ide/_/v0.2.5)\n  - 例程程序库：[https://github.com/sipeed/MaixPy_scripts](https://github.com/sipeed/MaixPy_scripts)\n\n###  安装驱动\n\n我们在拿到 Maix Amigo 并连接到电脑的时候，可以打开设备管理器查看串口驱动是否已经安装，打开设备管理器的方法有:\n- 此电脑(右键) -> 属性 -> 设备管理器\n- 开始菜单(右键) -> 设备管理器\n- 控制面板 -> (搜索)设备管理器\n\n  <img src=\"../../assets/get_started/win_device_1.png\" height=\"400\">\n\n1. 当我们的系统是 Win10 系统，系统则会帮我们自动安装驱动，而如果是旧版 Win7，win8 系统我们就需要自己手动安装:\n    ![](../../assets/get_started/win_device_2.png)\n\n1. 打开上一节的的链接下载驱动\n    ![](../../assets/get_started/win_device_3.png)\n1. 点击安装\n    ![](../../assets/get_started/drives.gif)\n1. 安装完成之后，可以在设备管理器看到已经识别到两个串口设备了\n    ![](../../assets/get_started/win_device_4.png)\n\n\n### 更新固件到最新版\n\n  用户拿到开发板之后，板载的固件默认或许已经不是最新版的，那么在使用过程中会存在或多或少的 bug，\n  我们这时候就需要更新固件版本到最新版本\n\n  更新方法查看：[更新固件](../get_started/upgrade_maixpy_firmware.html)\n\n  **若使用 amigo 开发板，请烧录大于或等于 v0.6.2_12 版本的专用 amigo 固件（例如：maixpy_v0.6.2_12_gf18990aa3_amigo_tft(ips)_xxxx.bin），它与标准 maixpy 固件的差异在于其内置了 amigo 硬件的配置（config.json），并且屏幕类型分为 ips 和 tft ，烧录任意屏幕类型固件都是可以启动的，但不同屏幕的显示会不正常（正常的是红色的 maixpy 欢迎页），所以根据实际情况都可以烧录一遍确认。**\n\n\n###  运行第一个程序 `Hello World`\n\n\n- LCD 实时预览 Camera（使用 MaixPy IDE 连接时型号选择 Maixduino 即可）\n\n\n```python\n# -*- coding：UTF-8 -*-\nimport sensor, image, time, lcd\nfrom fpioa_manager import fm\n\n# -------------\nlcd.init(freq=20000000)\n\nwhile True:\n    try:\n        sensor.reset(choice=1)\n        sensor.set_pixformat(sensor.YUV422)\n        sensor.set_framesize(sensor.QVGA)\n        sensor.skip_frames(time=2000)\n        for i in range(100):\n            img = sensor.snapshot()\n            lcd.display(img)\n    except Exception as e:\n        print(e)\n\n    try:\n        sensor.reset(choice=2)\n        sensor.set_pixformat(sensor.YUV422)\n        sensor.set_framesize(sensor.QVGA)\n        sensor.skip_frames(time=2000)\n        for i in range(100):\n            img = sensor.snapshot().rotation_corr(z_rotation = +90)\n            lcd.display(img)\n\n    except Exception as e:\n        print(e)\n\n```\n\n## 资料下载\n\nMaix-Amigo 资料下载：[Sipeed-Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Amigo)\n\nMaix-Amigo 规格书下载：[Sipeed-Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Amigo/ProductSpecification)\n\nMaix-Amigo IPS 版本 原理图下载：[Maix_Amigo_2970(Schematic).pdf][Maix_Amigo_2970(Schematic).pdf]\n\nMaix-Amigo TFT 版本 原理图下载：[Maix_Amigo_2960(Schematic).pdf][Maix_Amigo_2960(Schematic).pdf]\n\n[Maix_Amigo_2970(Schematic).pdf]: https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Amigo/2970/Maix_Amigo_2970(Schematic).pdf\n[Maix_Amigo_2960(Schematic).pdf]: https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Amigo/2960/Maix_Amigo_2960(Schematic).pdf"}, "/soft/maixpy/zh/develop_kit_board/core_module.html": {"title": "Sipeed M1/M1W (Lichee Dan)", "content": "---\ntitle: Sipeed M1/M1W (Lichee Dan)\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Sipeed M1/M1W (Lichee Dan)\n---\n\n\n1. M1/M1W\n\n![M1/M1W](./../../assets/hardware/m1_m1w/M1_Dan.png)\n![M1/M1W](./../../assets/hardware/m1_m1w/M1_pin.png)\n\nM1: K210全引脚引出, 芯片内置 8M SRAM, 模块内置 16M Flash\nM1W 是带 WiFi(esp8285) 版本\n\n| 模组 | WIFI | FLASH | SRAM | 说明 |\n| --- | --- | --- | --- | --- |\n| M1 | 无 | 16MiB | 8MiB | --- |\n| M1W | ES8285 | 16MiB | 8MiB | --- |\n| M1n | 无 | 16MiB | 8MiB | --- |\n\n1. M1n\n\n![M1n](./../../assets/hardware/m1n/M1n.png)\n\nM1n 核心模块采用了 M.2 的金手指接口，并板载了24Pin 的 FPC 底座, 相对于 M1/M1W 可以让用户很方便的将 K210 快速集成到自己的创意或者商业产品中.\n\n\n1. 资料下载\n\n芯片 K210 Datasheet: Kendryte 官网\n\nM1n 资料下载: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1n)\nM1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf)"}, "/soft/maixpy/zh/develop_kit_board/maix_cube.html": {"title": "MaixCube", "content": "---\ntitle: MaixCube\nkeywords: maixpy, k210, AIOT, 边缘计算, MaixCube\ndesc: maixpy doc: MaixCube\n---\n\n\n## 概述\n\n  SIPEED **MaixCube** 可开发编程学习套件, MaixCube 在硬件上集成 30W 摄像头、可扩展 TF 卡槽、用户按键、IPS 1.3 寸显示屏、200mAh 锂电池、扬声器,麦克风、SPMOD,GROVE 扩展接口等。\n  软件上 MaixCube 默认搭载 MaixPy, 用户可以非常轻松的使用 MicroPython 语法快速上手 AI IoT 开发，开发人脸识别，物体识别等 AI 应用，同时还预留开发调试接口，也能将其作为一款功能强大的 AI 学习开发板。\n\n## 外观及功能介绍\n\n### 外观一览\n\n![Maix Cube](../../assets/hardware/maix_cube/maixcube_product_appearance.png)\n\n### 板载功能\n\n| 项目         | 说明                                                     |\n| ------------ | -------------------------------------------------------- |\n| CPU：        | 双核 64bit RISC-V / 400MHz (双精度FPU集成)               |\n| 内存：       | 8MiB 64bit 片上 SRAM                                     |\n| 存储：       | 16MiB Flash, 支持 micro SDXC 拓展存储 (最大128GB)        |\n| 屏幕：       | 1.3 寸 **IPS** 屏幕：分辨率 **240*240**                  |\n| 摄像头：     | 搭载 **0V7740** **30W** 像素 **Sensor**                  |\n| 按键：       | 复位按键，电源按键（短按开机，长按 *8S* 关机），三向按键 |\n| USB：        | Type-C 接口，正反盲插                                    |\n| 音频：       | 支持音频录制，播放，驱动 IC（ES8374）                    |\n| 板载传感器： | 三轴加速度传感器（MSA301）                               |\n| 灯：         | 板载两颗 RGB LED，一颗闪光灯                            |\n| TF 卡槽：    | 多媒体资源扩展，支持大容量储存                           |\n| 电源管理：   | AXP173 控制单元，200mAh 锂电池，支持用户充放电控制       |\n\n### 引脚资源\n\n![Maix Cube](../../assets/hardware/maix_cube/maixcube_resources.png)\n\n### 板载扩展接口\n\nMaix Cube 对用户开放了两种高度扩展的接口：一个 [SP-MOD](../modules/sp_mod/index.html) 与 一个 [Grove](./../modules/grove/index.html) 接口，用户可以很方便的进行 DIY\n\n### 板载 I2C 设备\n\nMaixCube  板载 I2C 传感器/IC\n\n| IC     | 设备 id     | I2C 地址(7位地址) | MaixPy 读取地址  | 示例代码 |\n| ------ | ----------- | ----------------- | ---------------------------- |----|\n| ES8374 | 0x08        | 0x10              | D(16)                        |[code](https://github.com/sipeed/MaixPy_scripts/blob/79a5485ec983e67bb8861305a52418b29e0dc205/modules/others/es8374/es8374.py)|\n| MSA301 | 0x13        | 0x26              | D(38)                        |[code](https://github.com/sipeed/MaixPy_scripts/blob/7fea2359a7f0c05f586be915aa8e6112262e0caa/multimedia/gui/maixui/msa301.py)|\n| AXP173 | 0x68        | 0x34              | D(52)                        |[code](https://github.com/sipeed/MaixPy_scripts/blob/7fea2359a7f0c05f586be915aa8e6112262e0caa/multimedia/gui/maixui/pmu_axp173.py)|\n\n\n## 上手把玩\n\n由于 MaixCube 出厂自带 GUI 演示界面和示例程序，所以在拿到板子时可以先上手把玩下预设程序，\n在之后那么我们就开始以 MaixCube 上手，借助 MaixPy 入门 AIoT.\n\n而在开发之前我们需要了解并准备相关工具，以减少我们后边因为准备不足而走的坑路\n\n上手步骤:\n\n1. 下载需要的驱动，软件\n2. 开发板连接电脑，并安装 USB 驱动\n3. 更新最新固件\n4. 下载并打开最新的 MaixPy IDE\n5. MaixPy IDE 连接开发板 运行 MaixPy 示例程序\n\n### 软硬件准备\n\n硬件准备:\n\n  - **电脑**一台\n  - **MaixCube** 开发板\n  - **可靠**的 USB Type-C 数据线一条：注意一定要**可靠**的数据线\n\n软件准备:\n\n  - USB 驱动：**FT2232** ->[[下载链接点这里](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)\n  - Kflash_gui：[https://dl.sipeed.com/shareURL/MAIX/tools/kflash_gui](https://dl.sipeed.com/shareURL/MAIX/tools/kflash_gui)\n  - MaixPy IDE ：[https://dl.sipeed.com/shareURL/MAIX/MaixPy/ide/_/v0.2.5](https://dl.sipeed.com/shareURL/MAIX/MaixPy/ide/_/v0.2.5)\n  - 例程程序库：[https://github.com/sipeed/MaixPy_scripts](https://github.com/sipeed/MaixPy_scripts)\n\n###  安装驱动\n\n我们在拿到 Maix Cube 并连接到电脑的时候，可以打开设备管理器查看串口驱动是否已经安装，打开设备管理器的方法有:\n- 此电脑(右键) -> 属性 -> 设备管理器\n- 开始菜单(右键) -> 设备管理器\n- 控制面板 -> (搜索)设备管理器\n\n  <img src=\"../../assetcs/../assets/get_started/win_device_1.png\" height=\"400\">\n\n1. 当我们的系统是 Win10 系统，系统则会帮我们自动安装驱动，而如果是旧版 Win7，win8 系统我们就需要自己手动安装:\n    ![](../../assetcs/../assets/get_started/win_device_2.png)\n\n1. 打开上一节的的链接下载驱动\n    ![](../../assetcs/../assets/get_started/win_device_3.png)\n1. 点击安装\n    ![](../../assets/get_started/drives.gif)\n1. 安装完成之后，可以在设备管理器看到已经识别到两个串口设备了\n    ![](../../assetcs/../assets/get_started/win_device_4.png)\n\n\n### 更新固件到最新版\n\n  用户拿到开发板之后，板载的固件默认或许已经不是最新版的，那么在使用过程中会存在或多或少的 bug，\n  我们这时候就需要更新固件版本到最新版本\n\n  更新方法查看：[更新固件](../get_started/upgrade_maixpy_firmware.html)\n\n\n\n###  运行第一个程序 `Hello World`\n\n\n- LCD 实时预览 Camera（使用 MaixPy IDE 连接时型号选择 Maixduino 即可）\n\n```python\nimport sensor, image, time, lcd\n\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.skip_frames(time = 2000)\nsensor.set_hmirror(1)\nsensor.set_vflip(1)\n\nclock = time.clock()\n\nlcd.init(type=2)\nlcd.rotation(2)\n\nwhile(True):\n    clock.tick()\n    img = sensor.snapshot()\n    print(clock.fps())\n    img.draw_string(60, lcd.height()-120, \"fps:\"+str(clock.fps()), lcd.GREEN, scale=2)\n    lcd.display(img)\n\n```\n\n## 资料下载\n\nSipeed-Maix-Cube 资料下载：[Sipeed-Maix-Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube)\n\nSipeed-Maix-Cube 规格书下载：[Sipeed-Maix-Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube/ProductSpecification/Sipeed%20Maix%20Cube%20Datasheet%20V1.0.pdf)\n\nSipeed-Maix-Cube 原理图下载：[Sipeed-Maix-Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube/Maix-Cube-2757/Maix-Cube-2757%28Schematic%29.pdf)"}, "/soft/maixpy/zh/develop_kit_board/maix_duino.html": {"title": "MaixDuino", "content": "---\ntitle: MaixDuino\nkeywords: maixpy, k210, AIOT, 边缘计算, MaixDuino\ndesc: maixpy doc: MaixDuino\n---\n\n\n## 概述\n\n  SIPEED MaixDuino 是基于我们 M1 模块(主控:Kendryte K210)开发的一款外形兼容 Arduino 的开发板\n  <br/>MaixDuino 集成摄像头、TF卡槽、用户按键、TFT显示屏、MaixDuino 扩展接口等, 用户可使用 MaixDuino 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板.\n\n## 外观及功能介绍\n\n### 外观一览\n\n![MaixDuino](../../assets/hardware/maix_duino/maixduino_4.png)\n\n### 板载功能\n\n| 项目             | 说明                                              |\n| ---------------- | ------------------------------------------------- |\n| CPU：            | 双核 64bit RISC-V / 400MHz* (双精度FPU集成)       |\n| 内存：           | 8MiB 64bit 片上 SRAM                              |\n| 存储：           | 16MiB Flash, 支持 micro SDXC 拓展存储 (最大128GB) |\n| 屏幕（套餐）：   | 2.4 寸 TFT, 屏幕分辨率：320\\*240          |\n| 摄像头（套餐）： | 30W 像素 GC0328 摄像头                            |\n| DVP：            | 标准 Camera DVP 24PIN 接口                        |\n| 电源+USB：       | USB Type-C 接口                                   |\n| ESP32：          | ESP32 SPI 连接(ESP32 支持 WIFI 与 蓝牙)，PAM8403A |\n| DAC：            | I2C DAC                                           |\n| TF 卡槽：        | 多媒体资源扩展，支持大容量储存                    |\n\n### 引脚资源\n\n![MaixDuino](../../assets/hardware/maix_duino/sipeed_maixduin_pins.png)\n\n## 资料下载\n\nSipeed-Maix-Duino 资料下载：[Sipeed-Maix-Duino](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maixduino/)\n\nSipeed-Maix-Duino 规格书下载：[Sipeed-Maix-Duino](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maixduino/Specifications)\n\nSipeed-Maix-Duino 原理图下载：[Sipeed-Maix-Duino][Sipeed-Maix-Duino]\n\n[Sipeed-Maix-Duino]: https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maixduino/Maixduino_2832/Maixduino_2832(Schematic).pdf"}, "/soft/maixpy/zh/develop_kit_board/get_hardware.html": {"title": "如何选购开发板", "content": "---\ntitle: 如何选购开发板\nkeywords: maixpy, k210, AIOT, 边缘计算, Maix开发板\ndesc: maixpy doc: 如何选购开发板\n---\n\n\n要开始使用 MaixPy,  必须需要一款 K210 开发板, 可以从 Sipeed 官方淘宝店获得心仪的硬件：\n[Sipeed 官方淘宝店](https://sipeed.taobao.com/)\n\n## 需要的硬件\n\n### 一款开发板\n\n由于 MaixPy 早期产品线比较多，具体开发板及参数列表如下，用户可以根据自己的动手能力和需求选购对应开发板\n\n>  MaixPy 系类开发板板载的 ROM 均为 16MB SPI FLASH, RAM: 6MB(通用) + 2MB(KPU 专用)\n\n<table border=\"2\">\n    <tr>\n        <th colspan=3>MaixPy 系列开发板</th>\n    </tr>\n    <tr>\n        <td>描述</td>\n        <td>实物图</td>\n        <td>说明</td>\n    </tr>\n        <td>Maix Amigo</td>\n        <td>\n            <img src=\"../../assets/hardware/maix_amigo/sipeed_maix_amigo_400x400.jpg\" height=\"200\">\n            </p><a href=\"https://sipeed.taobao.com/\">点击购买 Maix Amigo</a>\n        </td>\n        <td>3.5寸 大屏幕， 预留三个 Grove 接口，三个 SPMOD 接口(其中一个为游戏手柄接口)</td>\n    <tr>\n        <td>Maix Cube</td>\n        <td>\n            <img src=\"../../assets/hardware/maix_cube/sipeed_maix_cube_400x400.jpg\" height=\"200\">\n            </p><a href=\"https://sipeed.taobao.com/\">点击购买 Maix Cube</a>\n        </td>\n        <td>迷你开发板，引出 Grove/Spmod 接口</td>\n    </tr>\n    <tr>\n        <td>Maix Dock(M1W)</td>\n        <td>\n            <img src=\"../../assets/hardware/maix_dock/sipeed_maix_dock_m1w.jpg\" height=\"200\">\n            </p><a href=\"https://sipeed.taobao.com/\">点击购买 Maix Dock(M1W)</a>\n            </td>\n        <td>全引脚引出，采用 M1W 模块 (内部集成 ESP8285)</td>\n    </tr>\n    <tr>\n        <td>Maix Dock(M1)</td>\n        <td>\n            <img src=\"../../assets/hardware/maix_dock/sipeed_maix_dock_m1.jpg\" height=\"200\">\n            </p><a href=\"https://sipeed.taobao.com/\">点击购买 Maix Dock(M1)</a>\n        </td>\n        <td>全引脚引出，采用 M1 模块 </td>\n    </tr>\n    <tr>\n        <td>Maix Bit</td>\n        <td>\n            <img src=\"../../assets/hardware/maix_bit/sipeed_maix_bit_400x400.jpg\" height=\"200\">\n            </p><a href=\"https://sipeed.taobao.com/\">点击购买 Maix Bit</a>\n        </td>\n        <td>全引脚引出，2x20pin，最小系统板</td>\n    </tr>\n    <tr>\n        <td>Maix Duino</td>\n        <td>\n            <img src=\"../../assets/hardware/maix_duino/sipeed_maix_duino_400x400.jpg\" height=\"200\">\n            </p><a href=\"https://sipeed.taobao.com/\">点击购买 Maix Duino</a>\n        </td>\n        <td>兼容 Arduino，支持 ESP32 WIFI，支持 ESP32 5个 ADC 通道的读取</td>\n    </tr>\n    <tr>\n        <td>Grove AI HAT</td>\n        <td>\n            <img src=\"../../assets/hardware/grove_ai_hat/grove_ai_hat.jpg\" height=\"200\"></br>\n            </p><a href=\"https://sipeed.taobao.com/\">点击购买 Grove AI HAT</a>\n        </td>\n        <td>板载加速度计和高精度 ADC, 引出多个 Grove/Spmod 接口, 可用作树莓派配件</td>\n    </tr>\n    <tr>\n        <td>Maix GO</td>\n        <td>\n            <img src=\"../../assets/hardware/maix_go/sipeed_maix_go_400x400.jpg\" height=\"200\">\n            </p><a href=\"https://sipeed.taobao.com/\">点击购买 Maix GO</a>\n        </td>\n        <td>已停产</td>\n    </tr>\n    <tr>\n        <td>Maix Nano</td>\n        <td>\n            <img src=\"../../assets/hardware/m1n/sipeed_maix_m1n_400x400.jpg\" height=\"200\"></br>\n            <img src=\"../../assets/hardware/m1n/sipeed_maix_nano_400x400.jpg\" height=\"200\">\n            </p><a href=\"https://sipeed.taobao.com/\">点击购买 Maix Nano</a>\n        </td>\n        <td>核心开发板</td>\n    </tr>\n</table>\n\n### USB Type-C 连接线\n\n<img src=\"../../assets/hardware/other/usb_type_c.png\" height=\"300\" alt=\"type_c\">\n\n选用 Type-C 是因为它支持正反插，对开发十分友好\n\n从淘宝官方购买可以询问是否附送，目前大部分安卓机也在使用 Type-C 连接线\n\n> **USB 数据线注意点：** 由于市面上的 USB 线质量良莠不齐，采用的线材（主要是线芯材质）不同，好一点的数据线采用 镀锡铜、铜丝、铜箔丝、裸铜等,线阻小,数据线两端压降小，而差一点的有铜包钢，铜包铁,线阻大,数据线两端压降大，造成实际供给开发板的电压，电流过小，使开发板处于非正常工作状态；所以建议选用质量可靠的数据线（一般手机附送的数据线质量都是比较可靠的）\n\n### 屏幕\n\n**屏幕强烈建议购买!**\n\n从淘宝官方购买可以询问是否包含, 推荐用户购买带 LCD 的板子或者套餐,方便后续运行程序时结果的直观展示,\n\n| 板型                | 屏幕驱动 IC | 支持分辨率 | 备注 |\n| ------------------- | ----------- | ---------- | ---- |\n| Maix Cube(IPS)      | ST7789      | 240\\*240   | ---  |\n| Maix Amigo          | ILI9486     | 320\\*480   | ---  |\n| Maix Amigo(IPS 版)  | ILI9486     | 320\\*480   | ---  |\n| Maix Nano(不带屏幕) | ---         | ---        | ---  |\n| Maix Dock           | ST7789      | 320\\*240   | ---  |\n| Maix Bit            | ST7789      | 320\\*240   | ---  |\n| Maix Dock           | ST7789      | 320\\*240   | ---  |\n| Maix Go             | ST7789      | 320\\*240   | ---  |\n| Grove AI HAT        | ST7789      | 320\\*240   | ---  |\n\n### 摄像头\n\n在售的有：OV2640（常规，M12）、OV7740、GC0328；\n\n由于 K210 DVP 接口支持的分辨率为 VGA（640*480 30W）， 所以实际使用选取 30W 像素的摄像头即可。\n\n截至 MaixPy 固件版本: `MaixPy 0.6.2_54` ,支持的摄像头型号如下表\n\n| 型号    | 设备 id | 像素 | 说明                 | 备注 |\n| ------- | ------- | ---- | -------------------- | ---- |\n| OV2640  | 0x2642  | 200W | 支持度较好           |      |\n| OV7740  | 0x7742  | 30W  | 支持度较好           |      |\n| OV3660  | 0x3660  | 300W | 兼容运行             |      |\n| GC0328  | 0x9d    | 30W  | 支持度较好           |      |\n| GC2145  | 0x2145  | 200W | 兼容运行             |      |\n| MT9D111 | 0x1519  | 200W | 可以运行，支持不完整 |      |\n| OV5640  | 0x5640  | 500W | 支持度较好           | ---  |\n| OV5642  | 0x5642  | 500w | 支持度较好           |      |\n\n\n截止至固件版本 `MaixPy 0.6.2_54` 相关摄像头测试情况如下:\n\n| 硬件型号                               | 测试通过的单目或双目摄像头             |\n| -------------------------------------- | -------------------------------------- |\n| M1/M1W 模组系列（Maixduino、Dock、Go） | OV2640、GC0328、OV7740、GC2145、OV5640、OV5642 |\n| M1n 模组系列（Nano、Cube）             | OV2640、GC0328、OV7740、GC2145、OV5640、OV5642 |\n| MaixBit                                | OV2640、GC0328、OV7740、GC2145、OV5640、OV5642 |\n| Maix Amigo                             | OV7740（后摄）、GC0328（前摄）         |\n\n- 目前摄像头的颜色模式\n\n| YUV422 | RGB565 & YUV422 |\n| ------ | --------------- |\n| OV2640 | OV5640          |\n| OV7740 | GC2145          |\n| GC0328 | OV5642          |\n\n\n从淘宝官方购买可以询问型号, OV7740 帧率相对高一点; OV2640 比较古老, 画质稍不如 GC0328\n\n> 注：很多用户一上来就问哪款支持的帧率最高，其实帧率除了硬件上会有差异，而且在你使用的程序，由于程序的处理流程不同，帧率也是会有差异的，所以这里无法标注（以免误导用户）具体最高帧率。目前来说别的摄像头是没有对应的驱动程序，需要的可以自己进行编写。\n\n### Micro SD 卡 (TF 卡) (可选)\n\n不使用 Micro SD 卡也是可以操作文件的,  在内部 Flash 上已经保留一部分来作为文件系统了, 只是 Flash 速度很慢！\n\n为了方便图片文件快速操作, 可以选择购买一张 `Micro SD` 卡, 　 MaixPy　内置了 SPI SD卡协议驱动,\n\n购买时尽量选择速度快协议新的 Micro SD 卡,  比如 SD 2代协议,  Class10 的内存卡\n\n因为 K210 没有 SDIO 硬件外设,  所以使用了 SPI 来与 SD 卡通信,  当然, 市面上的 SD 卡品质参差不齐,  SPI 模式不一定都能兼容,  尽量买正规的卡,  实在有需求请自行定制驱动～～\n\n比如：下图左边两张卡 MaixPy 的驱动不支持,  中间和右边的都支持,  但是中间的 class10 卡速度最快(最高测过 128GB可用)\n> 另外测试过网上购买的几张闪迪、金士顿、三星的卡, 其中发现有一张三星的卡无法使用\n\n![TF SDCard](../../assets/hardware/other/tf_sdcard.png)\n\n[**Sipeed 官方店 SD 卡购买链接**](https://item.taobao.com/item.htm?spm=a1z10.5-c.w4002-21231188711.12.5a7f7379ZEhEdC&id=587713418483)，该卡 SPI 协议只支持 V1 版本， 所以读取速率较低，建议购买其他支持 SPI V2 协议的 SD 卡，淘宝店开发板套餐中可以单选 SD 卡。\n\n### ST-Link (用来给开发板 Maix Go 上的 STM32 更新固件) (可选)\n\n如果购买的是 `Maix Go`,  上面集成了一颗 `STM32` 芯片,  用来模拟 `USB转串口` 工具,  以及模拟 `JTAG`, 如果想后期自行更新其固件, 建议购买一个 `ST-Link` 备用; 如果不需要`JTAG` 功能可以不用购买\n\n### JTAG 调试器 (可选)\n\n- **注意：**\n\n**!!! 烧录过 ken_gen.bin 之后将永久禁用 K210 的 JTAG 调试功能**\n\n`K210` 这款芯片支持 `JTAG` 调试,  如果需要调试功能,  需要使用 `JTAG` 调试器,  请在 `Sipeed` 官方淘宝店咨询购买。\n\n如果是 `Maix Go` 开发板,  可以不用另外购买 `JTAG` 调试器,  `Maix Go` 开发板上面集成了一个 `STM32`芯片,  可以模拟 `JTAG`(`STM32` 使用 `CMSIS-DAP` 或者 `open-ec` 固件),  `open-ec` 固件目前还不支持, 后续会支持, 请以 `open-ec` github 项目主页说明为准"}, "/soft/maixpy/zh/develop_kit_board/develop_kit_board.html": {"title": "MaixPy 系列开发板", "content": "---\ntitle: MaixPy 系列开发板\nkeywords: maixpy, k210, AIOT, 边缘计算, Maix开发板\ndesc: maixpy doc: MaixPy 系列开发板\n---\n\n\n-------\n\n## MaixPy 开发板\n\n目前 MaixPy 系类开发板有一下这几款型号:\n\n- Maix Go\n- Maix Dock\n- Maix Duino\n- Maix Bit\n- Maix Cube\n- Maix Amigo\n\n## 差异对比\n\n| 型号 | USB IC | 核心模块 | 备注 |---| --- |\n|---| --- | --- | --- | --- | --- | -- | --- |\n| Maix Go <img src=\"../../assets/dk_board/maix_go/Go.jpg\" width=\"260\"> |Maix Go | STM32 | M1W | --- | --- |\n| Maix Dock <img src=\"../../assets/dk_board/maix_dock/Dan_Dock.png\" width=\"260\">| CH340 | M1/M1W | --- | --- | --- |\n| Maix Duino <img src=\"../../assets/dk_board/maix_duino/maixduino_0.png\" width=\"260\"> | CH552 | M1 | --- | --- | --- |\n| Maix Bit <img src=\"../../assets/dk_board/maix_bit/BiT.png\" width=\"260\"> | CH552/CH340 | --- | --- | --- | --- |\n| Maix Cube <img src=\"../../assets/dk_board/maix_cube/maixcube_2020-06-13_06-31-29.png\" width=\"260\">  | GD32/CH552 | M1n | --- | --- | --- |\n|Maix Amigo <img src=\"\" width=\"260\"> | GD32 | M1n | --- | --- | --- |"}, "/soft/maixpy/zh/develop_kit_board/core_k210.html": {"title": "K210 模块核心板", "content": "---\ntitle: K210 模块核心板\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: K210 模块核心板\n---\n\n\n![K210](./../../assets/hardware/k210/k210-front-background.jpg)\n\nKendryte K210 是集成机器视觉与机器听觉能力的系统级芯片 (SoC) .使用台积电 (TSMC) 超低功耗的 28 纳米先进制程,具有双核 64 位处理器,拥有较好的功耗性能,稳定性与可靠性. 该方案力求零门槛开发,可在最短时效部署于用户的产品中,赋予产品人工智能.\n\nKendryte K210 定位于 AI 与 IoT 市场的 SoC ,同时是使用非常方便的 MCU .\n\nKendryte 中文含义为**勘智**,而勘智取自勘物探智.这颗芯片主要应用领域为物联网领域,在物联网领域进行开发,因此为勘物;这颗芯片主要提供的是人工智能解决方案,在人工智能领域探索,因此为探智.\n\n具备机器视觉能力\n具备机器听觉能力\n更好的低功耗视觉处理速度与准确率\n具备卷积人工神经网络硬件加速器 KPU ,可高性能进行卷积人工神经网络运算\nTSMC 28nm 先进制程,温度范围 -40°C 到 125°C ,稳定可靠\n支持固件加密,难以使用普通方法破解\n独特的可编程 IO 阵列,使产品设计更加灵活\n低电压,与相同处理能力的系统相比具有更低功耗\n3.3V/1.8V 双电压支持,无需电平转换,节约成本\n\n1. AI 解决方案\n## 1.1. 机器视觉\n\nKendryte K210 具备机器视觉能力,是零门槛机器视觉嵌入式解决方案.它可以在低功耗情况下进行卷积神经网络计算.\n\n该芯片可以实现以下机器视觉能力:\n\n基于卷积神经网络的一般目标检测\n基于卷积神经网络的图像分类任务\n人脸检测和人脸识别\n实时获取被检测目标的大小与坐标\n实时获取被检测目标的种类\n\n1.2. 机器听觉\n\nKendryte K210 具备机器听觉能力.芯片上自带高性能麦克风阵列音频处理器,可以进行实时声源定向与波束形成.\n\n该芯片可以实现以下机器听觉能力:\n\n声源定向\n声场成像\n波束形成\n语音唤醒\n语音识别\n\n1.3. 视觉 / 听觉混合解决方案\nKendryte K210 可结合机器视觉和机器听觉能力,提供更强大的功能.一方面,在应用中既可以通过声源定位和声场成像辅助机器视觉对目标的跟踪,又可以通过一般目标检测获得目标的方位后辅助机器听觉对该方位进行波束形成.另一方面,可以通过摄像头传来的图像获得人的方向后,使得麦克风阵列通过波束形成指向该人.同时也可以根据麦克风阵列确定一个说话人的方向,转动摄像头指向该人.\n\n2. 资料下载\n\nKendryte 官网下载页面 其中必看的有 datasheet\n\nKendryte Github"}, "/soft/maixpy/zh/develop_kit_board/maix_bit.html": {"title": "Maix Bit", "content": "---\ntitle: Maix Bit\nkeywords: maixpy, k210, AIOT, 边缘计算, Maix Bit\ndesc: maixpy doc: Maix Bit\n---\n\n\n## 外观及功能介绍\n\n### 外观一览\n\n![Maix Bit](../../assets/hardware/maix_bit/maix_bit.png)\n\n### 板载功能\n\n| 项目           | 说明                                              |\n| -------------- | ------------------------------------------------- |\n| CPU：          | 双核 64bit RISC-V / 400MHz (双精度FPU集成)        |\n| 内存：         | 8MiB 64bit 片上 SRAM                              |\n| 存储：         | 16MiB Flash, 支持 micro SDXC 拓展存储 (最大128GB) |\n| 屏幕(套餐)：   | 2.4 寸 TFT, 屏幕分辨率：320\\*240          |\n| 摄像头(套餐)： | 200W 像素(实际使用 30W)，0V2640 型号 M12 摄像头   |\n| TF 卡槽：      | 多媒体资源扩展，支持大容量储存                    |\n\n### 引脚资源\n\n![](./../../assets/hardware/maix_bit/maixbit_pin_maps.svg)\n\n## 资料下载\n\nSipeed-Maix-Bit 资料[下载](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Bit/Maix-Bit%20V2.0%28with%20MEMS%20microphone%29)\n\nSipeed-Maix-Bit 规格书[下载](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Bit/Specifications/Sipeed%20Maix-Bit%20%E8%A7%84%E6%A0%BC%E4%B9%A6%20V2.0.pdf)\n\nSipeed-Maix-Bit 原理图[下载](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Bit/Maix-Bit%20V2.0%28with%20MEMS%20microphone%29/Maix-Bit%20V2.0%28Schematic%29.pdf)"}, "/soft/maixpy/zh/contribute/app_doc_template.html": {"title": "MaixPy_DOC 实例教程模板", "content": "---\ntitle: MaixPy_DOC 实例教程模板\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy_DOC 实例教程模板\n---\n\n\n\n本文说明文档贡献者在撰写教程中遵循的规范，以及注意事项，请各位贡献者根据本文撰写文档；\n如果对模板格式，内容存在疑惑请到本项目仓库 [MaixPy_DOC](https://github.com/sipeed/MaixPy_DOC) 提交 `ISSUE`。\n\n🙇‍ 感谢各位贡献者的热心支持！\n\n\n- 关于文档编写工具\n\n> 文档使用 `MarkDown` 语法撰写, 整体文档项目使用 `gitbook` 构建；这里推荐使用 `Typora` 及 `VS Code` 搭配 `MarkDown` 插件作为文本编辑器\n\n- 关于文档图文内容存放\n\n> 实例教程文档请存放到路径 `./MaixPy_DOC/zh(这里区分中英文，中文：zh，英文：en)/application/xxx(具体分类，分类建议请看后续描述)/xxx（具体的例程名称，建议使用英文命名）`.md\n\n> 文档中引用到的图片建议使用相对链接，并将图片文件存放与文档同目录下的 `[文件名].assets` 文件夹中；\n\n- 关于文档分类建立存放路径\n\n> 与硬件外设强相关的建议命名（存放路径）为：``\n\n> 与 image 强相关的建议命名（存放路径）为：`image`\n\n> 与 KPU 强相关的建议命名（存放路径）为：`KPU`\n\n> 较为综合的例程的建议命名（存放路径）为：`demo`\n\n\n\n> 以下内容为文档模板内容：\n\n\n# MaixPy 实例教程 —— XXX\n\n## 一、概述：\n\n> 1. 描述下该例程实现的效果\n>\n> 2. 简要说明操作步骤\n>\n\n\n## 二、准备:\n\n> 说明需要准备的软硬件环境\n\n- 预备知识\n\n- 硬件\n\n    > 图文描述使用到的开发板&&外设模块等\n\n- 软件\n\n    > 图文描述使用到的软件工具，MaixPy 版本\n    > 如果使用到第三方软件工具，可以附加相关名称或下载链接\n\n### 具体操作步骤\n\n\n### 程序代码\n\n```python\nxxxxx\n```\n\n\n### 效果\n\n> 建议添加图片展示实际运行效果\n\n## 问题和反馈(Question && Feedback)\n\n\n-----\n\n- 贡献者说明：\n\n> 这里给贡献者提供引流入口\n\n    作者：\n\n    联系方式(Email)：\n\n    博客："}, "/soft/maixpy/zh/contribute/code_convention.html": {"title": "MaixPy 编程规范", "content": "---\ntitle: MaixPy 编程规范\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixPy 编程规范\n---\n\n\n这是一份 **MaixPy** 开发人员的开发指引。**MaixPy** 做为一份开源软件，它需要由不同的人采用合作的方式完成，这份文档是开发人员的一个指引。\n\n**MaixPy** 的开发人员请遵守这样的编程风格。同时对于使用 MaixPy 的用户，也可通过这份文档了解 MaixPy 代码内部一些约定从而比较容易的把握到 MaixPy 的实现方式。\n\n## 规范原则\n\n- [x] 朴实，避免晦涩语法\n- [x] 严谨，逻辑反复思考\n- [x] 简约，命名简洁、代码精炼\n- [x] 性能，通过算法、编译器、硬件进行优化\n\n## 目录结构 && 文件名称\n\n- 目录结构\n\n整个工程按照功能模块划分子目录，每个子目录再划分头文件和源文件目录，以便架构清晰、易懂。\n目录名称如果无特殊的需求，请使用全小写的形式；目录名称应能够反应部分的意思，components 目录下能够反映组件的意义。\n\n- 文件结构\n\n文件名称如果无特殊的需求(如果是引用其他地方，可以保留相应的名称)，请使用全小写的形式。另外为了避免文件名重名的问题，一些地方请尽量不要使用通用化、使用频率高的名称。\n\n## 头文件定义\n\nC语言头文件为了避免多次重复包含，需要定义一个符号。这个符号的定义形式请采用如下\n的风格：\n\n```c\n#ifndef __FILE_H__\n#define __FILE_H__\n/* header file content */\n#endif\n```\n\n即定义的符号两侧采用 \"__\" 以避免重名，另外也可以根据文件名中是否包含多个词语而\n采用 \"_\" 连接起来。\n\n## 文件头注释\n\n在每个源文件文件头上，应该包括相应的版权信息，Change Log 记录：\n\n```c\n/**\n * File      : maixpy_main.h\n * This file is part of MaixPy\n * Copyright 2019 Sipeed Co.,Ltd. MaixPy Development Team\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n```\n\n例如采用如上的形式。\n\n## 结构体定义\n\n结构体名称请使用小写英文名的形式，单词与单词之间采用 \"_\" 连接，例如：\n\n```c\nstruct lcd_config\n{\n    int width;\n    int height;\n};\n```\n\n其中，\"{\"，\"}\" 独立占用一行，后面的成员定义使用缩进的方式定义。\n\n结构体等的类型定义请以结构体名称加上 \"_t\" 的形式作为名称，例如：\n\n```c\n    typedef struct lcd_config lcd_config_t;\n```\n\n## 宏定义\n\n在 MaixPy 中，请使用大写英文名称作为宏定义，单词之间使用 \"_\" 连接，例如：\n\n```c\n    #define MAIXPY_TRUE                         1\n```\n\n## 函数名称、声明\n\n函数名称请使用小写英文的形式，单词之间使用 \"_\" 连接。提供给上层应用使用的 API\n接口，必须在相应的头文件中声明；如果函数入口参数是空，必须使用 void 作为入口参\n数，例如：\n\n```c\n    maixpy_err_t lcd_init(void);\n```\n\n## 注释编写\n\n请使用英文做为注释，使用中文注释将意味着在编写代码时需要来回不停的切换中英文输入法从而打断编写代码的思路。并且使用英文注释也能够比较好的与中国以外的技术者进行交流。\n\n源代码的注释不应该过多，更多的说明应该是代码做了什么，仅当个别关键点才需要一些相应提示性的注释以解释一段复杂的算法它是如何工作的。对语句的注释只能写在它的上方或右方，其他位置都是非法的。\n\n## 缩进及分行\n\n缩进请采用 4 个空格的方式。如果没有什么特殊意义，请在 \"{\" 后进行分行，并在下一行都采用缩进的方式，例如：\n\n```c\nif (condition)\n{\n    /* others */\n}\n```\n\n唯一的例外是 switch 语句，switch-case 语句采用 case 语句与 switch 对齐的方式，\n例如：\n\n```c\nswitch (value)\n{\ncase value1:\n    break;\ncase value2:\n    break;\ndefalut:\n    break;\n}\n```\n\ncase 语句与前面的 switch 语句对齐，后续的语句则采用缩进的方式。\n\n分行上，如果没有什么特殊考虑，请**不要在代码中连续使用两个以上的空行**。\n\n## 大括号与空格\n\n从代码阅读角度，建议每个大括号单独占用一行，而不是跟在语句的后面，例如：\n\n```c\nif (condition)\n{\n    /* others */\n}\n```\n\n匹配的大括号单独占用一行，代码阅读起来就会有相应的层次而不会容易出现混淆的情况。\n\n空格建议在非函数方式的括号调用前留一个空格以和前面的进行区分，例如：\n\n```c\nif (x <= y)\n{\n    /* others */\n}\n\nfor (index = 0; index < MAX_NUMBER; index ++)\n{\n    /* others */\n}\n```\n\n建议在括号前留出一个空格(涉及的包括 if、for、while、switch 语句)，而运算表达式中，运算符与字符串间留一个空格。另外，不要在括号的表达式两侧留空格，例如：\n\n```c\nif ( x <= y )\n{\n    /* other */\n}\n```\n\n这样括号内两侧的空格是不允许的。\n\n## log 信息\n\n在 MaixPy 中，普遍使用的 log 方式是 printk, 而面向 py 终端的是使用 mp_print, 而在我们对 MaixPy 功能增减之后建议将不需要的 printk 删除或者注释掉\n\n但是**注意**，最终提交的代码里面不能有`printk`和`printf`函数， 只能在调试时使用！！！否则会导致 IDE 使用时断开连接\n\n日志输出应该被设计成正常情况下是关闭状态(例如通过一个变量或宏就能够开启)，并且\n当真正输出日志时，日志是易懂易定位问题的方式。\"天书式\"的日志系统是糟糕的，不合理的。\n\n## 函数\n\n在内核编程中，函数应该尽量精简，仅完成相对独立的简单功能。函数的实现不应该太长，函数实现太长，应该反思能够如何修改(或拆分)使得函数更为精简、易懂。\n\n## 用 astyle 自动格式化代码\n\n参数：\n\n    --style=allman\n    --indent=spaces=4\n    --indent-preproc-block\n    --pad-oper\n    --pad-header\n    --unpad-paren\n    --suffix=none\n    --align-pointer=name\n    --lineend=linux\n    --convert-tabs\n    --verbose\n\n\n## 规范参考\n\n- AliOS-Things -- [《AliOS Things Coding Style Guide》](https://github.com/alibaba/AliOS-Things/wiki/AliOS-Things-Coding-Style-Guide)\n\n- RT-Thread -- [《RT-Thread 编程风格》](https://github.com/RT-Thread/rt-thread/blob/master/documentation/coding_style_cn.md)"}, "/soft/maixpy/zh/contribute/doc_convention.html": {"title": "文档贡献规范", "content": "---\ntitle: 文档贡献规范\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 文档贡献规范\n---\n\n\n有几种情况你可能需要看本文档：\n* 发现文档有误或者有内容需要补充，并且会自己想参与修改\n* 提交 教程/经验/开源项目分享 等等\n\n\n\n为了让文档看起来风格统一， 内容不重复不出错， 编写需要遵循同一个规范，请各位贡献者**务必**根据本文撰写文档；\n如果对模板格式，内容存在疑惑请到本项目仓库 [MaixPy_DOC](https://github.com/sipeed/MaixPy_DOC) 提交 `ISSUE`。\n\n\n🙇‍ 感谢各位贡献者的热心支持！\n\n\n## 要参与贡献，你需要提前掌握的知识\n\n* git 和 github 的使用\n* github PR（pull request）的使用\n\n在入门教程里面有简要的介绍， 详细的使用方法请自行学习\n\n如果你没有信心掌握这些技能， 你可以到提交[issue](https://github.com/sipeed/MaixPy_DOC/issues) 来说明问题或者贡献经验等，我们帮助你进行添加\n\n## 文档系统简介\n\n\n文档使用 gitbook 进行构建， 并使用简单高效的 Markdown 编写内容, 这里推荐使用 `Typora` 或者 `VS Code` 搭配 `MarkDown Preview Enhanced` 插件作为文档编辑器\n\n\n文档源码托管在 [github](https://github.com/sipeed/sipeed_wiki/tree/main/docs/soft/maixpy)\n\n本地预览方法见 文档源码的 [README.md](https://github.com/sipeed/sipeed_wiki/README.md)\n\n文档有两种语言， 中文和英文，分别放在`zh`和`en`文件夹中， 其中的`SUMMARY.md`是文档左边的目录项，其它`md`文件时具体的文档文件，根目录下的`assets`目录放两种语言公用的图片资源文件\n\n\n\n## Markdown 语法\n\nMarkdown 的基础语法如果没接触过， 请花半个小时进行学习， 推荐github的教程： [github Markdown 教程](https://guides.github.com/features/mastering-markdown/)\n\n在本文中， 以下几点我们需要注意：\n\n### 标题类的语法标记必须使用空格隔开，大标题与正文之间需要一个空行，比如：\n\n```markdown\n## 这是二级标题\n\n* 这是列表项1\n* 这是列表项2\n\n```\n而如下所示的则不是正确的，可能会导致解析器出现解析错误格式错乱等\n\n```markdown\n##这是二级标题\n*这是列表项1\n*这是列表项2\n```\n\n### 所有页面只有一个一级标题\n\n由于需要自动生成目录，主要是为了保证自动生成的目录正确。\n每个页面这样写\n\n```\n                ( 至少需要一个以上的空行，建议2行 )\n\n## 二级标题1     ( 这里不能使用一级标题，及不能用一个#号。 也不需要写序号，会自动生成序号)\n                ( 空一行 )\n正文\n                ( 至少空一行)\n### 三级标题      ( 类似二级标题, 也不需要写需要，会自动生成)\n\n正文\n\n## 二级标题2\n\n正文\n\n\n```\n\n### 标题编号\n\n所有标题**不需要**写编号， **会自动生成**比如\n\n```\n## 标题一\n\n### 子标题1\n\n## 标题二\n```\n最终效果：\n\n```\n1. 标题一\n  1.1 子标题1\n\n2. 标题二\n \n```\n\n如果手动写了最终显示就会重复， 所以需要注意！\n\n\n### 链接\n\n由于页面众多，而且需要链接图片等资源，在写链接时，均使用相对路径，\n比如目录结构如下\n```\nassets/                                 (放公用的资源文件)\n      |\n      ----pic000.png\nen/\n   |\n   ----- get_started/\n                  |\n                  ---- assets/          (放get_started目录下md文件公用的资源文件)\n                             |\n                             ------ pic.png\n                  |\n                  ---- get_hardware.md\n                  |\n                  ---- how_to_read.md\nzh/\n```\n\n如果在`get_hardware.md`中贴图片，将图片放进`assets`文件夹后，使用如下代码引用图片\n```\n![pic](assets/pic.png)\n![pic](../../assets/pic000.png)\n```\n\n\n### 中英文混写\n\n在写中文文档时，在中文中夹杂英文尽量用空格隔开，标点符号尽量使用全角符号，\n主要是为了显眼，让文档更优雅。\n比如：\n\n---------\n\n```markdown\n在 Micropython 中， 我们常常使用 `deinit` 来表示析构函数，而不是像 STM32 一样来表示设置默认值\n```\n在 Micropython 中， 我们常常使用 `deinit` 来表示析构函数，而不是像 STM32 一样来表示设置默认值\n\n----------\n\n```markdown\n在 Micropython 中， 我们常常使用 deinit 来表示析构函数，而不是像 STM32 一样来表示设置默认值\n```\n\n在 Micropython 中， 我们常常使用 deinit 来表示析构函数，而不是像 STM32 一样来表示设置默认值\n\n---------\n\n\n## 目录\n\n* 多种语言分别放在不同的目录，`en`和`zh`目录\n\n* 生成的文档目录在对应语言的文件夹 `SUMMARY.md` 中编辑\n\n* 源文档的文件夹尽量一个功能模块对应一个文件夹，资源文件（图片）放置到对应 md 文档根目录下的 `assets` 文件夹目录下，这样方便中英文文档都引用同样的图片，而且生成的 URL 相同，同时增删修改时更方便。\n* 同时，为了中英文文档都能使用，图片里面尽量不要标注中文或英文，可以标注标号，然后文档用标号阐述， 针对特定语言的图片放到当前路径下的 `assets` 目录：\n\n```\nassets/                                 (放公用的资源文件， 中英文都能引用)\nen/\n   |\n   ----- get_started/\n                  |\n                  ---- assets/          (放get_started目录下md文件的资源文件， 只给英文使用)\n                  |\n                  ---- get_hardware.md\n                  |\n                  ---- how_to_read.md\nzh/\n```\n\n## 文件名\n\n* 文件名除了 `README.md` 特殊，其它文件名使用 小写+下划线 的命名方式，比如 `get_hardware.md`\n\n\n\n## 中英文（多语言）的页面文件目录结构和文件名相同\n\n由于最后生成的页面中有多语言切换选项，点击切换后会直接访问对应语言的相同路径，所以中英文的目录结构和文件名必须相同。\n\n比如英文正在访问 `en/get_started/how_to_read.md`，点击语言切换的按钮后，会自动访问 `zh/get_started/how_to_read.md`，如果这个文件不存在就会报`404`错误！\n\n\n## 目录和链接\n\n尽量引导阅读者使用目录，文内跳转链接慎用，如果链接跳得比较乱，会导致文档看起来比较乱，阅读会比较困难。\n\n## 模块文档内容\n\n* 文件头部包含模块的介绍，资源介绍，使用注意点， 例程\n* 需要分点说明构造函数、函数、常量等\n* **说明不能偷懒只简单将函数名称翻译一遍，需要详细说明函数的功能、参数的取值范围以及注意点**\n\n## 多版本管理\n\n文档除了做了中英文（多语言）支持（不是自动翻译，需要手动修改）， 也做了多版本管理。\n\n每个版本是一个分支， 对分支名字有要求， 分别为：\n* `master` 分支为主分支\n* `dev`分支为开发分支\n* 其它的发布的历史版本均以小写 `v` 开头，比如创建一个分支叫 `v1.2`\n\n创建好新的分支后，需要在每个语言版本的目录下 `book.json`中修改版本链接，不然读者找不到入口\n\n可以在新建的分支下本地预览（预览方法见根目录 `README.md`），注意这时候预览的页面就是当前分支的内容，如果要本地预览其它分支内容，需要先切换到其它分之后再预览即可。\n\n确认无误修改完成后推送分支到远程（github），自动构建系统会自动构建并发布到 pages 分支，等构建完毕访问网址即可看到效果。"}, "/soft/maixpy/zh/index.html": {"title": "MaixPy 文档简介", "content": "---\ntitle: MaixPy 文档简介\nkeywords: maixpy, k210, AIOT, 边缘计算, 人工智能, 深度学习\ndesc: maixpy doc: MaixPy 文档简介\n---\n\n\n<div class=\"title_pic\">\n    <div class=\"logo_maixpy\">\n    <img src=\"./../assets/maixpy/maixpy.png\" alt=\"maixpy logo\">\n    </div>\n    <span class=\"logo_sipeed\">\n    <img src=\"./../assets/sipeed/sipeed_logo_4.svg\" alt=\"sipeed logo\">\n    </span>\n    <span class=\"logo_mpy\">\n    <img src=\"./../assets/maixpy/micropython.png\" alt=\"micropython logo\">\n    </span>\n    <br/>\n</div>\n\n\n\n\n\n\n\n## 关于 MaixPy\n\n\n[**MaixPy**](https://maixpy.sipeed.com/zh/maixpy.sipeed.com) 是将 [Micropython](http://micropython.org/) 移植到 [K210](https://canaan-creative.com/product/kendryteai)（一款 64 位双核带硬件 FPU、卷积加速器、FFT、Sha256 的 RISC-V CPU ） 的一个项目， 支持 MCU 常规操作， 更集成了硬件加速的 `AI` 机器视觉和麦克风阵列，`1TOPS` 算力 核心模块却不到`￥50`， 以快速开发具有极低成本和体积实用的 `AIOT` 领域智能应用。\n\n> MicroPython 是基于 Python3 的语法做的一款解析器，包含了 Python3 的大多数基础语法， 主要运行在性能和内存有限的嵌入式芯片上。（注意 Micropython 不包含 Python3 的所有语法）\n\n\n\n**MaixPy** 让我们在 K210 上编程更加简单快捷， 我们也将源代码开源在 [github](https://github.com/sipeed/MaixPy) 上\n\n使用 MaixPy 可以做很多有趣的事情， 具体可以 [看这里](./what_maix_do.html)\n\n## 简洁的代码实例\n\n比如我们需要扫描 **I2C** 总线上的设备，不需要复杂的开发环境和工程，只需要通过串口发送如下代码即可实现：\n\n```python\nfrom machine import I2C                          # 导入内置库\n\ni2c = I2C(I2C.I2C0, freq=100000, scl=28, sda=29) # 定义一个I2C对象， 使用I2C0, 频率100kHz，SCL引脚是IO28, SDA 引脚是IO29\ndevices = i2c.scan()                             # 调用函数扫描设备\nprint(devices)                                   # 打印设备\n```\n\n同样，我们需要实现一个**呼吸灯**，只需要如下代码：\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](./api_reference/builtin_py/board_info.html)。\n\n```python\nfrom machine import Timer,PWM\nfrom board import board_info\nimport time\n\ntim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PWM)\nch = PWM(tim, freq=500000, duty=50, pin=board_info.LED_G)\nduty=0\ndir = True\nwhile True:\n    if dir:\n        duty += 10\n    else:\n        duty -= 10\n    if duty>100:\n        duty = 100\n        dir = False\n    elif duty<0:\n        duty = 0\n        dir = True\n    time.sleep(0.05)\n    ch.duty(duty)\n```\n\n**实时拍照**：\n\n```python\nimport sensor\nimport image\nimport lcd\n\nlcd.init()\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\nwhile True:\n    img=sensor.snapshot()\n    lcd.display(img)\n```\n\n**AI 物体检测**:\n\n```python\nimport KPU as kpu\nimport sensor\n\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.set_windowing((224, 224))\n\nmodel = kpu.load(\"/sd/mobilenet.kmodel\")  # load model\nwhile(True):\n    img = sensor.snapshot()               # take picture by camera\n    out = kpu.forward(task, img)[:]       # inference, get one-hot output\n    print(max(out))                       # print max probability object ID\n```\nplease read doc before run it!\n\n## 这篇文档的内容\n\n所有关于 MaixPy 的内容， 包括：\n* 如何选择并得到一款合适自己的模块或者开发板\n* 如何开始上手使用\n* 库和接口（API）文档查询\n* 详细的一步一步手把手教程\n* 来自社区的分享（教程或开源项目）\n\n**为了在学习过程中避免遇到难以解决的问题，请务必按照左边目录结构从上到下阅读，特别是写在前面的章节，不要跳过**\n\n\n## 可以运行MaixPy的开发板\n\n首先我们需要选择一款适合自己的开发板，各个型号的 MaixPy 型号请点击：[开发板与配件选购指南](./develop_kit_board/get_hardware.html)，同时目录下也有对应开发板的硬件参数和资料\n\n要获得这些板子，可以访问Sipeed（矽速）官网[www.sipeed.com](https://www.sipeed.com/)，或者[官方淘宝店](https://sipeed.taobao.com/)\n\n\n\n## MaixPy 源码\n\n`MaixPy` 源码是指 运行在 `K210` 上的 `Micropython` 语法解析器， 使用 `C语言` 编写， 源码托管在 [github](https://github.com/sipeed/MaixPy), 如果只是想使用 MaixPy，不需要了解源码， 但是也欢迎给 `MaixPy` 项目一个 `star` ;\n\n如果想参与开发 MaixPy 的内置功能，可以下载进行开发，欢迎大家提交 `PR`\n\n\n本项目主要由 &copy;<a href=\"https://www.sipeed.com\" style=\"color: #f14c42\">Sipeed</a> Co.,Ltd. 维护， 并接受来自开源社区的贡献， 具体贡献这见[贡献者列表](https://github.com/sipeed/MaixPy/graphs/contributors)\n\n## MaixPy 文档源码\n\n\n文档源码托管在 [github](https://github.com/sipeed/MaixPy_DOC)，如果文档有错别字或者改进可以提交PR，PR通过后，文档也会随之更新\n\n注意： 在编辑文档前**必须**看[文档编写规范](./contribute/doc_convention.html)， 只有符合文档规范的修改才会被通过\n\n\n\n## 反馈\n\n关于本文档或者功能或者源码方面的问题，也欢迎提交issue:\n\n* [反馈](https://github.com/sipeed/MaixPy/issues)\n\n\n## 交流\n\n有问题尽量到上面的反馈地址提交`issue`，方便留下记录，其他人也可以查阅，提交前搜索一下是否有人提过相同问题\n\n以下交流方式提供辅助：\n\n<table role=\"table\">\n    <thead>\n        <tr>\n            <th>交流方式</th>\n            <th>地址</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>issue</td>\n            <td><a href=\"https://github.com/sipeed/MaixPy/issues\">https://github.com/sipeed/MaixPy/issues</a></td>\n        </tr>\n        <tr>\n            <td>BBS</td>\n            <td><a href=\"https://bbs.sipeed.com\" rel=\"nofollow\">https://bbs.sipeed.com</a></td>\n        </tr>\n        <tr>\n            <td>MaixPy AI QQ 交流群</td>\n            <td>878189804</td>\n        </tr>\n        <tr>\n            <td>MaixPy AI QQ 交流群(二群)</td>\n            <td>1129095405</td>\n        </tr>\n        <tr>\n            <td>telgram</td>\n            <td><a href=\"https://t.me/sipeed\" rel=\"nofollow\">https://t.me/sipeed</a></td>\n        </tr>\n        <tr>\n            <td>E-mail(商业合作)</td>\n            <td><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"./../assets/sipeed/support_email.jpg\"><img src=\"./../assets/sipeed/support_email.jpg\" alt=\"email\" style=\"max-width:100%;\"></a></td>\n        </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th>网站导航</th>\n            <th>地址</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><strong>MaixPy</strong> 唯一官方文档官网</td>\n            <td><span class=\"limit_width\">中文站: </span><span class=\"\"><a href=\"https://wiki.sipeed.com/soft/maixpy/zh/\" rel=\"nofollow\"><strong>wiki.sipeed.com</strong></a></span></td>\n        </tr>\n        <tr>\n            <td><strong>MaixPy</strong> 例程仓库</td>\n            <td><span class=\"limit_width\">github：</span> <span class=\"\"><a href=\"https://github.com/sipeed/MaixPy_scripts\"><strong>github/maixpy_script</strong></a></span> <br><span class=\"limit_width\">国内：</span><span class=\"\"><a href=\"https://gitee.com/Sipeed/maixpy_scripts\" rel=\"nofollow\"><strong>gitee/maixpy_scripts</strong></a></span></td>\n        </tr>\n        <tr>\n            <td>MaixPy 源码</td>\n            <td><span class=\"limit_width\"></span><span class=\"\"><a href=\"https://github.com/sipeed/MaixPy\"><strong>github: MaixPy</strong></a></span></td>\n        </tr>\n        <tr>\n            <td>开发板资料下载</td>\n            <td><span class=\"limit_width\"></span><span class=\"\"><a href=\"http://dl.sipeed.com/MAIX/HDK\" rel=\"nofollow\"><strong>dl.sipeed.com</strong></a></span></td>\n        </tr>\n        <tr>\n            <td>Sipeed WIKI</td>\n            <td><span class=\"limit_width\"></span><span class=\"\"><a href=\"https://wiki.sipeed.com\" rel=\"nofollow\"><strong>wiki.sipeed.com</strong></a></span></td>\n        </tr>\n    </tbody>\n</table>\n\n------------"}, "/soft/maixpy/zh/update_history.html": {"title": "MaixPy更新历史", "content": "# MaixPy更新历史\n\n## 2021/8/3\n修改了文档中的一些表述问题\n\n## 2021/8/2 \n<br>添加了本地训练的windows的使用教程 \n<br>添加了文档更新历史 \n\n## 2021/7/30 \n更新了常见问题 \n\n## 2021/7/27 \n在0.6.2_57 固件上添加了测试程序"}, "/soft/maixpy/zh/what_maix_do.html": {"title": "MaixPy 能做哪些事", "content": "---\ntitle: MaixPy 能做哪些事\nkeywords: maixpy, k210, AIOT, 边缘计算, 人工智能, 深度学习\ndesc: maixpy doc: MaixPy 能做哪些事\n---\n\n\n大多数是在 MaixPy 上已经有 API， 部分可能来自 [Maixduino](./../../maixduino/zh/index.html) 或者其它开发者～\n\n\n## 人脸检测\n\n<iframe style src=\"//player.bilibili.com/player.html?aid=48648880&cid=85194253&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n\n## MobileNet 物体识别\n\n<iframe src=\"//player.bilibili.com/player.html?aid=46664014&cid=81743560&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## tiny yolov2 20分类\n\n<iframe src=\"//player.bilibili.com/player.html?aid=50442796&cid=88307224&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 人脸识别\n\n<iframe src=\"//player.bilibili.com/player.html?aid=77466790&amp;cid=132521878&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 情绪识别\n\n<iframe src=\"//player.bilibili.com/player.html?aid=627513525&bvid=BV1Jt4y1i755&cid=247518143&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 识别颜色值、找形状、找直线、面部识别等\n\n<iframe src=\"//player.bilibili.com/player.html?aid=48652548&cid=85200171&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n视频来自 [Hardware.ai](https://www.youtube.com/channel/UCCBSoR9ZO0Uj7W6jH9Y317g)\n\n## MNIST 手写数字识别\n\n<iframe src=\"//player.bilibili.com/player.html?aid=46663492&cid=81742916&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 车牌识别\n\n<iframe src=\"//player.bilibili.com/player.html?aid=628060482&bvid=BV1it4y1Y7zc&cid=263532620&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 分拣系统\n\n<iframe src=\"//player.bilibili.com/player.html?aid=927463889&bvid=BV1pT4y1w7Aq&cid=246175512&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## Feature map 显示\n\n<iframe src=\"//player.bilibili.com/player.html?aid=44971536&cid=78764427&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 视频播放和录制\n\n<iframe src=\"//player.bilibili.com/player.html?aid=44971751&cid=78764762&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n\n\n## NES 游戏模拟器 （FC 红白机）\n\n<iframe src=\"//player.bilibili.com/player.html?aid=48653991&cid=85202525&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n\n## GBA 游戏模拟器\n\n<iframe src=\"//player.bilibili.com/player.html?aid=48654358&cid=85203041&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n[源码](https://github.com/44670/mgba-k210)\n\n\n\n## 游戏 Quake I\n\n<iframe src=\"//player.bilibili.com/player.html?aid=48656943&cid=85206864&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n[源码](https://github.com/elect-gombe/quake-k210)\n\n## MMD 3D 实时渲染\n\n<iframe src=\"//player.bilibili.com/player.html?aid=48656998&cid=85206967&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n[源码](https://github.com/elect-gombe/k210_mmd)\n\n## GUI 界面 littlevGL\n\n<iframe  src=\"//player.bilibili.com/player.html?aid=48653253&cid=85201363&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 云台脸部跟踪\n\n<iframe  src=\"//player.bilibili.com/player.html?aid=36466137&cid=64024878&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 麦克风阵列\n\n<iframe  src=\"//player.bilibili.com/player.html?aid=37058760&cid=65120313&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## FFT 频谱图\n\n<iframe  src=\"//player.bilibili.com/player.html?aid=44617696&cid=78104545&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>"}, "/soft/maixpy/zh/modules/sp_mod/sp_lcd1.14.html": {"title": "SP_LCD1.14 的使用", "content": "---\ntitle: SP_LCD1.14 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SP_LCD1.14 的使用\n---\n\n\n<img src=\"../../../assets/hardware/module_spmod/sp_lcd1.14.png\"/>\n\nSP_LCD 拥有一块1.14’寸 LCD， 8P FPC(0.5mm 间距)接口的 TFT 液晶屏，180°可视角.\n\n## 参数\n\n* 屏幕大小: 1.14 英寸\n* 分辨率: 240*135\n* 色彩: 132 个 RGB 通道\n* 通信接口: SPI\n* 有效显示区域:21.7mm * 10.8mm\n* 工作电压: 2.5V~4.8V\n* 工作温度: -30°C~85°C\n\n模块详细信息请参考[LCD1.14 规格书与数据手册](https://api.dl.sipeed.com/fileList/MAIX/HDK/Spmod_EN/SP-LCD1.14%20Datasheet%20V1.0.pdf)\n\n## 使用方法\n\n1. 准备: 已烧录最新固件的开发板, sp_lcd114 模块.\n\n2. 运行: 连接模块, 修改[示例代码](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/spmod/sp_lcd114)中 config 包围的配置, 运行后模块将显示图片.\n\n程序如下:\n\n```python\n# init\nips = SPLCD114(spi1, cs, dc, rst, busy, IPS_WIDTH, IPS_HEIGHT, IPS_MODE)\n\n# create an 'image' and fill it\nimg = image.Image()\nimg.draw_rectangle(80, 80, 30, 30)\n\n# display\nips.display(img)\n```\n\n主要步骤为:\n\n* 初始化(参数从左到右为: SPI 对象, 片选脚, 复位脚, 忙标志脚, 屏幕宽, 屏幕高度, 屏幕方向).\n\n* 创建 Image.\n  \n* 调用 display 显示图片(传入参数为 Image 对象)."}, "/soft/maixpy/zh/modules/sp_mod/sp_lora.html": {"title": "SP_LORA 的使用", "content": "---\ntitle: SP_LORA 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SP_LORA 的使用\n---\n\n\n<img src=\"../../../assets/hardware/module_spmod/sp_lora.png\"/>\n\nSP_LoRa 模块使用 M-XL8 模组, 其内置 LoRaTM 调制解调器和可调功率放大器的 LoRa 模块, 具有高性能和高可靠性.\n\n## 参数\n\n* 工作频段: 370MHz~1200Mhz\n* 发射功率: 20dBm(最大)\n* 通信接口: SPI\n* 天线: 外置天线,IPEX 或焊接\n* 接收灵敏度: -148dbm\n* RSSI 动态范围: 127dB\n* 工作电压: 1.8V~6.3V\n* 工作温度: -40°C~80°C\n\n模块详细信息请参考[LoRa 规格书与数据手册](https://api.dl.sipeed.com/fileList/MAIX/HDK/Spmod_EN/SP-LoRa%20Datasheet%20V1.0.pdf)\n\n## 使用方法\n\n1. 准备: 两块已烧录最新固件的开发板, 两个 sp_lora 模块.\n\n2. 运行: 连接模块, 修改[示例代码](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/spmod/sp_lora)中 config 包围的配置, 两块开发板分别运行发送和接收函数, 即可在终端查看收发信息.\n\n程序如下:\n\n```python\n# init\nlora = SX127x(spi=spi1, pin_ss=cs)\n\n# lora reset\nrst.value(0)\ntime.sleep_ms(10)\nrst.value(1)\ntime.sleep_ms(100)\nlora.init()\n\n####### receiver ###########\nreceive(lora)\n\n######## sender ###########\n# send(lora)\n\n'''output\nmpfs [/flash]> runfile lora_send.py\n    transfer 6400 of 14576\n    transfer 12800 of 14576\n    transfer 14576 of 14576\n[Warning] function is used by fm.fpioa.GPIOHS7(pin:23)\nLoRa Sender\nSending packet:\nHello(0)\n\nmpfs [/sd]> runfile lora_recv.py\n    transfer 6400 of 14576\n    transfer 12800 of 14576\n    transfer 14576 of 14576\n[Warning] function us used by fm.fpioa.GPIOHS7(pin:23)\nLoRa Receiver\n[Memory - free: 470080 allocated: 48064]\n*** Received message ***\nHello(0)\nwith RSSI: <bound_method 800d19e0 <SX127x object at 800f5700>.<function packetRssi at 0x800d3180>>\n'''\n```\n\n这里使用的调试运行工具为 mpfshell 方便同时打开两个终端运行脚本.\n\n主要步骤为:\n\n* 创建 LoRa 对象(参数为: SPI 对象, 片选脚)\n\n* 复位(将复位引脚拉低有拉高), 初始化.\n  \n* 开始发送或接收."}, "/soft/maixpy/zh/modules/sp_mod/sp_rfid.html": {"title": "SP_RFID 的使用", "content": "---\ntitle: SP_RFID 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SP_RFID 的使用\n---\n\n\n<img src=\"../../../assets/hardware/module_spmod/sp_rfid.png\"/>\n\n该模块所采用的 FM17510 是一款高度集成的工作在 13.56MHz 下的非接触读写器芯片. 支持符合 ISO/IEC 14443 TypeA 协议的非接触读写器模式, 并且程序与 MFRC522 兼容.\n\n## 参数\n\n* 支持 ISO/IEC 14443 TypeA 读写器模式\n* 读写器模式支持 M1 加密算法\n* ISO14443 TYPEA 支持通讯速率 106kbps,212kbps,424kbps\n* 支持 SPI 串行接口,最高 10Mbps\n* 电压范围 2.2V~3.6V\n* 64Byte 收发缓冲 FIFO\n* 多种低功耗模式:Soft powerdown 模式 Hard powerdown 模式\n* 内置 CRC 协处理器\n* 支持低功耗外部卡片侦测功能\n* 工作电压: 2.2V~3.6V\n* 工作温度: -40°C~85°C\n\n模块详细信息请参考[RFID 规格书与数据手册](https://api.dl.sipeed.com/fileList/MAIX/HDK/Spmod_EN/SP-RFID%20Datasheet%20V1.0.pdf)\n\n## 使用方法\n\n1. 准备: 已烧录最新固件的开发板, sp_rfid 模块, M1 卡片.\n\n2. 运行: 连接模块, 修改[示例代码](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/spmod/sp_rfid)中 config 包围的配置, 运行后将卡片靠近模块天线, 可看到终端打印的读卡信息.\n\n程序如下:\n\n```python\n# Init module\nMIFAREReader = MFRC522(spi1, cs)\n# Scan for cards\n(status, ataq) = MIFAREReader.MFRC522_Request(MIFAREReader.PICC_REQALL)\n# Get uid\n(status, uid) = MIFAREReader.MFRC522_Anticoll()\nif status == MIFAREReader.MI_OK:\n    # Bind card by uid\n    MIFAREReader.MFRC522_SelectTag(uid)\n    # Authenticate block 0x11 by key\n    status = MIFAREReader.MFRC522_Auth(MIFAREReader.PICC_AUTHENT1A, 0x11, key, uid)\n    if status == MIFAREReader.MI_OK:\n        # Write 16 bytes from block 0x11\n        MIFAREReader.MFRC522_Write(0x11, data)\n        # Read 16 bytes from block 0x11\n        MIFAREReader.MFRC522_Read(0x11)\n        \n'''output\n>>> [Warning] function is used by fm.fpioa.GPIOHS20(pin:36)\nWelcome to the MFRC522 data read/write example\nCard detected type:  0x400\nCard read UID: 110,159,46,15\nSize:  8\nSector 11 will now be filled with 1~16:\n4 backdata &0x0F == 0x0A 10\nData written\nstart to read\nSector 18 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nCard detected type:  0x400\nCard read UID: 110,159,46,15\nSize:  8\nSector 11 will now be filled with 1~16:\n4 backdata &0x0F == 0x0A 10\nError while writing\nData written\n'''\n```\n\n主要分为几步:\n\n* 创建 MFRC522 对象(参数为: SPI 对象, 片选脚).\n\n* 扫描卡片并获取到 ATQA(即卡片类型码), ATQA 对应卡片类型如下:\n\n\n  |  ATQA  | Type               |\n  | :----: | :----------------- |\n  | 0x4400 | Mifare_UltraLight  |\n  | 0x0400 | Mifare_One(M1 S50) |\n  | 0x0200 | Mifare_One(M1 S70) |\n  | 0x0800 | Mifare_Pro(X)      |\n  | 0x4403 | Mifare_DESFire     |\n  \n* 获取卡片 UID\n\n* 通过 UID 绑定卡片(防碰撞, 确保所选卡能正确执行交易, 不受现场另一张卡的影响)\n\n* 对卡片中某一扇区进行身份验证(M1(S50)默认密码为16个0xff)\n\n* 读/写卡片信息(以一个块(16字节)为基本读写单位)"}, "/soft/maixpy/zh/modules/sp_mod/sp_bt.html": {"title": "SP_BT 的使用", "content": "---\ntitle: SP_BT 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SP_BT 的使用\n---\n\n\n<img src=\"../../../assets/hardware/module_spmod/sp_bt.png\"/>\n\nSP_BT 是一款蓝牙串口透传模块， 具备超低功率特性和高可靠性， 使用 AT 指令进行控制， 蓝牙版本为 BLE 5.0(兼容BLE4.0, BLE4.2), 默认串口波特率为9600.\n\n## 参数\n\n* 接收灵敏度: -97dm\n* 发射功率: 4db(最大)\n* 通信接口: UART\n* 天线: 板载天线\n* 主从支持: 从机\n* 工作频段: 2.4G\n* 工作温度: -40°C~85°C\n* 工作电压: 1.8V~3.6V\n\n模块详细信息请参考[BT 规格书与数据手册](https://api.dl.sipeed.com/fileList/MAIX/HDK/Spmod_EN/SP-BT%20Datasheet%20V1.0.pdf)\n\n## 使用说明\n\n1. 准备: 已烧录最新固件的开发板, sp_bt 模块, 蓝牙调试助手.\n\n2. 运行: 连接模块, 修改[示例代码](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/spmod/sp_bt)中 config 包围的配置, 运行后使用蓝牙调试助手连接并发送数据, 即可在终端查看收发信息.\n\n程序如下:\n\n```python\n# set uart rx/tx func to io_6/7\nfm.register(TX, fm.fpioa.UART1_TX)\nfm.register(RX, fm.fpioa.UART1_RX)\n# init uart\nuart = UART(UART.UART1, 9600, 8, 1, 0, timeout=1000, read_buf_len=4096)\n\nset_name(uart, name)\nprint(\"wait data: \")\nwhile True:\n  read_data = uart.read()\n  if read_data:\n      print(\"recv:\", read_data)\n      uart.write(read_data)  # send data back\n      print(\"wait data: \")\n```\n\n主要步骤为:\n\n* 初始化串口(波特率为模块默认波特率9600)\n\n* 设置模块广播名\n\n* 等待连接, 接收数据打印后发送回去\n\n## 连接过程\n\n* 模块初始化后处于未连接状态(指示灯: ACT 闪烁, STA 常灭).\n  \n* 蓝牙调试助手连接后模块变为已连接(指示灯: ACT 常亮, STA 常亮).\n  \n* 连接后蓝牙调试助手会显示的服务如下图:\n  \n  <img src=\"../../../assets/hardware/module_spmod/sp_bt_screenshot.png\" alt=\"bt_server\"/>\n  \n  上图中可以看到有一个 UUID 为 ffe0 的服务有两个特征, 打开透传(ffe1)的 Write, Notify, 便可以开始发送/接收数据."}, "/soft/maixpy/zh/modules/sp_mod/README_copy.html": {"title": "SP-MOD", "content": "---\ntitle: SP-MOD\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SP-MOD\n---\n\n\n## SP-MOD 接口\n\nSP-MOD 即为 sipeed module, simplify PMOD, super module，Sipeed 官方主推使用，8P 2.54mm 2x4 双排排母，支持通讯协议如下：\n\n![](./../../../assets/hardware/module_spmod/sp_mod.svg)\n\n## 外设模块\n\n以下模块均采用 SP-MOD 标准接口的模块。\n\n* [SP_BT 蓝牙透传](./sp_bt.html)\n* [SP_LoRa 无线通信](./sp_lora.html)\n* [SP_RFID 射频识别](./sp_rfid.html)\n* [SP_TOF 测距](./sp_tof.html)\n* [SP_Eink 电子墨水屏](./sp_eink.html)\n* [SP_LCD1.14 IPS屏](./sp_lcd1.14.html)\n* [SP_Weather 气象传感](./sp_weather.html)\n* [SP_Ethernet 有线网口](./sp_ethernet.html)"}, "/soft/maixpy/zh/modules/sp_mod/sp_eink.html": {"title": "SP_EINK 的使用", "content": "---\ntitle: SP_EINK 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SP_EINK 的使用\n---\n\n\n<img src=\"../../../assets/hardware/module_spmod/sp_eink.png\"/>\n\nSP_EINK 模块所采用的 GDEW0154M09 是一款 1.54”, 拥有 24P FPC(0.5mm 间距)接口的电子墨水屏.\n\n## 参数\n\n* 屏幕大小: 1.54 英寸\n* 有效显示区域: 27.6mm * 27.6mm\n* 色彩: 黑/白/红显示\n* 通信接口: SPI\n* 工作温度: -40°C~85°C\n* 工作电压: 2.3V~3.6V\n\n模块详细信息请参考[EINK 规格书与数据手册](https://api.dl.sipeed.com/fileList/MAIX/HDK/Spmod_EN/SP-EINK%20Datasheet%20V1.0.pdf)\n\n## 使用方法\n\n1. 准备: 已烧录最新固件的开发板, sp_eink 模块.\n\n2. 运行: 连接模块, 修改[示例代码](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/spmod/sp_eink)中 config 包围的配置, 运行后模块将显示图片.\n\n程序如下:\n\n```python\n# init\nepd = SPEINK(spi1, cs, dc, rst, busy, EPD_WIDTH, EPD_HEIGHT)\nepd.init()\n\n# create red image\nimg_r = image.Image()\nimg_r = img_r.resize(EPD_WIDTH, EPD_HEIGHT)\nimg_r.draw_line(0, 0, 100, 100)\n\n# create black/white image\nimg_bw = image.Image()\nimg_bw = img_bw.resize(EPD_WIDTH, EPD_HEIGHT)\nimg_bw.draw_line(100, 50, 200, 100)\n\n# display\nepd.display(img_r, img_bw)\n\n# sleep mode\nepd.sleep()\n```\n\n主要步骤如下:\n\n* 创建 SPEINK 对象(参数为: SPI 对象, 片选脚, 复位脚, 忙标志脚, 横向分辨率, 纵向分辨率, 屏幕旋转角度(0, 90, 180, 270)), 初始化.\n\n* 创建红色和黑色图像, 设置为屏幕大小并填充图像.\n\n* 调用 display(参数依次为: 红色图像, 黑色图像), 此时屏幕将会闪烁并显示图像.\n  \n* 进入睡眠状态."}, "/soft/maixpy/zh/modules/sp_mod/sp_weather.html": {"title": "SP_WEATHER 的使用", "content": "---\ntitle: SP_WEATHER 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SP_WEATHER 的使用\n---\n\n\n<img src=\"../../../assets/hardware/module_spmod/sp_weather.png\"/>\n\nSP_Weather 气象模块拥有两颗传感器, 磁性传感器 QMC7983, 这是一个内置灵敏度补偿与 NTC 的三轴磁性传感器, 具有出色的动态范围和精度以及超低的功耗. 温湿度气压传感器 BME280, 能够同时测量温湿度以及气压.\n\n## 参数\n\n### 磁性传感器 QMC7983\n\n* 磁感应量程: ±30 高斯\n* 精度: 每 LSB 1mG\n* RMS 噪声: 2mG\n* 对外接口: I2C, 默认地址 0x2C,可通过选择电阻调节\n* 工作电压: 2.6V~3.6V\n* 工作温度: -30°C ~ 85°C\n\n### 温湿度气压传感器 BME280\n\n* 温度传感器的关键参数\n  * 测量范围: -40°C~85\n  * 精度:\n  \n|范围(°C)|误差值(°C)|\n|:----:|:----:|\n|25|±0.5|\n|0~65|±1.0|\n|-20~0|±1.25|\n|-40~-20|±1.5|\n\n* 湿度传感器的关键参数\n  * 响应时间(τ63%): 1 s\n  * 精度公差: ±3% 相对湿度\n  * 磁滞: ±1% 相对湿度\n* 气压传感器的关键参数\n  * RMS 噪声: 0.2Pa(相当于 1.7cm)\n  * 偏移温度系数: ±1.5 Pa/K(相当于 1℃ 温度变化时为 ±12.6cm)\n* 对外接口: I2C,默认地址 0x76,可通过选择电阻调节\n* 工作电压: 1.71V~3.6V\n* 工作温度: -30°C ~ 85°C\n\n模块详细信息请参考[气象模块规格书与数据手册](https://api.dl.sipeed.com/fileList/MAIX/HDK/Spmod_EN/SP-WEATHER%20Datasheet%20V1.0.pdf)\n\n## 使用方法\n\n1. 准备: 已烧录最新固件的开发板, sp_weather 模块.\n\n2. 运行: 连接模块, 修改[示例代码](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/spmod/sp_weather)中 config 包围的配置, 运行后可看到终端打印的磁性传感器和气压温湿度传感器数据\n\n输出结果如下:\n\n```python\n\n'''output\n>>> I2C devices:[44, 118]\n0x32\n6\n(228, 123, 156)\n('31.0C', '1017.75hPa', '34.32%')\n(235, 130, 185)\n('30.75C', '1017.74hPa', '34.31%')\n(235, 130, 161)\n('30.7C', '1017.82hPa', '34.32%')\n'''\n```\n\n主要步骤为:\n\n* 创建 SPWEATHE(参数为: I2C 对象).\n\n* 读取磁力传感器数据和温湿度数据.(读取到的数据均为元组)"}, "/soft/maixpy/zh/modules/sp_mod/sp_tof.html": {"title": "SP_TOF 的使用", "content": "---\ntitle: SP_TOF 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SP_TOF 的使用\n---\n\n\n<img src=\"../../../assets/hardware/module_spmod/sp_tof.png\"/>\n\nSP_TOF 所采用的 VL53L0X 是新一代飞行时间(ToF)激光测距模块, 无论目标反射率如何, 都能提供精确的距离测量, 搭配的红色激光瞄头辅助观察测距点.\n\n## 参数\n\n* 测量距离: 最大 2000mm(较暗环境), 1000mm(明亮环境)\n* 工作刷新率: 50Hz\n* 测量角度: 27°(正面)\n* 通信接口: I2C\n* 工作电压: 2.6V~3.5V\n* 工作温度: -40°C~80°C\n\n模块详细信息请参考[TOF 规格书与数据手册](https://api.dl.sipeed.com/fileList/MAIX/HDK/Spmod_EN/SP-ToF(1P)%20Datasheet%20V1.0.pdf)\n\n## 使用方法\n\n1. 准备: 已烧录最新固件的开发板, sp_tof 模块.\n\n2. 运行: 连接模块, 修改[示例代码](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/spmod/sp_tof)中 config 包围的配置, 运行后将激光瞄头对准测量点, 可看到终端打印的距离信息.\n\n程序如下:\n\n```python\n# create obj and read distance\ntof = VL53L0X(i2c)\nwhile True:\n    mm = tof.read()\n    utime.sleep_ms(100)\n    print(mm)\n\n'''output\n>>> [41]\n536mm\n538mm\n533mm\n535mm\n529mm\n532mm\n'''\n```\n\n主要步骤为:\n\n* 创建 TOF 对象(参数为: I2C 对象).\n\n* 读取距离, 若读取距离为 8190, 则说明已经超出量程."}, "/soft/maixpy/zh/modules/sp_mod/sp_ethernet.html": {"title": "SP_Ethernet 的使用", "content": "---\ntitle: SP_Ethernet 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SP_Ethernet 的使用\n---\n\n\n<img src=\"../../../assets/hardware/module_spmod/sp_ethernet.png\">\n\n该模块采用 W5500作为主控芯片，这是一款集成全硬件 TCP/IP 协议栈的嵌入式以太网控制器。\n\n## 参数\n\n* 工作电压：2.6V~3.6V\n* 工作电流：<132mA\n* 休眠电流：<15mA\n* 通讯接口：SPI\n* 工作温度范围：-40℃ ~ 85℃\n\n模块详细信息请参考[Ethernet 规格书](https://api.dl.sipeed.com/fileList/MAIX/HDK/Spmod_EN/SP-Ethernet%20Datasheet%20V1.0.pdf)\n\n## 使用方法\n\n1. 准备: 已烧录最新固件的开发板, sp_ethernet 模块， 网线。\n2. 运行: 连接模块, 修改[示例代码](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/spmod/sp_ethernet)中 config 包围的配置, 运行后模块将打印通信数据。\n\n程序如下：\n\n```python\nspi1 = SPI(4, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n            polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=WIZNET5K_SPI_SCK, mosi=WIZNET5K_SPI_MOSI, miso = WIZNET5K_SPI_MISO)\n\n#  create wiznet5k nic\nnic = network.WIZNET5K(spi = spi1, cs = WIZNET5K_SPI_CS)\nprint(\"Static IP: \", nic.ifconfig())\n```\n\n* 创建 SPI 并使用 SPI 创建 WIZNET5K 有线网卡\n* 打印当前 IP 信息\n\n相关 API 参考: [wiznet5k API](../../api_reference/machine/network.html#wiznet5k)"}, "/soft/maixpy/zh/modules/sp_mod/index.html": {"title": "SP-MOD", "content": "---\ntitle: SP-MOD\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SP-MOD\n---\n\n\n## SP-MOD 接口\n\nSP-MOD 即为 sipeed module, simplify PMOD, super module，Sipeed 官方主推使用，8P 2.54mm 2x4 双排排母，支持通讯协议如下：\n\n![](./../../../assets/hardware/module_spmod/sp_mod.svg)\n\n## 外设模块\n\n以下模块均采用 SP-MOD 标准接口的模块。\n\n* [SP_BT 蓝牙透传](./sp_bt.html)\n* [SP_LoRa 无线通信](./sp_lora.html)\n* [SP_RFID 射频识别](./sp_rfid.html)\n* [SP_TOF 测距](./sp_tof.html)\n* [SP_Eink 电子墨水屏](./sp_eink.html)\n* [SP_LCD1.14 IPS屏](./sp_lcd1.14.html)\n* [SP_Weather 气象传感](./sp_weather.html)\n* [SP_Ethernet 有线网口](./sp_ethernet.html)"}, "/soft/maixpy/zh/modules/on_chip/uart.html": {"title": "UART 的使用", "content": "---\ntitle: UART 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: UART 的使用\n---\n\n\n关于 UART 详细介绍请参考[UART-API 文档](./../api_reference/machine/uart.html).\n\n## 使用方法\n\n* 从 machine 导入 UART 模块\n\n```python\nfrom machine import UART\n```\n\n* 配置使用到的 pin 脚为 UART 功能\n\n```python\nfm.register(10, fm.fpioa.UART1_TX, force=True)\nfm.register(11, fm.fpioa.UART1_RX, force=True)\n```\n\n* 创建 UART 对象\n\n```python\nuart = UART(UART.UART1, 115200, 8, 1, 0, timeout=1000, read_buf_len=4096)\n```\n\n* 读写数据\n\n```python\nuart.write(b'hello world')\nread_data = uart.read()\n```\n\n## 示例\n\n将串口接收到的数据发送回去\n\n```python\nfrom machine import UART\nfrom board import board_info\nfrom fpioa_manager import fm\n\n# maixduino board_info PIN10/PIN11/PIN12/PIN13 or other hardware IO 12/11/10/3\nfm.register(board_info.PIN10, fm.fpioa.UART1_TX, force=True)\nfm.register(board_info.PIN11, fm.fpioa.UART1_RX, force=True)\nfm.register(board_info.PIN12, fm.fpioa.UART2_TX, force=True)\nfm.register(board_info.PIN13, fm.fpioa.UART2_RX, force=True)\n\nuart_A = UART(UART.UART1, 115200, 8, 0, 0, timeout=1000, read_buf_len=4096)\nuart_B = UART(UART.UART2, 115200, 8, 0, 0, timeout=1000, read_buf_len=4096)\n\nwrite_str = 'hello world'\nfor i in range(20):\n    uart_A.write(write_str)\n    if uart_A.any():\n        read_data = uart_B.read()\n        if read_data:\n            read_str = read_data.decode('utf-8')\n            print(\"string = \", read_str)\n            if read_str == write_str:\n                print(\"baudrate:115200 bits:8 parity:0 stop:0 ---check Successfully\")\n\nuart_A.deinit()\nuart_B.deinit()\ndel uart_A\ndel uart_B\n\n```"}, "/soft/maixpy/zh/modules/on_chip/spi.html": {"title": "SPI 的使用", "content": "---\ntitle: SPI 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: SPI 的使用\n---\n\n\n关于 SPI 详细介绍请参考[SPI-API 文档](../../api_reference/machine/spi.html).\n\n## 使用方法\n\n### 主机模式\n\n* 从 machine 导入 SPI 模块\n\n```python\nfrom machine import SPI\n```\n\n* 配置使用到的 pin 脚为片选 GPIO 功能和 SPI 功能.\n\n```python\nfm.register(25,fm.fpioa.GPIOHS10, force=True)#cs\ncs = GPIO(GPIO.GPIOHS10, GPIO.OUT)\n\nfm.register(28,fm.fpioa.SPI1_D0, force=True)#mosi\nfm.register(26,fm.fpioa.SPI1_D1, force=True)#miso\nfm.register(27,fm.fpioa.SPI1_SCLK, force=True)#sclk\n```\n\n* 创建 SPI 对象\n\n```python\nspi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=10000000, polarity=0, phase=0, bits=8, firstbit=SPI.MSB)\n```\n\n* 使用片选 GPIO 选中从机, 通过 SPI 读写数据\n\n```python\ncs.value(0)\nspi1.write_readinto(w, r)\ncs.value(1)\n```\n\n### 从机模式\n\nK210 SPI 从机模式只支持三线通信，因此 MaixPy 中并没有实现该模式，需要从机模式可参考[SPI_SLAVE 裸机实现](https://github.com/kendryte/kendryte-standalone-demo/tree/develop/spi_slave)。\n\n## 示例\n\n* 选中片选 GPIO 对应从机并收发数据\n\n```python\nfrom machine import SPI\nfrom fpioa_manager import fm\nfrom Maix import GPIO\n\nfm.register(25,fm.fpioa.GPIOHS10, force=True)#cs\ncs = GPIO(GPIO.GPIOHS10, GPIO.OUT)\n\nfm.register(28,fm.fpioa.SPI1_D0, force=True)#mosi\nfm.register(26,fm.fpioa.SPI1_D1, force=True)#miso\nfm.register(27,fm.fpioa.SPI1_SCLK, force=True)#sclk\n\nspi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=10000000, polarity=0, phase=0, bits=8, firstbit=SPI.MSB)\n\nw = b'\\xFF'\nr = bytearray(1)\n\ncs.value(0)\nprint(spi1.write_readinto(w, r))\ncs.value(1)\n```"}, "/soft/maixpy/zh/modules/on_chip/i2s.html": {"title": "I2S（集成电路内置音频总线）的使用", "content": "---\ntitle: I2S（集成电路内置音频总线）的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: I2S（集成电路内置音频总线）的使用\n---\n\n\n关于 I2S 音频总线详细介绍请参考[I2S-API 文档](./../../api_reference/Maix/i2s.html).\n\n## 使用方法\n\n* 从 Maix 导入 I2S 模块\n\n```python\nfrom Maix import I2S\n```\n\n* 创建 I2S 对象\n\n```python\ni2s_dev = I2S(device_num)\n```\n\n* 配置参数\n\n```python\ni2s_dev.channel_config(rx.CHANNEL_0, rx.RECEIVER, align_mode = I2S.STANDARD_MODE)\ni2s_dev.set_sample_rate(sample_rate)\n```\n\n* 读取或播放数据\n\n```python\ni2s_dev.record(256)#sampling points number must be smaller than 256\n```\n\n## 例程\n\n采集数据并直接播放\n\n```python\nfrom Maix import I2S\nimport time\nfrom fpioa_manager import *\n\nfm.register(20,fm.fpioa.I2S0_IN_D0)#GO\nfm.register(19,fm.fpioa.I2S0_WS)\nfm.register(18,fm.fpioa.I2S0_SCLK)\nfm.register(34,fm.fpioa.I2S2_OUT_D1)\nfm.register(35,fm.fpioa.I2S2_SCLK)\nfm.register(33,fm.fpioa.I2S2_WS)\nsample_rate = 44*1000\nrx = I2S(I2S.DEVICE_0)\nrx.channel_config(rx.CHANNEL_0, rx.RECEIVER, align_mode = I2S.STANDARD_MODE)\nrx.set_sample_rate(sample_rate)\ntx = I2S(I2S.DEVICE_2)\ntx.channel_config(tx.CHANNEL_1, tx.TRANSMITTER, align_mode = I2S.RIGHT_JUSTIFYING_MODE)\ntx.set_sample_rate(sample_rate)\nwhile True:\n    audio = rx.record(256)#sampling points number must be smaller than 256\n    tx.play(audio)\n```"}, "/soft/maixpy/zh/modules/on_chip/wdt.html": {"title": "WDT（看门狗） 的使用", "content": "---\ntitle: WDT（看门狗） 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: WDT（看门狗） 的使用\n---\n\n\n关于 WDT 详细介绍请参考[WDT API 文档](../../api_reference/machine/wdt.html).\n\n## 使用方法\n\n看门狗主要用于保护系统正常运行，作用原理为，看门狗启动后，程序中必须定时执行一个喂狗的操作，当系统受到干扰不能正常运行时，喂狗操作也不能定时执行，此时看门狗将产生内部复位，使系统重新开始工作。\n\n* 从 machine 导入 WDT 模块\n\n```python\nfrom machine import WDT\n```\n\n* 定义回调函数，创建 WDT 对象\n\n```python\ndef on_wdt(self):\n    print(self.context(), self)\n    #self.feed()\n    ## release WDT\n    #self.stop()\n\n# test callback wdt\nwdt1 = WDT(id=1, timeout=4000, callback=on_wdt, context={})\n```\n\n* 喂狗\n\n```python\nwdt1.feed()\n```\n\n*可以在回调函数中执行喂狗操作*\n\n* 关闭看门狗\n\n```python\nwdt1.stop()\n```\n\n## 示例\n\n1. 喂一次狗后关闭\n2. 不喂狗使得系统复位\n\n```python\nimport time\nfrom machine import WDT\n\n# '''\n# test default wdt\nwdt0 = WDT(id=0, timeout=3000)\nprint('into', wdt0)\ntime.sleep(2)\nprint(time.ticks_ms())\n# 1.test wdt feed\nwdt0.feed()\ntime.sleep(2)\nprint(time.ticks_ms())\n# 2.test wdt stop\nwdt0.stop()\nprint('stop', wdt0)\n# 3.wait wdt work\n#while True:\n    #print('idle', time.ticks_ms())\n    #time.sleep(1)\n# '''\n\n# '''\ndef on_wdt(self):\n    print(self.context(), self)\n    #self.feed()\n    ## release WDT\n    #self.stop()\n\n# test callback wdt\nwdt1 = WDT(id=1, timeout=4000, callback=on_wdt, context={})\nprint('into', wdt1)\ntime.sleep(2)\nprint(time.ticks_ms())\n# 1.test wdt feed\nwdt1.feed()\ntime.sleep(2)\nprint(time.ticks_ms())\n# 2.test wdt stop\nwdt1.stop()\nprint('stop', wdt1)\n# 3.wait wdt work\n#while True:\n    #print('idle', time.ticks_ms())\n    #time.sleep(1)\n# '''\n\n#'''\n## test default and callback wdt\ndef on_wdt(self):\n    print(self.context(), self)\n    #self.feed()\n    ## release WDT\n    #self.stop()\n\nwdt0 = WDT(id=0, timeout=3000, callback=on_wdt, context=[])\nwdt1 = WDT(id=1, timeout=4000, callback=on_wdt, context={})\n## 3.wait wdt work\nwhile True:\n    #wdt0.feed()\n    print('idle', time.ticks_ms())\n    time.sleep(1)\n#'''\n\n'''output\ninto [MAIXPY]WDT:(800cc560; id=0, timeout=3000, callback=800abcf8, context=800abcf8)\n550247\n552247\nstop [MAIXPY]WDT:(800cc560; id=0, timeout=3000, callback=800abcf8, context=800abcf8)\ninto [MAIXPY]WDT:(800cc5e0; id=1, timeout=4000, callback=800cc5a0, context=800cc5c0)\n554261\n556261\nstop [MAIXPY]WDT:(800cc5e0; id=1, timeout=4000, callback=800cc5a0, context=800cc5c0)\nidle 556268\nidle 557269\nidle 558269\n[] [MAIXPY]WDT:(800cc680; id=0, timeout=3000, callback=800cc620, context=800cc640)\nidle 559275\n{} [MAIXPY]WDT:(800cce40; id=1, timeout=4000, callback=800cc620, context=800cc6c0)\nidle 560282\nidle 561283\n\n[MAIXPY] Pll0:freq:806000000\n[MAIXPY] Pll1:freq:398666666\n[MAIXPY] Pll2:freq:45066666\n[MAIXPY] cpu:freq:403000000\n[MAIXPY] kpu:freq:398666666\n[MAIXPY] Flash:0xef:0x17\n[MaixPy] gc heap=0x800c9850-0x80149850(524288)\n[MaixPy] init end\n\n __  __              _____  __   __  _____   __     __\n|  \\/  |     /\\     |_   _| \\ \\ / / |  __ \\  \\ \\   / /\n| \\  / |    /  \\      | |    \\ V /  | |__) |  \\ \\_/ /\n| |\\/| |   / /\\ \\     | |     > <   |  ___/    \\   /\n| |  | |  / ____ \\   _| |_   / . \\  | |         | |\n|_|  |_| /_/    \\_\\ |_____| /_/ \\_\\ |_|         |_|\n\nOfficial Site : https://www.sipeed.com\nWiki          : https://maixpy.sipeed.com\n\nMicroPython v0.5.1-174-gf18990aa3-dirty on 2021-01-11; Sipeed_M1 with kendryte-k210\nType \"help()\" for more information.\n'''\n```"}, "/soft/maixpy/zh/modules/on_chip/gpio.html": {"title": "GPIO 的使用", "content": "---\ntitle: GPIO 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: GPIO 的使用\n---\n\n关于 GPIO 详细介绍请参考[GPIO-API 文档](../../api_reference//Maix/gpio.html).\n\n## 使用方法\n\n* 将某 IO 注册为 GPIO 功能\n\n```python\nfrom Maix import GPIO\nfrom fpioa_manager import fm\n\nfm.register(io_number,fm.fpioa.GPIO0)\n```\n\n* 设置 GPIO 为输入或输出模式\n\n```python\ngpio=GPIO(GPIO.GPIO0,GPIO.OUT)\n```\n\n* 读取或设置 GPIO 电平\n\n```python\ngpio.value()\n```\n\n## 示例\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](../../api_reference/builtin_py/board_info.html)。\n\n点亮 LED\n\n```python\nimport utime\nfrom Maix import GPIO\nfrom board import board_info\nfrom fpioa_manager import fm\n\nfm.register(board_info.LED_R,fm.fpioa.GPIO0)\nled_r=GPIO(GPIO.GPIO0,GPIO.OUT)\nutime.sleep_ms(500)\nled_r.value(0)\nfm.unregister(board_info.LED_R)\n```"}, "/soft/maixpy/zh/modules/on_chip/timer.html": {"title": "Timer（定时器） 的使用", "content": "---\ntitle: Timer（定时器） 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Timer（定时器） 的使用\n---\n\n\n关于 Timer 详细介绍请参考[Timer-API 文档](../../api_reference/machine/timer.html).\n\n## 使用方法\n\n* 从 machine 导入 Timer 模块\n\n```python\nfrom machine import Timer\n```\n\n* 创建 Timer 对象\n\n```python\ndef on_timer(timer):\n    print(\"time up:\",timer)\n    print(\"param:\",timer.callback_arg())\n\ntim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PERIODIC, period=1, unit=Timer.UNIT_S, callback=on_timer, arg=on_timer, start=False, priority=1, div=0)\n```\n\n* 启动定时器, 此时定时器将定时执行回调函数\n\n```python\ntim.start()\n```\n\n* 停止定时器\n\n```python\ntim.stop()\n```\n\n## 示例\n\n定时执行回调函数\n\n```python\nfrom machine import Timer\n\ndef on_timer(timer):\n    print(\"time up:\",timer)\n    print(\"param:\",timer.callback_arg())\n\ntim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PERIODIC, period=1, unit=Timer.UNIT_S, callback=on_timer, arg=on_timer, start=False, priority=1, div=0)\n\nprint(\"period:\",tim.period())\n\ntim.start()\ntime.sleep(5)\ntim.stop()\ntime.sleep(5)\ntim.restart()\ntime.sleep(5)\ntim.stop()\ndel tim\n```"}, "/soft/maixpy/zh/modules/on_chip/i2c.html": {"title": "I2C 的使用", "content": "---\ntitle: I2C 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: I2C 的使用\n---\n\n\n关于 I2C 详细介绍请参考[I2C-API 文档](../../api_reference/machine/i2c.html).\n\n## 使用方法\n\n### 主机模式\n\n* 创建 I2C(软件模拟或硬件) 对象\n\n```python\nfrom machine import I2C\nfrom fpioa_manager import fm\n# i2c = I2C(I2C.I2C0, freq=100000, scl=28, sda=29) # hardware i2c\ni2c = I2C(I2C.I2C4, freq=100000, scl=28, sda=29,gscl=fm.fpioa.GPIOHS3,gsda=fm.fpioa.GPIOHS2) # software i2c\n```\n\n* 扫描从机, 返回所有从机地址\n\n```python\ndevices = i2c.scan()\n```\n\n* 对从机读写数据\n\n```python\nfor device in devices:\n    i2c.writeto(device, b'123')\n    i2c.readfrom(device, 3)\n```\n\n### 从机模式\n\n* 创建从机回调函数\n\n```python\ncount = 0\ndef on_receive(data):\n    print(\"on_receive:\",data)\n\ndef on_transmit():\n    count = count+1\n    print(\"on_transmit, send:\",count)\n    return count\n\ndef on_event(event):\n    print(\"on_event:\",event)\n```\n\n* 创建 I2C 对象\n\n```python\nfrom machine import I2C\ni2c = I2C(I2C.I2C0, mode=I2C.MODE_SLAVE, scl=28, sda=29, addr=0x24, addr_size=7, on_receive=on_receive, on_transmit=on_transmit, on_event=on_event)\n```\n\n## 示例\n\n* 读取所有从机地址并分别收发数据\n\n```python\nfrom machine import I2C\n\ni2c = I2C(I2C.I2C0, freq=100000, scl=28, sda=29) # software i2c\n\ndevices = i2c.scan()\nprint(devices)\n\nfor device in devices:\n    i2c.writeto(device, b'123')\n    i2c.readfrom(device, 3)\n```\n\n* 从机模式示例\n\n```python\nfrom machine import I2C\n\ncount = 0\n\ndef on_receive(data):\n    print(\"on_receive:\",data)\n\ndef on_transmit():\n    count = count+1\n    print(\"on_transmit, send:\",count)\n    return count\n\ndef on_event(event):\n    print(\"on_event:\",event)\n\ni2c = I2C(I2C.I2C0, mode=I2C.MODE_SLAVE, scl=28, sda=29, addr=0x24, addr_size=7, on_receive=on_receive, on_transmit=on_transmit, on_event=on_event)\n```"}, "/soft/maixpy/zh/modules/on_chip/pwm.html": {"title": "PWM 的使用", "content": "---\ntitle: PWM 的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: PWM 的使用\n---\n\n\n关于 PWM 详细介绍请参考[PWM-API 文档](../../api_reference/machine/pwm.html).\n\n## 使用方法\n\n* 从 machine 导入 PWM, Timer 模块\n\n```python\nfrom machine import Timer,PWM\n```\n\n* 创建 Timer 和 PWM\n\n```python\ntim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PWM)\nch = PWM(tim, freq=500000, duty=50, pin=boad_info.LED_G)\n```\n\n* 改变占空比, 设置的 pin 脚将输出不同占空比的波形\n\n```python\nch.duty(duty)\n```\n\n## 示例\n\n控制 LED_G 灯亮度\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](../../api_reference/builtin_py/board_info.html)。\n\n```python\nfrom machine import Timer,PWM\nimport time\nfrom board import board_info\nfrom fpioa_manager import fm\n\ntim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PWM)\nch = PWM(tim, freq=500000, duty=50, pin=board_info.LED_G)\nduty=0\ndir = True\nwhile True:\n    if dir:\n        duty += 10\n    else:\n        duty -= 10\n    if duty>100:\n        duty = 100\n        dir = False\n    elif duty<0:\n        duty = 0\n        dir = True\n    time.sleep(0.05)\n    ch.duty(duty)\n```"}, "/soft/maixpy/zh/modules/others/servo.html": {"title": "舵机", "content": "---\ntitle: 舵机\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 舵机\n---\n\n\n## 警告！请外接电源，不要用电脑供电给舵机，烧了自理。\n\n## 使用方法\n\n舵机需要使用 PWM 输出不同占空比来控制其旋转角度, 首先需要准备舵机\n\n* 导入 PWM 模块，创建 PWM 对象，PWM 输出引脚接到舵机信号输入\n\n```python\nfrom machine import Timer,PWM\ntim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PWM)\nS1 = PWM(tim, freq=50, duty=0, pin=17)\n```\n\n* 输出不同占空比波形来控制舵机\n\n```python\nS1.duty((angle+90)/180*10+2.5)\n```\n\nPWM 控制 API 参考: [PWM API](../../api_reference/machine/pwm.html)\n\n## 例程\n\n* 控制舵机旋转不同角度: [Servo](https://github.com/sipeed/MaixPy_scripts/blob/79a5485ec983e67bb8861305a52418b29e0dc205/modules/others/Servo/Servo.py)\n\n* 舵机云台: [gimbal](https://github.com/sipeed/MaixPy_scripts/tree/master/application/gimbal)"}, "/soft/maixpy/zh/modules/others/binocular_camera.html": {"title": "双目摄像头", "content": "---\ntitle: 双目摄像头\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 双目摄像头\n---\n\n\n![](../../../assets/hardware/module/camera_binocular.png)\n\n## 使用方法\n\n需要准备一个双目摄像头\n\n* 导入并初始化双目摄像头\n\n```python\nimport sensor\nsensor.binocular_reset()\nsensor.shutdown(False)\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.shutdown(True)\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\n```\n\n* 打开摄像头并捕捉图像\n\n```python\nsensor.shutdown(True)\nimg=sensor.snapshot()\n```\n\nAPI 详情请参考: [Sensor API](../../api_reference/machine_vision/sensor.html)\n\n## 例程\n\n捕捉图像并显示在 LCD 上\n\n[demo_binocular](https://github.com/sipeed/MaixPy_scripts/blob/5a03ab549d06cd713f2c0d19f0c18fbd24c69025/hardware/demo_binocular.py)"}, "/soft/maixpy/zh/modules/others/htpa.html": {"title": "HTPA 热红外测温模组", "content": "---\ntitle: HTPA 热红外测温模组\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: HTPA 热红外测温模组\n---\n\n\n<img src=\"./../../../assets/hardware/other/htpa32x32.png\">\n<img src=\"../../../assets/hardware/other/htpat_scale_240x240.png\">\n\n可用于无接触测温。\n\n## 参数\n\n* 电源电压(DC)：3.3V\n* 电流消耗：5.5(±1.0)mA\n* 时钟频率(传感器)：5(±3)MHz\n* 环境温度范围：-20 ~ 85℃\n* 对象温度范围：-20 ~ >1000°C\n* 帧率(全帧)：2 ~ 27hz\n* 帧率(四分之一帧)：8 ~ 110hz\n* 噪声等效温差(最佳光学)：140mK@1Hz\n* 通信方式：I2C\n\n## 使用方法\n\nMaixPy 已经在 modules 中实现了 htpa（需要在固件编译时该模块使能才可用）。\n\n* 导入并创建 htpa\n\n```python\nfrom machine import I2C\nfrom modules import htpa\ndev = htpa(i2c=I2C.I2C0, scl_pin=7, sda_pin=6, i2c_freq=1000000)\n```\n\n* 获取检测范围内所有点的温度\n\n```python\ntemperature = dev.temperature()\n```\n\nAPI 详情参考[modules.htpa](../../api_reference/extend/htpa.html)\n\n## 例程\n\n* 在 LCD 绘制温度分布图：[htpa demo](https://github.com/sipeed/MaixPy_scripts/blob/79a5485ec983e67bb8861305a52418b29e0dc205/modules/others/heimann_HTPA_32x32/HTPA_32x32_demo.py)\n\n## 更多\n\n* 模块资料：[32x32 Thermopile Array](https://www.heimannsensor.com/32x32)\n* 详细教程: [热红外 heimann (海曼) HTPA 32x32d](https://neucrack.com/p/199)"}, "/soft/maixpy/zh/modules/others/onewire.html": {"title": "onewire（单总线）的使用", "content": "---\ntitle: onewire（单总线）的使用\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: onewire（单总线）的使用\n---\n\n\n# 使用方法\n\n* 从 modules 导入 onewire 模块\n\n```python\nfrom modules import onewire\n```\n\n* 创建 onewire 对象\n\n```python\nfm.register(14, fm.fpioa.GPIOHS2, force=True)\nbus = onewire(fm.fpioa.GPIOHS2)\n```\n\n* 搜索，读写数据等操作\n\n## 例程：\n\nds18b20 温度读取：[onwire_ds18b20](https://github.com/sipeed/MaixPy_scripts/blob/80f4eb71d3481b6f119f25f39f7c9b37404b99ce/hardware/demo_onewire_ds18x20.py)"}, "/soft/maixpy/zh/modules/others/index.html": {"title": "其他模块", "content": "---\ntitle: 其他模块\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 其他模块\n---\n\n\n* [双目摄像头](./binocular_camera.html)\n* [esp32 ADC模数转换](./esp32_read_adc.html)\n* [HTPA 红外测温](./htpa.html)\n* [串口红外镜头](./mlx90640.html)\n* [舵机](./servo.html)"}, "/soft/maixpy/zh/modules/others/esp32_read_adc.html": {"title": "", "content": "---\ntitle: \nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: \n---\n\n## 如何使用 ESP32 获取 ADC 模拟量\n\n由于 K210 没有 ADC 读取模拟量的功能，所以该功能只能从 ESP32 、ESP82XX 等硬件上获取，ADC 最基础的用途就是实现一个可触摸的按键触点。\n\n### ESP32 示例代码\n\n```python\n# Uasge see readme.md\n# from network_esp32 import wifi\n\nimport time, network\nfrom Maix import GPIO\nfrom fpioa_manager import fm\n\nclass wifi():\n    # IO map for ESP32 on Maixduino\n    fm.register(25,fm.fpioa.GPIOHS10)#cs\n    fm.register(8,fm.fpioa.GPIOHS11)#rst\n    fm.register(9,fm.fpioa.GPIOHS12)#rdy\n    print(\"Use Hareware SPI for other maixduino\")\n    fm.register(28,fm.fpioa.SPI1_D0, force=True)#mosi\n    fm.register(26,fm.fpioa.SPI1_D1, force=True)#miso\n    fm.register(27,fm.fpioa.SPI1_SCLK, force=True)#sclk\n    nic = network.ESP32_SPI(cs=fm.fpioa.GPIOHS10, rst=fm.fpioa.GPIOHS11, rdy=fm.fpioa.GPIOHS12, spi=1)\n\nprint(\"ESP32_SPI firmware version:\", wifi.nic.version())\n\n# get ADC0 ADC1 ADC2\nadc = wifi.nic.adc((0,1,2))\nprint(adc)\n\nwhile True:\n    try:\n        # get ADC0~5\n        adc = wifi.nic.adc()\n    except Exception as e:\n        print(e)\n        continue\n    for v in adc:\n        print(\"%04d\" %(v), end=\" \")\n    print(' : adc')\n\n'''\n    MicroPython v0.5.1-136-g039f72b6c-dirty on 2020-11-18; Sipeed_M1 with kendryte-k210\n    Type \"help()\" for more information.\n    >>>\n    raw REPL; CTRL-B to exit\n    >OK\n    (2370, 3102, 3071)\n    2017 2753 0977 2709 0963 0855  : adc\n    0617 0757 0150 0095 0133 0153  : adc\n    1319 1478 0955 0939 0698 0619  : adc\n    2403 3231 3299 3298 1483 0779  : adc\n    1119 1815 1274 1315 0230 0255  : adc\n    0951 0951 0295 0283 0319 0399  : adc\n    2175 2769 2576 2579 1487 1104  : adc\n    1995 2846 2647 2699 0839 0441  : adc\n'''\n```\n\n\n### OSError: Get version fail\n\n重试就行，通常是 esp32 还未初始化成功。\n\n```shell\nTraceback (most recent call last):\n  File \"<stdin>\", line 15, in <module>\n  File \"<stdin>\", line 24, in wifi\nOSError: Get version fail\n>\n```\n\n### ESP82XX 实现思路\n\n> 文档对该部分内容不做解释。\n\n通过 AT+SYSADC 查询 ADC 值，在乐鑫的 ESP82XX AT 固件中默认为GPIO12 引脚。\n\n直接读取值即可使用。"}, "/soft/maixpy/zh/modules/others/mlx90640.html": {"title": "MLX90640 串口红外镜头模块", "content": "---\ntitle: MLX90640 串口红外镜头模块\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MLX90640 串口红外镜头模块\n---\n\n\n<img src=\"./../../../assets/hardware/other/mlx90640_hot_map3.jpg\">\n<img src=\"../../../assets/hardware/other/k210_mlx90640_hot_map2.jpg\">\n\n可用于无接触测温。\n\n## 参数\n\n* 分辨率：32x24\n* 测量范围：-40°C~300°C\n* 温度分辨率：0.1°C\n* 测量精度：±2°C\n* 重复精度：±2°C\n* 响应频率：8HZ\n* 工作电压：3.3~5V\n* 工作电流：42mA\n* 工作温度：-40°C~85°C\n* 尺寸：17.27mmx33mm\n\n## 使用方法\n\n该模块使用串口或 I2C 进行通信，确认接线正确后，从串口即可读取到测量数据。\n\n## 例程\n\n* 在 LCD 显示红外热成像图片：[demo mlx90640](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/others/mlx90640)\n\n## 更多\n\n* 模块详情：[Far infrared thermal sensor array (32x24 RES)](https://www.melexis.com/en/product/MLX90640/Far-Infrared-Thermal-Sensor-Array)\n* 详细教程：[mlx90640](https://neucrack.com/p/189)"}, "/soft/maixpy/zh/modules/grove/grove_rgb_led_ring.html": {"title": "Grove - RGB LED Ring(LED 灯条)", "content": "---\ntitle: Grove - RGB LED Ring(LED 灯条)\nkeywords: maixpy, k210, AIOT, 边缘计算, RGB LED Ring\ndesc: maixpy doc: Grove - RGB LED Ring(LED 灯条)\n---\n\n\n<div class=\"grove_pic\">\n<img src=\"../../../assets/hardware/module_grove/grove_led_ring.jpg\">\n</div>\n\nGrove-RGB LED 环采用3535尺寸的 LED，LED 内嵌有嵌入式微控制器。每个 WS2813 驱动芯片均可寻址并且位于 LED 内部。每个 LED 都有恒定电流驱动，因此即使电压变化，颜色也将非常一致。\n\n## 参数\n\n|项目 |\t值  |\n|:---|:---|\n|功率 | 3.3V/5V|\n|静态电流 |0.7mA/LED|\n|RGB通道恒流 |16mA/LED|\n|刷新频率  |2Hz|\n|重置时间  |>280μs|\n|工作温度  |-25～85℃|\n|贮存温度  |-40～105℃| \n\n## 使用方法\n\nMaixPy 已经在 modules 模块中实现有 WS2812 驱动。\n\n* 创建 ws2812 对象，只需要单根信号线即可\n\n```python\nfrom modules import ws2812\nled_io, led_num = 24, 24\nws = ws2812(led_io, led_num)\n```\n\n* 设置某个灯的颜色并显示\n\n```python\nfor i in range(led_num):\n    ws.set_led(i, (0, 0, 0))\nws.display()\n```\n\n## 例程\n\n[Grove - RGB LED Ring 例程](https://github.com/sipeed/MaixPy_scripts/blob/master/modules/grove/ws2812/ws2812.py)\n\n## 更多\n\n* API 手册: [modules.ws2812](../../api_reference/extend/ws2812.html)\n\n* 模块详情: [Seeed Grove-LED_ring](https://wiki.seeedstudio.com/Grove-LED_ring/)"}, "/soft/maixpy/zh/modules/grove/grove_ultrasonic_ranger.html": {"title": "Grove - Ultrasonic Ranger(超声波测距)", "content": "---\ntitle: Grove - Ultrasonic Ranger(超声波测距)\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Grove - Ultrasonic Ranger(超声波测距)\n---\n\n\n<div class=\"grove_pic\">\n<img src=\"../../../assets/hardware/module_grove/ultrasonic.jpg\">\n</div>\n\nGrove-Ultrasonic Ranger 是一个非接触式测距模块，工作频率为 40KHz。Grove_Ultrasonic_Ranger 的触发和回波信号共享1个 SIG 引脚。  \n\n## 参数\n\n| 项目       | 值         |\n| -------- | ----------- |\n| 工作电压 \t| 3.2〜5.2V          |\n| 工作电流 \t| 8ma               |\n| 超声波频率 |\t40kHz           |\n| 测量范围 \t| 2-350cm           |\n| 解析度 \t |   1cm            |\n| 输出量 \t |   PWM           |     \n| 尺寸 \t  |  50mm x 25mm x 16mm |\n| 重量 \t  |  13g             |    \n| 测量角度 \t| 15°               |     \n| 工作温度 \t| -10〜60°C          |    \n| 触发信号 \t| 10uS TTL          |      \n| 回声信号 \t| TTL               |\n\n## 使用方法\n\nMaixPy 已经在 modules 模块中实现有 ultrasonic 驱动。\n\n* 导入 ultrasonic 类并创建对象\n\n```python\nfrom modules import ultrasonic\ndevice = ultrasonic(fm.fpioa.GPIOHS0)\n```\n\n* 获取当前测量距离(cm)\n\n```python\ndistance = device.measure(unit = ultrasonic.UNIT_CM, timeout = 3000000)\n```\n\n## 例程\n\n[Grove - Ultrasonic Ranger 例程](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/grove/ultrasonic)\n\n## 更多\n\n* API 手册: [modules.ultrasonic](../../api_reference/extend/ultrasonic.html)\n\n* 模块详情: [Seeed Grove-Ultrasonic_Ranger](https://wiki.seeedstudio.com/Grove-Ultrasonic_Ranger/)"}, "/soft/maixpy/zh/modules/grove/grove_chainable_rgb_led.html": {"title": "Grove - Chainable RGB LED(可链接 LED 灯)", "content": "---\ntitle: Grove - Chainable RGB LED(可链接 LED 灯)\nkeywords: maixpy, k210, AIOT, 边缘计算, RGB LED\ndesc: maixpy doc: Grove - Chainable RGB LED(可链接 LED 灯)\n---\n\n\n<div class=\"grove_pic\">\n<img src=\"../../../assets/hardware/module_grove/grove_rgb_led.jpg\">\n</div>\n\nGrove - Chainable RGB LED 使用2线传输（数据和时钟）与 MCU 通信。 这种2线传输可用于级联多个模块。 内置 clock regeneration 可延长传输距离。 该Grove模块适用于任何基于彩色LED的项目。 \n\n## 参数\n\n|项目|值|\n|:----|:----|\n|工作电压|5V |\n|工作电流|20mA|\n|通信协议|串行|\n\n## 使用方法\n\n* 导入例程仓库中的 RGB_LED 类并创建一个 RGB_LED 对象\n\n```python\nfrom RGB_LED import RGB_LED\nled = RGB_LED(clk_pin, data_pin, led_num, clk_gpiohs_num, data_gpiohs_num, True)\n```\n\n* 设置某个灯的颜色， 颜色值为 rgb 格式\n\n```python\nfor i in range(led_num):\n    led.set_RGB(i, r, g, b)\n```\n\n## 例程\n\n[Grove - Chainable RGB LED 例程](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/grove/chainable_RGB_LED)\n\n## 更多\n\n模块详情: [Seeed Grove - Chainable RGB LED](https://wiki.seeedstudio.com/Grove-Chainable_RGB_LED/)"}, "/soft/maixpy/zh/modules/grove/index.html": {"title": "Grove", "content": "---\ntitle: Grove\nkeywords: maixpy, k210, AIOT, 边缘计算, Grove介绍\ndesc: maixpy doc: Grove\n---\n\n\n采用 Grove 标准接口的模块，Grove 为 Seeed 团队使用的统一接口系统，目前以支持大量模块。 \n\n## Grove 接口\n\nGrove 接口的线缆有 4 种颜色，用户可以根据颜色快速区别\n![](../../../assets/hardware/module_grove/grove_interface.jpg)\n\n| pin   | 颜色 | 描述                                |\n| ----- | ---- | ----------------------------------- |\n| pin 1 | 黄色 | (例如，I2C Grove Connectors上的SCL) |\n| pin 2 | 白色 | (例如，I2C Grove Connectors上的SDA) |\n| pin 3 | 红色 | VCC (所有的Grove接口红色都是VCC)    |\n| pin 4 | 黑色 | GND (所有的Grove接口黑色都是GND)    |\n\nGrove模块主要有 4 种接口:\n\n1. Grove Digital 数字接口:<br/>\n    Grove 数字接口由 Grove 插头的四条标准线组成.<br/>\n    两条信号线通常称为 D0 和 D1 .<br/>\n    大多数模块只使用D0，但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为D0，第二个称为D1.第一个接头会连接到主控芯片的DO/D1管脚，第二个连接头会连接到主控芯片的D1/D2引脚，后面的连接头以此类推.\n\n| pin  | Function             | Note |\n| ---- | -------------------- | ---- |\n| pin1 | Dn 第一个数字输入    | —    |\n| pin2 | Dn+1 第二个数字输入  | —    |\n| pin3 | VCC 供电引脚 5V/3.3V | —    |\n| pin4 | GND 地               | —    |\n\n\n2. Grove UART :<br/>\n    The Grove UART 是特殊的一种数字输入输出接口.<br/>\n    它使用引脚 1 和引脚 2 进行串行输入和发送. <br/>\n    引脚1是 RX 线(用于接收数据，因此是输入)，\n    其中引脚 2 是 TX 线(用于向 Grove 模块传输数据).\n\n| pin  | Function | Note             |\n| ---- | -------- | ---------------- |\n| pin1 | RX       | 串行接收         |\n| pin2 | TX       | 串行发送         |\n| pin3 | VCC      | 供电引脚 5V/3.3V |\n| pin4 | GND      | 地               |\n\n3. Grove I2C:<br/>\n    有许多类型的I2C Grove 传感器可用.<br/>MaixCube 上的 Grove 只支持 3.3V 传感器\n\n  Grove I2C 连接器具有标准布局.引脚 1 是SCL信号，引脚 2 是SDA信号\n\n| pin  | Function | Note              |\n| ---- | -------- | ----------------- |\n| pin1 | SCL      | I2C 时钟          |\n| pin2 | SDA      | I2C 数据          |\n| pin3 | VCC      | 供电引脚，5V/3.3V |\n| pin4 | GND      | 地                |\n\n详情请参考：[Grove_System](https://wiki.seeedstudio.com/cn/Grove_System/)\n\n## 外设模块\n\n以下外设均采用 Grove 接口\n\n* [Ultrasonic Ranger 测距](./grove_ultrasonic_ranger.html)\n* [Chainable RGB LED 灯](./grove_chainable_rgb_led.html)\n* [RGB LED Ring 灯条](./grove_rgb_led_ring.html)"}, "/soft/maixpy/zh/how_to_ask.html": {"title": "如何优雅地提问", "content": "---\ntitle: 如何优雅地提问\nkeywords: maixpy, k210, AIOT, 边缘计算, 人工智能, 深度学习\ndesc: maixpy doc: 如何优雅地提问\n---\n\n\n## 在各个地方提问时， 大家会发现有几个现象：\n\n* 提问题后没人回答\n* 提的问题过了很久才有人回答\n* 对方老是嫌弃自己太菜\n\n\n## 问问题前，确认自己已经学习了 入门指南\n\n本文档的 **入门指南** 章节， 是使用 `MaixPy` 的基础中的基础， 不管你是否有过开发经验，是大佬还是小白， 请务必从前到后完整阅读并操作一遍。\n\n很多问题会在这个过程中解决， 切忌一开始就到 QQ群、论坛 、issue， 或者邮件随便提问， 很多在文档中一开始就说明了的问题可能不会得到社区的及时的回答， 节省大家的时间，也为了更好的社区环境，大家共同更好地成长，请互相理解\n\n\n## 提问时，尽量做到以下几点，会大大提高问题被快速解决的几率：\n\n### 缕清问题， 弄清楚到底发生了什么，以及我做了什么，包括：\n\n* 我想实现什么效果，什么功能？\n\n* 为了实现这个效果，我是怎么做的， 详细的过程是什么？\n\n* 实施的过程中， 什么错误发生了， 现象是什么（比如报错了， 报了什么错，**完整**的错误内容是什么？）\n\n* 我是否认真看了报错的信息， 报错信息中是否有提示了错误的原因和解决的方法？\n\n* 根据这些报错信息， 仔细思考， 是否能解决问题？\n\n* 搜索 文档、 issue， 以及用搜索引擎能不能搜索到问题的解决方法\n\n### 如果问题自己实在不能解决， 需要请教于人， 需要考虑：\n\n* 请教谁，在哪里请教， 谁会更有几率回答我的问题？以及实时性如何？\n\n* 我应该给他提供什么数据和现象他才能愿意快速帮我解决问题？\n  * 提供我的目的 （方便让回答者知道你在做什么事情）\n  * 提供完整的实施过程， 以及过程中出现的现象 （方便回答者跟着你的流程去做一遍， 即问题复现）\n  * 给出错误的地方， 指明哪里出现的现象或结果和自己预期的不一样！ （让回答者知道，哪里没达到预期）\n  * 提供出现的错误信息， 需要完整， 尽可能更多地截图， 更多的日志，千万别小气地截一张小图，或者之给出日志的一部分（ 因为回答者可能很久没做这件事情了，忘记了一些细节，需要靠截图和完整日志来快速回忆起来; 而且根据详细的日志可以快速定位到问题处在哪里）\n\n* 怎么提问态度显得比较诚恳，就算我再小白，大家也愿意回答\n\n\n\n### 提问模板\n\n\n提问尽量做到提问优雅，不需要添加多余的语气词，抱怨的词汇，斟酌每一个词和标点符号，站在回答人的角度思考问题，如何让回答的人快速帮助自己解决问题， 字数太少描述不清楚， 字数太多则让人没有耐心\n\n#### 标题\n\n无论在哪里提问（包括`QQ群`）， 给自己的问题拟定一个`30`个字左右标题， 阐明问题的中心思想，包括：\n* 问题类别， 是问题请教，还是 BUG提交，还是经验分享等等。让大家在满是文字的屏幕上可以立马定位到你想做什么\n* 一句话阐明问题的中心你思想，比如 `运行摄像头示例程序，报错 reset fail， 可能是硬件问题`\n\n所以综合后标题可以是这样：\n* `【MaixPy 提问】 运行摄像头示例程序，报错 reset fail， 可能是硬件问题吗`\n\n这样的标题一定**不能**出现:\n* `啊啊啊啊啊为什么我的板子又不行了`\n* `为什么我的代码不能运行了`\n* `为什么我的屏幕黑屏了`\n* `【MaixPy 提问】 收到了开发板，开发板屏幕是红的，一行小字，为什么呢？` \n* `我运行xxx程序，出了问题`\n\n可以这样问：\n* `【MaixPy 提问】 我的板子在我接反电源后，现在板子无法启动，怎么判断板子哪里烧毁了，如果可以，怎么救活呢`\n* `【MaixPy BUG】 pix_to_ai 没有对最后一个像素进行转换`\n\n#### 内容\n\n首先站在回答者的角度， 如果被问问题:\n* 首先要知道对方要做什么，实现什么目标\n* 为了实现这个目标，他是参考了哪里的步骤做的\n* 实际上采用了哪些具体的步骤，然后在那一步出现了问题， 方便我照着他的步骤去尝试复现一下现象。如果这个问题看起来不好解决，又没有复现的步骤，那可能要花很多时间去复现，先放一放先解决其它问题吧\n* 具体出现的问题是什么，如果他只说出了问题，我怎么知道他出了什么问题，也许是身体不适？所以这很重要，需要让他说明出问题时的现象，并指明与预期有什么不同，不然我还得去猜去对比和预期有什么不同，解决问题的时长又增加了\n* 出问题了，我可能需要他的日志文件，方便我根据日志去看源码等进行分析，不然可能会很难解决问题，那这个问题可以放到后面慢慢看吧\n\n综上， 可以这么提问：\n\n* 详细阐明自己的目标，想做什么事情， 现象应该是什么样的\n* 我有没有参考哪里的文档、代码或者教学\n* 如何复现错误：具体怎么做的， 每一个步骤写详细，直到问题出现\n* 详细阐述错误出现时的现象，以及和期望的相比哪里不一样，需要证明问题确实出现了\n* 附带日志文件，以及截图，甚至是视频，日志和截图一定要完整，不要只截取一小部分，回答者可能会从你的完整日志和截图中发现一些你没注意到的问题，这很重要！\n* 另外，粘贴代码注意格式，别粘贴后显示很乱，无法入目，尽量能复制后 直接能运行\n* 最后，对解答问题的社区朋友们表达感谢"}, "/soft/maixpy/zh/dnn/index.html": {"title": "深度学习及 KPU 基础知识", "content": "---\ntitle: 深度学习及 KPU 基础知识\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 深度学习及 KPU 基础知识\n---\n\n\n## 阅读完本章文档可以了解什么？\n\n1. 了解深度学习一些基础内容\n2. 了解 K210 内部 KPU 的特性\n3. 了解 KPU 使用过程中可能会遇到的问题，以及问题的解决方法\n\n## 概述\n\n在本章中，将会为大家介绍深度学习和 K210 内部 KPU 的一些基础知识，以及大家在这部分容易遇到的问题。深度学习及其所涵盖的应用实例是一个非常庞大的领域，没有人能够用一篇文档就把它说得很清楚。希望这篇文档能够让大家对深度学习有一定的了解，产生超出本文档说明外的问题时，能够通过搜索引擎查询等手段解决问题。\n\n---\n\n## 关于深度学习\n\n在介绍深度学习前，我们先来介绍神经网络。\n\n​\t什么是神经网络呢？是一种模仿动物神经网络行为特征，进行分布式并行信息处理的算法数学模型。\n\n下面，让我们举个简单例子来说明它干了什么。\n\n其实从某种程度来上说，我们在上小学时，就已经开始运用神经网络的相关思想来解决实际问题了。此时的你，可能满脸问号QAQ。不怕，且听我一一道来。现在，假设有一个方程  `y = kx + b` 。相信这个方程你一定见过无数次。其实我们可以把这个方程当作神经网络的\"模型\"，未知数\"k\"当作神经网络的权重，\"b\"当作神经网络的偏置。此时我们要训练这个神经网络模型，其实训练的过程，就是在数据集上求解全局最优权重和偏置的过程。此时，假设这个方程满足\"x=1,y=2\",\"x=2,y=4\"。这个满足条件便是上文说到的数据集，通过在人脑中，对这个网络的训练，我们可以得知整个网络的最优权重为2，最优偏置为0。此时，便完成了神经网络的训练。\n\n不过值得提出的是，训练的最终目的，永远都是预测。古往今来，那么多神经网络消耗大量算力资源去寻找合适权重和偏置。都是为了能够寻找一个输入数据与输出数据之间的对应关系。一个优秀的神经网络，它的输入数据应该是随机的，不确定的(没有在数据集中被训练过的)。而输出数据则是准确的，可靠的。回到上文，我们训练了神经网络\"y = 2x + 0\"，此时数据集拥有的数据x为\"1\"和\"2\"。此时为了评估模型性能，我们输入非数据集数据\"3\"，此时，通过神经网络前向传播，得到了输出值\"6\"。至此，完成了神经网络模型的预测。\n\n上文用了非常简单的demo来为大家阐述神经网络究竟在干啥，下面让我们一起看看真正的神经网络模型长啥样。\n\n![全连接神经网络模型](https://i.loli.net/2020/06/30/PVxMcSde8YJ4Q9b.jpg)\n\n上图为大家展示了一个比较常见的全连接神经网络模型(Fully connected neural network)。对比这个网络结构与之前的\"y = 2x + 0\"网络，我们可以发现如下不同:\n\n1. 输入数据个数不确定(可以有n个输入)\n2. 输出数据个数不确定(可以有n个输出)\n3. 参数个数不确定(图中可以有n个全连接层，每个层所包含神经元可以有n个，从而导致参数个数为n)\n\n模型的构造过程可以看作是参数个数的确定过程(当网络层结构确定后，参数个数也确定了)，模型的训练过程可以看作是在数据集上全局最优参数的确定过程。模型的预测过程可以看作是输入数据*参数 = 预测结果的过程。(*代表进行某种运算)\n\n在对神经网络有了一定的了解后，接下来将会介绍深度学习。大家可以把深度学习当做是一种改良版的神经网络算法。它与其他几个名词之间的关系为:机器学习是人工智能的一个子集，深度学习和神经网络又是机器学习的一个子集。\n\n神经网络和深度学习之间的区别，以及深度学习的优点等内容，由于篇幅有限，不能在此一一介绍，大家感兴趣的话，可以通过搜索引擎进行查询。\n\n## 关于 KPU\n\nK210 SOC 内部搭载一颗 KPU(Neural Network Processor), KPU 即通用的神经网络处理器，它可以在低功耗的情况下实现卷积神经网络计算，时时获取被检测目标的大小、坐标和种类，对人脸或者物体进行检测和分类。\n\nK210 搭载的 KPU 具备以下几个特点：\n\n1. 支持主流训练框架按照特定限制规则训练出来的定点化模型\n2. 对网络层数无直接限制，支持每层卷积神经网络参数单独配置，包括输入输出通道数目、输入输 出行宽列高\n3. 支持两种卷积内核 1x1 和 3x3\n4. 支持任意形式的激活函数\n5. 实时工作时最大支持神经网络参数大小为 5.5MiB 到 5.9MiB\n6. 非实时工作时最大支持网络参数大小为（Flash 容量-软件体积）\n\nKPU 的内部结构如下图所示。\n\n![K210 KPU结构](https://i.loli.net/2020/06/30/Q9tPOjyMWFiTwxA.png)\n\nMaixpy下 KPU 相关 API 及 Demo 可以点击[此处](https://maixpy.sipeed.com/zh/libs/Maix/kpu.html?h=kpu)查看。\n\n## KPU使用过程中的常见问题\n\n### 1. KPU能够加载多大的模型？\n\n当k210运行 c 代码时，能够加载 6MB左右的模型。\n当运行maixpy(mini)时，能够加载3MB左右的模型。\n当运行maixpy(完整版)时，能够加载2MB左右的模型。\n\n### 2. 什么模型能被KPU加载运行？\n\n被nncase转换后的kmodel能够被kpu加载运行。\n\nnncase使用说明点击[此处](https://github.com/kendryte/nncase/blob/master/docs/USAGE_ZH.md)\nnncase tflite ops支持点击[此处](https://github.com/kendryte/nncase/blob/master/docs/tflite_ops.md)\nnncase 常见问题点击[此处](https://github.com/kendryte/nncase/blob/master/docs/FAQ_ZH.md)\n\n### 3. KPU能通过哪些方式加载模型？\n\n1. 加载TF卡中的模型\n\n   ```python\n   kpu.load(\"/sd/test.kmodel\")\n   ```\n\n2. 加载Flash中的模型\n\n   ```python\n   kpu.load(offset)\n   ```\n\n   此处的offset为模型在flash中的偏移地址，模型可以通过k-flash烧入k210内部flash中\n\n### 4. 报错\"memory overflow\"怎么办？\n\n出现这个问题，一般是由于模型过大引起的。可以依次尝试如下解决方案:\n\n1. 更换maixpy mini版本固件\n2. 进行模型剪枝优化\n3. 放弃在maixpy固件下开发，而采用勘智的C SDK进行开发。\n\n### 5. 报错\"load error,only support kmodel v3/v4\"怎么办？\n\n出现这个问题可以尝试如下解决方案:\n\n1. 如果为flash中加载模型，请确保flash offset填写正确，并保证和maixpy固件没有冲突。\n2. 如果是采用nncase 0.2.0进行转换的kmodel V4，请尝试采用nncase 0.1.0进行转换，从而生成kmodel V3。（截至2020/06/30，maixpy对kmodel v4的加载bug还未修复）\n\n### 6. 我想实现不同模型的选择加载(例如按下按钮运行目标分类，再次按下按钮则运行目标检测)，应该怎么写程序？\n\n因为flash有限，固建议将所有k210模型放到TF卡内进行加载。因为内部RAM有限，所以当需要切换不同模型进行`kpu.load(k210model)`前，请先执行`kpu.deinit(k210model)`对SRAM中的模型进行释放。否则将会报错\"memory overflow\"。"}, "/soft/maixpy/zh/dnn/ml_mnist.html": {"title": "mnist 手写数字识别", "content": "---\ntitle: mnist 手写数字识别\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: mnist 手写数字识别\n---\n\n\n```python\nimport sensor,lcd,image\nimport KPU as kpu\n\nlcd.init()\n\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.set_windowing((224, 224))    #set to 224x224 input\nsensor.set_hmirror(0)               #flip camera\n\ntask = kpu.load(0x200000)           #load model from flash address 0x200000\nsensor.run(1)\n\nimg_lcd=image.Image()\n\nwhile True:\n    img = sensor.snapshot()\n    #lcd.display(img,oft=(0,0))     #display large picture\n    img1=img.to_grayscale(1)        #convert to gray\n    img2=img1.resize(28,28)         #resize to mnist input 28x28\n    a=img2.invert()                 #invert picture as mnist need\n    a=img2.strech_char(1)           #preprocessing pictures, eliminate dark corner\n    img2x2=img2.resize(28*2,28*2)   #scale to display\n    a=img_lcd.draw_image(img2x2,0,0)#display small 28x28 picture\n    a=img2.pix_to_ai();             #generate data for ai\n    #watch conv0\n    a=kpu.set_layers(task, 1)\n    fmap=kpu.forward(task,img2)     #run neural network model\n    for i in range(0,16):\n        tmp=kpu.fmap(fmap,i)\n        tmpx2=tmp.resize(14*2,14*2) #scale to display\n        a=img_lcd.draw_image(tmpx2,(i%8)*14*2,28*2+14*2*int(i/8))\n    #watch conv1\n    a=kpu.set_layers(task, 2)\n    fmap=kpu.forward(task,img2)     #run neural network model\n    for i in range(0,32):\n        tmp=kpu.fmap(fmap,i)\n        tmpx2=tmp.resize(7*2,7*2)   #scale to display\n        a=img_lcd.draw_image(tmpx2,(i%16)*7*2,28*2+14*2*2+7*2*int(i/16))\n    #watch conv2\n    a=kpu.set_layers(task, 8)\n    fmap=kpu.forward(task,img2)     #run neural network model\n    for i in range(0,10):\n        tmp=kpu.fmap(fmap,i)\n        tmpx2=tmp.resize(4*2,4*2)   #scale to display\n        a=img_lcd.draw_image(tmpx2,i*4*2,28*2+14*2*2+7*2*2)\n    #watch softmax\n    a=kpu.set_layers(task, 11)\n    fmap=kpu.forward(task,img2)\n    plist=fmap[:]\n    for i in range(0,10):\n        cc = int(plist[i]*256)\n        a=img_lcd.draw_rectangle(i*16, 28*2+14*2*2+7*2*2+4*2+10, 16, 16, color = (cc, cc, cc), thickness = 1, fill = True)\n        a=img_lcd.draw_string(i*16+5, 28*2+14*2*2+7*2*2+4*2+10+16, str(i), color = (255, 255, 255), scale = 2, mono_space = False)\n    #show result\n    lcd.display(img_lcd,oft=(0,0))\n```"}, "/soft/maixpy/zh/api_reference/Maix/freq.html": {"title": "Maix.freq", "content": "---\ntitle: Maix.freq\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Maix.freq\n---\n\n\n频率模块，支持程序修改 cpu 和 kpu 频率\n\n## 方法\n\n\n\n### freq.set(cpu, pll1, kpu_div)\n\n设置 cpu 或者 kpu 频率，设置完后会自动重启生效\n\n请注意在频率设置完毕后可能会导致某些外设性能改变\n\n```python\nfrom Maix import freq\nfreq.set(cpu = 400, kpu = 400)\n```\n\n配置文件将会保存在文件系统的`/flash/freq.conf`文件下，请勿修改这个文件，如果文件不存在则会自动创建\n\n#### 参数\n\n不设置的参数会保持之前的值\n\n**注意**： 如果`cpu`频率设置小于`60MHz`， 默认的`REPL`串口波特率会设置为`9600`\n\n* `cpu`： 想要设置的cpu频率，范围[26,600]（芯片最高`800`但对电压有要求，`MaixPy`支持的系列不支持最高到`800`，默认`400`, 不同的板子可能表现不同，为了稳定性不建议过高\n\n* `pll1`: `pll1`输出的频率，取值范围[26,1200]（芯片最高1800，MaixPy限制到1200），默认 `400`\n\n* `kpu_div`：`kpu`时钟频率分频，取值范围[1,16]，默认`1`。 `kpu`频率=`pll1`/`kpu_div`， 比如想设置`kpu`频率为`400`，则只需设置`pll1`为`400`， `kpu_div`为`1`即可。 注意`kpu`频率范围：[26,600]\n\n#### 返回值\n\n如果频率没有变化，则返回空。\n如果频率有变化，将会自动重启机器。在使用该接口之前请确认当前情况能能否重启\n\n\n### freq.get()\n\n获取当前设置的频率参数\n\n#### 返回值\n\n`cpu`频率和`kpu`的频率，一个元组的形式返回，比如`(400,400)`\n\n### freq.get_cpu()\n\n获取当前`cpu`的频率\n\n#### 返回值\n\n`cpu`频率\n\n\n### freq.get_kpu()\n\n获取当前设置的 `kpu` 频率\n\n#### 返回值\n\n当前`kpu`频率"}, "/soft/maixpy/zh/api_reference/Maix/i2s.html": {"title": "I2S", "content": "---\ntitle: I2S\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: I2S\n---\n\nI2S模块主要用于驱动I2S设备，k210一共有3个I2S设备，每个设备一共有4个通道，在使用前需要对引脚进行映射管理\n\n## 模块函数\n\n### 构造函数\n\n新建一个 I2S 对象\n\n```\nfrom Maix import I2S\ni2s_dev = I2S(device_num)\n```\n\n#### 参数\n\n`device_num` I2S号，使用指定的 I2S，可以通过 `I2S.` 按tab键来补全\n\n#### 返回值\n\n返回一个`I2S` 对象\n\n### 通道配置函数\n\n用于配置 I2S 通道，在此之前需要对引脚进行映射\n\n```\ni2s_dev.channel_config(channel, mode, resolution, cycles, align_mode)\n```\n#### 参数\n\n* `channel`:    I2S通道编号\n\n* `mode`:       通道传输模式，一共有接收和发送模式，录音为接受，播放为发送\n\n* `resolution`: 通道分辨率，即接收数据位数\n\n* `cycles`:     单个数据时钟数\n\n* `align_mode`: 通道对齐模式\n\n#### 返回值\n\n无\n\n### 设置采样率\n\n用于配置 I2S 采样率\n\n```\ni2s_dev.set_sample_rate(sample_rate)\n```\n#### 参数\n\n`sample_rate`: int 类型，采样率\n\n#### 返回值\n\n无\n\n### 接收音频\n\n使用I2S接收音频数据\n\n```\naudio = i2s_dev.record(points)\n```\n#### 参数\n\n* `points`: 一次采集的音频点数\n\n#### 返回值\n\n`audio`: 一个`audio`音频对象\n\n### 发送音频\n\n使用I2S发送音频数据\n\n```\ni2s_dev.play(audio)\n```\n#### 参数\n\n* `audio`: 发送的音频对象\n\n#### 返回值\n无\n\n## 例程\n\n### 例程1\n\n采集数据并直接播放\n\n```python\nfrom Maix import I2S\nimport time\nfrom fpioa_manager import *\n\nfm.register(20,fm.fpioa.I2S0_IN_D0)#GO\nfm.register(19,fm.fpioa.I2S0_WS)\nfm.register(18,fm.fpioa.I2S0_SCLK)\nfm.register(34,fm.fpioa.I2S2_OUT_D1)\nfm.register(35,fm.fpioa.I2S2_SCLK)\nfm.register(33,fm.fpioa.I2S2_WS)\nsample_rate = 44*1000\nrx = I2S(I2S.DEVICE_0)\nrx.channel_config(rx.CHANNEL_0, rx.RECEIVER, align_mode = I2S.STANDARD_MODE)\nrx.set_sample_rate(sample_rate)\ntx = I2S(I2S.DEVICE_2)\ntx.channel_config(tx.CHANNEL_1, tx.TRANSMITTER, align_mode = I2S.RIGHT_JUSTIFYING_MODE)\ntx.set_sample_rate(sample_rate)\nwhile True:\n    audio = rx.record(256)#sampling points number must be smaller than 256\n    tx.play(audio)\n```\n\n### 例程2\n\n采集数据转化为 Audio 并播放\n\n```python\nfrom Maix import I2S\nfrom Maix import Audio\nfrom Maix import FFT\nimport time\nfrom fpioa_manager import *\n\nfm.register(20,fm.fpioa.I2S0_IN_D0)\nfm.register(19,fm.fpioa.I2S0_WS)\nfm.register(18,fm.fpioa.I2S0_SCLK)\nfm.register(34,fm.fpioa.I2S2_OUT_D1)\nfm.register(35,fm.fpioa.I2S2_SCLK)\nfm.register(33,fm.fpioa.I2S2_WS)\n\nrx = I2S(I2S.DEVICE_0)\nrx.channel_config(rx.CHANNEL_0, rx.RECEIVER, align_mode = I2S.STANDARD_MODE)\nrx.set_sample_rate(16000)\ntx = I2S(I2S.DEVICE_2)\ntx.channel_config(tx.CHANNEL_1, tx.TRANSMITTER, align_mode = I2S.RIGHT_JUSTIFYING_MODE)\ntx.set_sample_rate(16000)\n\nwhile True:\n    audio = rx.record(256)\n    audio_data = audio.to_bytes()\n    play_audio = Audio(audio_data)\n    tx.play(play_audio)\n```"}, "/soft/maixpy/zh/api_reference/Maix/index.html": {"title": "Maix库", "content": "---\ntitle: Maix库\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Maix库\n---\n\n\n\n* [FPIOA](./fpioa.html)\n* [GPIO](./gpio.html)\n* [KPU](./kpu.html)\n* [FFT](./fft.html)\n* [I2S](./i2s.html)\n* [Audio](./audio.html) \n* [freq](./freq.html)\n* [utils](./utils.html)"}, "/soft/maixpy/zh/api_reference/Maix/gpio.html": {"title": "GPIO", "content": "---\ntitle: GPIO\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: GPIO\n---\n\n\nGeneral Purpose Input Output （通用输入/输出）简称为 GPIO，或总线扩展器。\n\nK210上有高速 GPIO(GPIOHS) 和通用 GPIO\n在 K210 上， GPIO 有一下特征：\n* 高速 GPIO：\n\n  高速 GPIO 为 GPIOHS，共 32 个。具有如下特点：\n  * 可配置输入输出信号\n  * 每个 IO 具有独立中断源\n  * 中断支持边沿触发和电平触发\n  * 每个 IO 可以分配到 FPIOA 上 48 个管脚之一\n  * 可配置上下拉，或者高阻\n\n* 通用 GPIO：\n\n    通用 GPIO 共 8 个，具有如下特点:\n    * 8 个 IO 使用一个中断源\n    * 可配置输入输出信号\n    * 可配置触发 IO 总中断，边沿触发和电平触发\n    * 每个 IO 可以分配到 FPIOA 上 48 个管脚之一\n\n\n**注意**:\n\n一下 GPIOHS 默认已经被使用， 程序中如非必要尽量不要使用：\n\n| GPIOHS | 功能|\n| ------ | --- |\n| GPIOHS31 | LCD_DC      |\n| GPIOHS30 | LCD_RST     |\n| GPIOHS29 | SD_CS       |\n| GPIOHS28 | MIC_LED_CLK |\n| GPIOHS27 | MIC_LED_DATA |\n\n\n\n## 构造函数\n\n```python\nclass GPIO(ID, MODE, PULL, VALUE)\n```\n\n通过指定的参数新建一个 SPI 对象\n\n### 参数\n\n* `ID`： 使用的 GPIO 引脚(一定要使用 GPIO 里带的常量来指定)\n\n* `MODE`： GPIO模式\n\n  • GPIO.IN就是输入模式\n\n  • GPIO.OUT就是输出模式\n\n* `PULL`： GPIO上下拉模式\n\n  • GPIO.PULL_UP 上拉\n\n  ​• GPIO.PULL_DOWN 下拉\n\n  ​• GPIO.PULL_NONE  即不上拉也不下拉\n\n\n## 方法\n\n\n### value\n\n修改/读取 GPIO 引脚状态\n\n```python\nGPIO.value([value])\n```\n\n#### 参数\n\n* `[value]`： 可选参数，如果此参数不为空，则返回当前 GPIO 引脚状态\n\n\n#### 返回值\n\n如果 `[value]` 参数不为空，则返回当前 GPIO 引脚状态\n\n\n### irq\n\n配置一个中断处理程序，当 `pin` 的触发源处于活动状态时调用它。如果管脚模式为 pin.in，则触发源是管脚上的外部值。\n\n```python\nGPIO.irq(CALLBACK_FUNC,TRIGGER_CONDITION,GPIO.WAKEUP_NOT_SUPPORT,PRORITY)\n```\n\n#### 参数\n\n\n* `CALLBACK_FUNC`：中断回调函数，当中断触发的时候被调用，一个入口函数 `pin_num`\n\n  ​• PIN_NUM 返回的是触发中断的 GPIO 引脚号(只有GPIOHS支持中断，所以这里的引脚号也是GPIOHS的引脚号)\n\n* `TRIGGER_CONDITION`：GPIO 引脚的中断触发模式\n\n  ​• GPIO.IRQ_RISING 上升沿触发\n\n  ​• GPIO.IRQ_FALLING 下降沿触发\n\n  ​• GPIO.IRQ_BOTH  上升沿和下降沿都触发\n\n\n#### 返回值\n\n无\n\n### disirq\n\n关闭中断\n\n```python\nGPIO.disirq()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n### mode\n\n设置 GPIO 输入输出模式\n\n```python\nGPIO.mode(MODE)\n```\n\n#### 参数\n\n* MODE\n\n  • `GPIO.IN` 输入模式\n\n  • `GPIO.PULL_UP` 上拉输入模式\n  \n  • `GPIO.PULL_DOWN` 下拉输入模式\n\n  • `GPIO.OUT` 输出模式\n\n#### 返回值\n\n无\n\n## 常量\n\n* `GPIO0`: GPIO0\n* `GPIO1`: GPIO1\n* `GPIO2`: GPIO2\n* `GPIO3`: GPIO3\n* `GPIO4`: GPIO4\n* `GPIO5`: GPIO5\n* `GPIO6`: GPIO6\n* `GPIO7`: GPIO7\n* `GPIOHS0`: GPIOHS0\n* `GPIOHS1`: GPIOHS1\n* `GPIOHS2`: GPIOHS2\n* `GPIOHS3`: GPIOHS3\n* `GPIOHS4`: GPIOHS4\n* `GPIOHS5`: GPIOHS5\n* `GPIOHS6`: GPIOHS6\n* `GPIOHS7`: GPIOHS7\n* `GPIOHS8`: GPIOHS8\n* `GPIOHS9`: GPIOHS9\n* `GPIOHS10`: GPIOHS10\n* `GPIOHS11`: GPIOHS11\n* `GPIOHS12`: GPIOHS12\n* `GPIOHS13`: GPIOHS13\n* `GPIOHS14`: GPIOHS14\n* `GPIOHS15`: GPIOHS15\n* `GPIOHS16`: GPIOHS16\n* `GPIOHS17`: GPIOHS17\n* `GPIOHS18`: GPIOHS18\n* `GPIOHS19`: GPIOHS19\n* `GPIOHS20`: GPIOHS20\n* `GPIOHS21`: GPIOHS21\n* `GPIOHS22`: GPIOHS22\n* `GPIOHS23`: GPIOHS23\n* `GPIOHS24`: GPIOHS24\n* `GPIOHS25`: GPIOHS25\n* `GPIOHS26`: GPIOHS26\n* `GPIOHS27`: GPIOHS27\n* `GPIOHS28`: GPIOHS28\n* `GPIOHS29`: GPIOHS29\n* `GPIOHS30`: GPIOHS30\n* `GPIOHS31`: GPIOHS31\n* `GPIO.IN`: 输入模式\n* `GPIO.OUT`: 输出模式\n* `GPIO.PULL_UP`: 上拉\n* `GPIO.PULL_DOWN`: 下拉\n* `GPIO.PULL_NONE`: 即不上拉也不下拉\n* `GPIO.IRQ_RISING`: 上升沿触发\n* `GPIO.IRQ_FALLING`:下降沿触发\n* `GPIO.IRQ_BOTH`: 上升沿和下降沿都触发\n\n\n### DEMO1: 点亮 LED\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](../builtin_py/board_info.html)。\n\n```python\nimport utime\nfrom Maix import GPIO\nfrom board import board_info\nfrom fpioa_manager import fm\n\nfm.register(board_info.LED_R,fm.fpioa.GPIO0)\nled_r=GPIO(GPIO.GPIO0,GPIO.OUT)\nutime.sleep_ms(500)\nled_r.value()\nfm.unregister(board_info.LED_R)\n```\n\n### DEMO2: 按键按下点亮 LED\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](../builtin_py/board_info.html)。\n\n```python\nimport utime\nfrom Maix import GPIO\nfrom board import board_info\nfrom fpioa_manager import fm\n\nfm.register(board_info.LED_R,fm.fpioa.GPIO0)\nled_b = GPIO(GPIO.GPIO0,GPIO.OUT)\nled_b.value(1)\n\nfm.register(board_info.BOOT_KEY, fm.fpioa.GPIOHS1)\nkey = GPIO(GPIO.GPIOHS1, GPIO.IN)\n\nutime.sleep_ms(100)\nwhile True:\n    if key.value() == 0: # 等待按键按下\n        led_b.value(0)\n        utime.sleep_ms(1000)\n        break\n    utime.sleep_ms(10)\n\n\nled_b.value(1)\n\nfm.unregister(board_info.LED_R)\nfm.unregister(board_info.BOOT_KEY)\n```\n\n### DEMO3: 在 3 秒内等待按键触发中断\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](../builtin_py/board_info.html)。\n\n```python\nimport utime\nfrom Maix import GPIO\nfrom board import board_info\nfrom fpioa_manager import fm\n\ndef test_irq(pin_num):\n    print(\"key\", pin_num, \"\\n\")\n\nfm.register(board_info.BOOT_KEY, fm.fpioa.GPIOHS0)\nkey = GPIO(GPIO.GPIOHS0, GPIO.IN, GPIO.PULL_NONE)\n\nutime.sleep_ms(100)\nkey.irq(test_irq, GPIO.IRQ_BOTH, GPIO.WAKEUP_NOT_SUPPORT,7)\nutime.sleep_ms(3000) # 在 3 秒内等待触发\n\nkey.disirq() # 禁用中断\nfm.unregister(board_info.BOOT_KEY)\n```"}, "/soft/maixpy/zh/api_reference/Maix/fft.html": {"title": "FFT运算", "content": "---\ntitle: FFT运算\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: FFT运算\n---\n\nFFT快速傅里叶变换模块，对输入数据进行傅里叶变换并返回相应的频率幅值, FFT快速傅里叶运算可以将时域信号转换为频域信号\n\n## 模块函数\n\n###  运算函数\n\n输入时域数据并进行傅里叶变换\n\n```\nfrom maix import FFT\nres = FFT.run(data, points, shift)\n```\n\n####  参数\n\n* `data`: 输入的时域数据，`bytearray` 类型  \n\n* `points`: FFT运算点数，仅支持64, 128，256和512点\n\n* `shift`: 偏移，默认为0  \n\n####  返回值\n\n`res`: 返回计算后的频域数据，以 `list` 类型呈现，该列表有 `points` 个元组，每个元组有 2 个元素，第一个元素为实部，第二个为虚部 \n\n### 频率函数\n\nFFT\n\n```\nres = FFT.freq(points, sample_rate)\n```\n\n####  参数\n\n* `points`: 计算点数\n\n* `sample_rate`: 采样率\n\n####  返回值\n\n`res` : 返回一个列表，该列表存放的进行运算后后所有频率点的频率值\n\n### 幅值函数\n\n用于计算 FFT 运算后的各个频率点的幅值，目前用作测试，用户可以自己在python自行写幅值处理函数\n\n```\namp = FFT.amplitude(FFT_res)\n```\n\n#### 参数\n\n`FFT_res`: 函数 `run` 运行后的结果\n\n\n#### 返回值\n\n`res` : 返回一个列表，该列表存放了各个频率点的幅值\n\n### 例程\n\n采集声音并进行 FFT 运算，将运算后的数据在屏幕上显示为柱状图: [demo_fft_spectrum](https://github.com/sipeed/MaixPy_scripts/blob/master/hardware/demo_fft_spectrum.py)\n\n效果：\n<iframe width=\"600\" height=\"350\"  src=\"//player.bilibili.com/player.html?aid=44617696&cid=78104545&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>"}, "/soft/maixpy/zh/api_reference/Maix/kpu.html": {"title": "KPU", "content": "---\ntitle: KPU\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: KPU\n---\n\n\nKPU是通用的神经网络处理器，它可以在低功耗的情况下实现卷积神经网络计算，时时获取被检测目标的大小、坐标和种类，对人脸或者物体进行检测和分类。\n\n* KPU 具备以下几个特点：\n  * 支持主流训练框架按照特定限制规则训练出来的定点化模型\n  * 对网络层数无直接限制，支持每层卷积神经网络参数单独配置，包括输入输出通道数目、输入输 出行宽列高\n  * 支持两种卷积内核 1x1 和 3x3\n  * 支持任意形式的激活函数\n  * 实时工作时最大支持神经网络参数大小为 5.5MiB 到 5.9MiB\n  * 非实时工作时最大支持网络参数大小为（Flash 容量-软件体积）\n\n\n\n\n## 例程\n\n### 运行人脸检测\n\n模型下载地址：[http://dl.sipeed.com/MAIX/MaixPy/model](http://dl.sipeed.com/MAIX/MaixPy/model) , 下载`face_model_at_0x300000.kfpkg`\n\n完整例程： [face_find](https://github.com/sipeed/MaixPy_scripts/tree/master/machine_vision/face_find)\n\n### 运行特征图\n\n模型下载地址：[http://dl.sipeed.com/MAIX/MaixPy/model](http://dl.sipeed.com/MAIX/MaixPy/model) , 下载`face_model_at_0x300000.kfpkg`\n\n该模型是8bit定点模型，约380KB大小，层信息为：\n```\n1 2        :160x120\n3 4 5 6\t   :80x60\n7 8 9 10   :40x30\n11~16      :20x15\n```\n\n```python\nimport sensor\nimport image\nimport lcd\nimport KPU as kpu\nindex=3  \nlcd.init()\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\ntask=kpu.load(0x300000)\nimg=image.Image()\ninfo=kpu.netinfo(task)\nlayer=info[index]\nw=layer.wo()\nh=layer.ho()\nnum=int(320*240/w/h)\nlist=[None]*num\nx_step=int(320/w)\ny_step=int(240/h)\nimg_lcd=image.Image()\nwhile True:\n    img=sensor.snapshot()\n    fmap=kpu.forward(task,img,index)\n    for i in range(0,num):\n        list[i]=kpu.fmap(fmap,i)\n    for i in range(0,num):\n        list[i].stretch(64,255)\n    for i in range(0,num):\n        a=img_lcd.draw_image(list[i],((i%x_step)*w,(int(i/x_step))*h))\n\t   lcd.display(img_lcd)\n   \tkpu.fmap_free(fmap)\n```\n\n-----------------------------\n\n\n## 模块方法\n\n### load\n\n从flash或者文件系统中加载模型\n\n```python\nKPU.load(offset, file_path)\n```\n\n#### 参数\n\n`offset` 和 `file_path` 参数只能二选一，不需要关键词，直接传参即可\n\n* `offset`: 模型在 flash 中的偏移大小，如 `0xd00000` 表示模型烧录在13M起始的地方, `0x300000`表示在 `Flash` `3M`的地方\n* `file_path`: 模型在文件系统中为文件名， 如 `“/sd/xxx.kmodel”`\n\n##### 返回\n\n如果正确加载，会返回返回值， 否则会抛出错误， 请看抛出的错误提示， 另外错误代码参考[这里](https://github.com/sipeed/MaixPy/blob/fa3cf2c96353fa698e9386e42be8b3c9cf495114/components/kendryte_sdk/include/sipeed_kpu.h#L6-L23)\n\n如果发现错误代码是小于 `2000` 的值， 则是固件版本太低，需要更新固件版本\n\n* `kpu_net`: kpu 网络对象\n\n### load_flash\n\n与 load 方法作用相同，\n\n```python\nkpu.load_flash(model_addr, is_dual_buf, batch_size, spi_speed)\n```\n\n#### 参数\n\n* `model_addr`：Flash addr 经过预处理的模型烧录到 flash 中的偏移地址。注意，这里需要预处理模型文件[说明](https://github.com/sipeed/MaixPy_scripts/blob/master/machine_vision/load_big_model/README_ZH.md)。\n* `is_dual_buf`：`0`,单一缓冲区加载，使用较少的 RAM 和较慢的速度动态加载该模型文件； `1`，开启双缓冲加载，需要更大的 RAM， 运行速度相对较快。\n* `batch_size`：将 `is_dual_buf` 设置为 1 时，需要设置 load batch_size，建议值为 `0x4000~0x10000`，可以测试出模型的最佳值。如果 `is_dual_buf` 为 0 则设置为 0\n* `spi_speed`：使用 SPI flash 加载模型文件时，我们会暂时将 flash 设置为高速模式，并设置所需的 spi 时钟频率。该值应 <= 80000000(实际频率，设值可能不等于实际频率。)\n\n#### 返回值\n\n* `kpu_net`: kpu 网络对象\n\n### init_yolo2\n\n\n为`yolo2`网络模型传入初始化参数， 只有使用`yolo2`时使用\n\n```python\nKPU.init_yolo2(kpu_net, threshold, nms_value, anchor_num, anchor)\n```\n\n比如：\n\n```python\nimport KPU as kpu\ntask = kpu.load(0x300000)\nanchor = (1.889, 2.5245, 2.9465, 3.94056, 3.99987, 5.3658, 5.155437, 6.92275, 6.718375, 9.01025)\nkpu.init_yolo2(task, 0.5, 0.3, 5, anchor)\n```\n\n#### 参数\n\n* `kpu_net`: kpu 网络对象, 即加载的模型对象, `KPU.load()`的返回值\n* `threshold`: 概率阈值， 只有是这个物体的概率大于这个值才会输出结果， 取值范围：[0, 1]\n* `nms_value`: box_iou 门限, 为了防止同一个物体被框出多个框，当在同一个物体上框出了两个框，这两个框的交叉区域占两个框总占用面积的比例 如果小于这个值时， 就取其中概率最大的一个框\n* `anchor_num`: anchor 的锚点数， 这里固定为 `len(anchors)//2`\n* `anchor`: 锚点参数与模型参数一致，同一个模型这个参数是固定的，和模型绑定的（训练模型时即确定了）， 不能改成其它值。\n\n#### 返回值\n\n* `success`： `bool`类型， 是否成功\n\n\n### deinit\n\n释放模型占用的内存， 立即释放， 但是变量还在，可以使用`del kpu_net_object` 的方式删除，\n另外也可以直接只使用`del kpu_net_object`来标记对象已被删除，下一次`GC`进行内存回收或者手动调用`gc.collect()`时，会自动释放内存\n\n```python\nKPU.deinit(kpu_net)\n```\n\n比如：\n\n```python\nimport KPU as kpu\nimport gc\ntask = kpu.load(0x300000)\nkpu.deinit(task)\ndel task\ngc.collect()\n```\n\n或者：\n\n```python\nimport KPU as kpu\nimport gc\ntask = kpu.load(0x300000)\ndel task\ngc.collect()\n```\n\n\n#### 参数\n\n`kpu_net`: `KPU.load()` 返回的 `kpu_net` 对象\n\n#### 返回值\n\n* `success`： `bool` 类型， 是否成功\n\n\n### run_yolo2\n\n```python\nimport KPU as kpu\nimport image\ntask = kpu.load(offset or file_path)\nanchor = (1.889, 2.5245, 2.9465, 3.94056, 3.99987, 5.3658, 5.155437, 6.92275, 6.718375, 9.01025)\nkpu.init_yolo2(task, 0.5, 0.3, 5, anchor)\nimg = image.Image()\nkpu.run_yolo2(task, img) \n```\n> 以上为节选代码，并不是完整部分，详细请看[人脸检测](https://github.com/sipeed/MaixPy_scripts/blob/master/machine_vision/face_find/demo_find_face.py)具体的代码\n\n#### 参数\n\n* `kpu_net`: kpu_load 返回的 kpu_net 对象\n* `image_t`：从 sensor 采集到的图像\n\n##### 返回\n\n* `list`: kpu_yolo2_find 的列表 \n\n### forward\n\n计算已加载的网络模型到指定层数，输出目标层的特征图\n\n```python\nfmap=KPU.forward(kpu_net, img, end_layer)\n```\n\n```python\nimport KPU as kpu\ntask = kpu.load(offset or file_path)\n……\nfmap=kpu.forward(task,img, 3)\n```\n\n#### 参数\n\n* `kpu_net`: kpu_net 对象\n* `img`: 图像 `image.Image` 对象\n* `end_layer`: 指定计算到网络的第几层， 取值从`0`开始\n\n##### 返回\n\n* `fmap`: 特征图对象，内含当前层所有通道的特征图\n\n\n### fmap\n\n取特征图的指定通道数据到`image.Image`对象\n\n```python\nimg=KPU.fmap(fmap, channel)\n```\n\n#### 参数\n\n* `fmap`: 特征图 对象\n* `channel`: 指定特征图的通道号, 从`0`开始\n\n##### 返回\n\n* `img`: 特征图对应通道生成的灰度图，类型`image.Image`\n\n\n### fmap_free\n\n释放特征图对象\n\n```python\nKPU.fmap_free(fmap)\n```\n\n#### 参数\n\n* `fmap`: 特征图 对象\n\n##### 返回\n\n* 无\n\n### netinfo \n\n获取模型的网络结构信息\n\n```python\ninfo_list = kpu.netinfo(task)\n```\n\n#### 参数\n\n* `kpu_net`: kpu_net 对象, `KPU.load()`返回值\n\n##### 返回\n\n* `info_list`：所有层的信息list, 包含信息为：\n  * `index`：当前层在网络中的层数\n  * `wi`：输入宽度\n  * `hi`：输入高度\n  * `wo`：输出宽度\n  * `ho`：输出高度\n  * `chi`：输入通道数\n  * `cho`：输出通道数\n  * `dw`：是否为depth wise layer\n  * `kernel_type`：卷积核类型，0为1x1， 1为3x3\n  * `pool_type`：池化类型，0不池化; 1：2x2 max pooling; 2:...\n  * `para_size`：当前层的卷积参数字节数\n\n\n### set_outputs\n\n```python\nsuccess = set_outputs(kput_net, out_idx, width, height, channel)\n```\n\n手动设置输出层形状， 对于 nncase v0.2.0 转换出来的 V4 的 kmodel 模型，\n在 `load` 之后需要调用此函数手动设置输出层形状， V3 模型不需要\n\n\n#### 参数\n\n* `kpu_net`: kpu_net 对象\n* `out_idx`: 输出层下表， 从 `0` 开始， 比如第一层输出层是`0`\n* `width`： 层宽度， 如果是一维输出，则为`1`\n* `height`: 层高度， 如果是一维输出，则为`1`\n* `channnel`： 层通道数，如果是一维输出，则这里为一维输出的长度\n\n##### 返回\n\n* `success`： 是否设置成功， 如果不成功，注意看输出的提示信息， 参考[错误代码](https://github.com/sipeed/MaixPy/blob/fa3cf2c96353fa698e9386e42be8b3c9cf495114/components/kendryte_sdk/include/sipeed_kpu.h#L6-L23)\n\n\n### memtest\n\n打印内存使用情况，包括`GC`内存和系统堆内存\n\n* 注意执行这个函数会自动先执行`gc.collect()`进行内存回收一次，再打印`GC`剩余内存\n* 系统堆内存只做参考，不一定准确，有时可能出现已经释放了内存，但是显示依然没有释放，以实际能不能分配到内存为准\n\n```python\nKPU.memtest()\n```\n### face_encode\n\n将 `forward` 返回的特征图进行量化，更多详情请查看：[kpu issue](https://github.com/sipeed/MaixPy/issues/342)\n\n```python\nfeature = kpu.face_encode(fmap[:])\n```\n\n#### 参数\n\n`fmap[:]`：`list` 类型，将 `forward` 函数返回值转化为列表所得到的\n\n#### 返回值\n\n`feature`：`list` 类型，量化后的列表\n\n### face_compare\n\n将 face_encode 返回的量化值与已录入的人脸进行比较\n\n```python\nscore = kpu.face_compare(record_ftrs[j], feature)\n```\n\n#### 参数\n\n`record_ftrs[j] `：`list` 类型，以录入的人脸数据\n`feature`：`list` 类型，需要比较的人脸数据， `face_encode` 的返回值\n\n#### 返回值\n\n`score`：`int` 类型，比较得分（0~100），得分越高相似度越大"}, "/soft/maixpy/zh/api_reference/Maix/fpioa.html": {"title": "FPIOA (现场可编程 IO 阵列， Field Programmable Input and Output Array)", "content": "---\ntitle: FPIOA (现场可编程 IO 阵列， Field Programmable Input and Output Array)\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: FPIOA (现场可编程 IO 阵列， Field Programmable Input and Output Array)\n---\n\n\nK210 支持每个外设随意映射到任意引脚， 使用 FPIOA 功能来实现。\n\n**注意**:\n\n以下 GPIOHS 默认已经被使用， 程序中如非必要尽量不要使用：\n\n| GPIOHS | 功能| 描述 |\n| ------ | --- | --- |\n| GPIOHS5 | LCD_DC      | LCD 读写信号引脚 |\n| GPIOHS4 | LCD_RST     | LCD 复位芯片脚 |\n| GPIOHS29 | SD_CS       | SD 卡 SPI 片选 |\n| GPIOHS28 | MIC_LED_CLK | SK9822_DAT |\n| GPIOHS27 | MIC_LED_DATA | SK9822_CLK |\n\n\n\n## 类 `FPIOA`\n\n### 方法\n\n#### help(func)\n\n显示外设及其简要描述\n\n##### 参数\n\n* `func`： 外设名（功能/编号），可以不传参， 则以表格的形式显示所有外设名即简要描述，这个表格也可以在本页的末尾找到（[附录：外设表](#附录：-外设表)）；</br>\n   如果传参，则传一个整型值， 找到该编号对应的外设后会打印外设名和描述，</br>\n   比如 `FPIOA.JTAG_TCLK` 或者 `fm.fpioa.JTAG_TCLK`（`fm`在本页后面介绍） 或者 `0`\n\n比如：\n\n```python\nfrom Maix import FPIOA\n\nfpioa = FPIOA()\nfpioa.help()\nfpioa.help(0)\nfpioa.help(fpioa.JTAG_TCLK)\nfm.fpioa.help()\nfm.fpioa.help(fm.fpioa.JTAG_TCLK)\n\n```\n\n##### 返回\n\n外设名及其简要描述\n\n#### set_function(pin, func)\n\n设置引脚对应的外设功能， 即引脚映射\n\n##### 参数\n\n* `pin`： 引脚编号，取值 [0, 47]， 具体的引脚连接请看电路图， 也可以使用 `board_info.` 然后按 `TAB` 按键补全来获得板子的常用引脚，比如 `board_info.LED_G`\n* `func`： 外设功能，传一个整型值，可以通过  `fm.fpioa.help()`或者查本页末尾的 [附录： 外设表](#附录：-外设表) 表得到\n\n比如 需要将连接 `绿色 LED` 的引脚映射到 `高速 GPIO0` 上：\n\n```python\nfpioa = FPIOA()\nfpioa.set_function(board_info.LED_G, fm.fpioa.GPIOHS0)\n```\n\n#### get_Pin_num(func)\n\n获取外设映射到哪个引脚上了\n\n##### 参数\n\n* `func`： 外设功能，传一个整型值，可以通过  `fm.fpioa.help()`或者查本页末尾的 [附录： 外设表](#附录：-外设表) 表得到\n\n比如：\n\n```python\nfpioa = FPIOA()\nfpioa.set_function(board_info.LED_G, fm.fpioa.GPIOHS0)\npin = fpioa.get_Pin_num(fm.fpioa.GPIOHS0)\nif pin == board_info.LED_G:\n    print(\"set function ok\")\n```\n\n\n## 附录： 外设表\n\n|   外设功能（func）  |             简要描述              |\n| ----------------- | -------------------------------- |\n|  JTAG_TCLK        |  JTAG Test Clock                 |\n|  JTAG_TDI         |  JTAG Test Data In               |\n|  JTAG_TMS         |  JTAG Test Mode Select           |\n|  JTAG_TDO         |  JTAG Test Data Out              |\n|  SPI0_D0          |  SPI0 Data 0                     |\n|  SPI0_D1          |  SPI0 Data 1                     |\n|  SPI0_D2          |  SPI0 Data 2                     |\n|  SPI0_D3          |  SPI0 Data 3                     |\n|  SPI0_D4          |  SPI0 Data 4                     |\n|  SPI0_D5          |  SPI0 Data 5                     |\n|  SPI0_D6          |  SPI0 Data 6                     |\n|  SPI0_D7          |  SPI0 Data 7                     |\n|  SPI0_SS0         |  SPI0 Chip Select 0              |\n|  SPI0_SS1         |  SPI0 Chip Select 1              |\n|  SPI0_SS2         |  SPI0 Chip Select 2              |\n|  SPI0_SS3         |  SPI0 Chip Select 3              |\n|  SPI0_ARB         |  SPI0 Arbitration                |\n|  SPI0_SCLK        |  SPI0 Serial Clock               |\n|  UARTHS_RX        |  UART High speed Receiver        |\n|  UARTHS_TX        |  UART High speed Transmitter     |\n|  RESV6            |  Reserved function               |\n|  RESV7            |  Reserved function               |\n|  CLK_SPI1         |  Clock SPI1                      |\n|  CLK_I2C1         |  Clock I2C1                      |\n|  GPIOHS0          |  GPIO High speed 0               |\n|  GPIOHS1          |  GPIO High speed 1               |\n|  GPIOHS2          |  GPIO High speed 2               |\n|  GPIOHS3          |  GPIO High speed 3               |\n|  GPIOHS4          |  GPIO High speed 4               |\n|  GPIOHS5          |  GPIO High speed 5               |\n|  GPIOHS6          |  GPIO High speed 6               |\n|  GPIOHS7          |  GPIO High speed 7               |\n|  GPIOHS8          |  GPIO High speed 8               |\n|  GPIOHS9          |  GPIO High speed 9               |\n|  GPIOHS10         |  GPIO High speed 10              |\n|  GPIOHS11         |  GPIO High speed 11              |\n|  GPIOHS12         |  GPIO High speed 12              |\n|  GPIOHS13         |  GPIO High speed 13              |\n|  GPIOHS14         |  GPIO High speed 14              |\n|  GPIOHS15         |  GPIO High speed 15              |\n|  GPIOHS16         |  GPIO High speed 16              |\n|  GPIOHS17         |  GPIO High speed 17              |\n|  GPIOHS18         |  GPIO High speed 18              |\n|  GPIOHS19         |  GPIO High speed 19              |\n|  GPIOHS20         |  GPIO High speed 20              |\n|  GPIOHS21         |  GPIO High speed 21              |\n|  GPIOHS22         |  GPIO High speed 22              |\n|  GPIOHS23         |  GPIO High speed 23              |\n|  GPIOHS24         |  GPIO High speed 24              |\n|  GPIOHS25         |  GPIO High speed 25              |\n|  GPIOHS26         |  GPIO High speed 26              |\n|  GPIOHS27         |  GPIO High speed 27              |\n|  GPIOHS28         |  GPIO High speed 28              |\n|  GPIOHS29         |  GPIO High speed 29              |\n|  GPIOHS30         |  GPIO High speed 30              |\n|  GPIOHS31         |  GPIO High speed 31              |\n|  GPIO0            |  GPIO pin 0                      |\n|  GPIO1            |  GPIO pin 1                      |\n|  GPIO2            |  GPIO pin 2                      |\n|  GPIO3            |  GPIO pin 3                      |\n|  GPIO4            |  GPIO pin 4                      |\n|  GPIO5            |  GPIO pin 5                      |\n|  GPIO6            |  GPIO pin 6                      |\n|  GPIO7            |  GPIO pin 7                      |\n|  UART1_RX         |  UART1 Receiver                  |\n|  UART1_TX         |  UART1 Transmitter               |\n|  UART2_RX         |  UART2 Receiver                  |\n|  UART2_TX         |  UART2 Transmitter               |\n|  UART3_RX         |  UART3 Receiver                  |\n|  UART3_TX         |  UART3 Transmitter               |\n|  SPI1_D0          |  SPI1 Data 0                     |\n|  SPI1_D1          |  SPI1 Data 1                     |\n|  SPI1_D2          |  SPI1 Data 2                     |\n|  SPI1_D3          |  SPI1 Data 3                     |\n|  SPI1_D4          |  SPI1 Data 4                     |\n|  SPI1_D5          |  SPI1 Data 5                     |\n|  SPI1_D6          |  SPI1 Data 6                     |\n|  SPI1_D7          |  SPI1 Data 7                     |\n|  SPI1_SS0         |  SPI1 Chip Select 0              |\n|  SPI1_SS1         |  SPI1 Chip Select 1              |\n|  SPI1_SS2         |  SPI1 Chip Select 2              |\n|  SPI1_SS3         |  SPI1 Chip Select 3              |\n|  SPI1_ARB         |  SPI1 Arbitration                |\n|  SPI1_SCLK        |  SPI1 Serial Clock               |\n|  SPI_SLAVE_D0     |  SPI Slave Data 0                |\n|  SPI_SLAVE_SS     |  SPI Slave Select                |\n|  SPI_SLAVE_SCLK   |  SPI Slave Serial Clock          |\n|  I2S0_MCLK        |  I2S0 Master Clock               |\n|  I2S0_SCLK        |  I2S0 Serial Clock(BCLK)         |\n|  I2S0_WS          |  I2S0 Word Select(LRCLK)         |\n|  I2S0_IN_D0       |  I2S0 Serial Data Input 0        |\n|  I2S0_IN_D1       |  I2S0 Serial Data Input 1        |\n|  I2S0_IN_D2       |  I2S0 Serial Data Input 2        |\n|  I2S0_IN_D3       |  I2S0 Serial Data Input 3        |\n|  I2S0_OUT_D0      |  I2S0 Serial Data Output 0       |\n|  I2S0_OUT_D1      |  I2S0 Serial Data Output 1       |\n|  I2S0_OUT_D2      |  I2S0 Serial Data Output 2       |\n|  I2S0_OUT_D3      |  I2S0 Serial Data Output 3       |\n|  I2S1_MCLK        |  I2S1 Master Clock               |\n|  I2S1_SCLK        |  I2S1 Serial Clock(BCLK)         |\n|  I2S1_WS          |  I2S1 Word Select(LRCLK)         |\n|  I2S1_IN_D0       |  I2S1 Serial Data Input 0        |\n|  I2S1_IN_D1       |  I2S1 Serial Data Input 1        |\n|  I2S1_IN_D2       |  I2S1 Serial Data Input 2        |\n|  I2S1_IN_D3       |  I2S1 Serial Data Input 3        |\n|  I2S1_OUT_D0      |  I2S1 Serial Data Output 0       |\n|  I2S1_OUT_D1      |  I2S1 Serial Data Output 1       |\n|  I2S1_OUT_D2      |  I2S1 Serial Data Output 2       |\n|  I2S1_OUT_D3      |  I2S1 Serial Data Output 3       |\n|  I2S2_MCLK        |  I2S2 Master Clock               |\n|  I2S2_SCLK        |  I2S2 Serial Clock(BCLK)         |\n|  I2S2_WS          |  I2S2 Word Select(LRCLK)         |\n|  I2S2_IN_D0       |  I2S2 Serial Data Input 0        |\n|  I2S2_IN_D1       |  I2S2 Serial Data Input 1        |\n|  I2S2_IN_D2       |  I2S2 Serial Data Input 2        |\n|  I2S2_IN_D3       |  I2S2 Serial Data Input 3        |\n|  I2S2_OUT_D0      |  I2S2 Serial Data Output 0       |\n|  I2S2_OUT_D1      |  I2S2 Serial Data Output 1       |\n|  I2S2_OUT_D2      |  I2S2 Serial Data Output 2       |\n|  I2S2_OUT_D3      |  I2S2 Serial Data Output 3       |\n|  RESV0            |  Reserved function               |\n|  RESV1            |  Reserved function               |\n|  RESV2            |  Reserved function               |\n|  RESV3            |  Reserved function               |\n|  RESV4            |  Reserved function               |\n|  RESV5            |  Reserved function               |\n|  I2C0_SCLK        |  I2C0 Serial Clock               |\n|  I2C0_SDA         |  I2C0 Serial Data                |\n|  I2C1_SCLK        |  I2C1 Serial Clock               |\n|  I2C1_SDA         |  I2C1 Serial Data                |\n|  I2C2_SCLK        |  I2C2 Serial Clock               |\n|  I2C2_SDA         |  I2C2 Serial Data                |\n|  CMOS_XCLK        |  DVP System Clock                |\n|  CMOS_RST         |  DVP System Reset                |\n|  CMOS_PWDN        |  DVP Power Down Mode             |\n|  CMOS_VSYNC       |  DVP Vertical Sync               |\n|  CMOS_HREF        |  DVP Horizontal Reference output |\n|  CMOS_PCLK        |  Pixel Clock                     |\n|  CMOS_D0          |  Data Bit 0                      |\n|  CMOS_D1          |  Data Bit 1                      |\n|  CMOS_D2          |  Data Bit 2                      |\n|  CMOS_D3          |  Data Bit 3                      |\n|  CMOS_D4          |  Data Bit 4                      |\n|  CMOS_D5          |  Data Bit 5                      |\n|  CMOS_D6          |  Data Bit 6                      |\n|  CMOS_D7          |  Data Bit 7                      |\n|  SCCB_SCLK        |  SCCB Serial Clock               |\n|  SCCB_SDA         |  SCCB Serial Data                |\n|  UART1_CTS        |  UART1 Clear To Send             |\n|  UART1_DSR        |  UART1 Data Set Ready            |\n|  UART1_DCD        |  UART1 Data Carrier Detect       |\n|  UART1_RI         |  UART1 Ring Indicator            |\n|  UART1_SIR_IN     |  UART1 Serial Infrared Input     |\n|  UART1_DTR        |  UART1 Data Terminal Ready       |\n|  UART1_RTS        |  UART1 Request To Send           |\n|  UART1_OUT2       |  UART1 User-designated Output 2  |\n|  UART1_OUT1       |  UART1 User-designated Output 1  |\n|  UART1_SIR_OUT    |  UART1 Serial Infrared Output    |\n|  UART1_BAUD       |  UART1 Transmit Clock Output     |\n|  UART1_RE         |  UART1 Receiver Output Enable    |\n|  UART1_DE         |  UART1 Driver Output Enable      |\n|  UART1_RS485_EN   |  UART1 RS485 Enable              |\n|  UART2_CTS        |  UART2 Clear To Send             |\n|  UART2_DSR        |  UART2 Data Set Ready            |\n|  UART2_DCD        |  UART2 Data Carrier Detect       |\n|  UART2_RI         |  UART2 Ring Indicator            |\n|  UART2_SIR_IN     |  UART2 Serial Infrared Input     |\n|  UART2_DTR        |  UART2 Data Terminal Ready       |\n|  UART2_RTS        |  UART2 Request To Send           |\n|  UART2_OUT2       |  UART2 User-designated Output 2  |\n|  UART2_OUT1       |  UART2 User-designated Output 1  |\n|  UART2_SIR_OUT    |  UART2 Serial Infrared Output    |\n|  UART2_BAUD       |  UART2 Transmit Clock Output     |\n|  UART2_RE         |  UART2 Receiver Output Enable    |\n|  UART2_DE         |  UART2 Driver Output Enable      |\n|  UART2_RS485_EN   |  UART2 RS485 Enable              |\n|  UART3_CTS        |  UART3 Clear To Send             |\n|  UART3_DSR        |  UART3 Data Set Ready            |\n|  UART3_DCD        |  UART3 Data Carrier Detect       |\n|  UART3_RI         |  UART3 Ring Indicator            |\n|  UART3_SIR_IN     |  UART3 Serial Infrared Input     |\n|  UART3_DTR        |  UART3 Data Terminal Ready       |\n|  UART3_RTS        |  UART3 Request To Send           |\n|  UART3_OUT2       |  UART3 User-designated Output 2  |\n|  UART3_OUT1       |  UART3 User-designated Output 1  |\n|  UART3_SIR_OUT    |  UART3 Serial Infrared Output    |\n|  UART3_BAUD       |  UART3 Transmit Clock Output     |\n|  UART3_RE         |  UART3 Receiver Output Enable    |\n|  UART3_DE         |  UART3 Driver Output Enable      |\n|  UART3_RS485_EN   |  UART3 RS485 Enable              |\n|  TIMER0_TOGGLE1   |  TIMER0 Toggle Output 1          |\n|  TIMER0_TOGGLE2   |  TIMER0 Toggle Output 2          |\n|  TIMER0_TOGGLE3   |  TIMER0 Toggle Output 3          |\n|  TIMER0_TOGGLE4   |  TIMER0 Toggle Output 4          |\n|  TIMER1_TOGGLE1   |  TIMER1 Toggle Output 1          |\n|  TIMER1_TOGGLE2   |  TIMER1 Toggle Output 2          |\n|  TIMER1_TOGGLE3   |  TIMER1 Toggle Output 3          |\n|  TIMER1_TOGGLE4   |  TIMER1 Toggle Output 4          |\n|  TIMER2_TOGGLE1   |  TIMER2 Toggle Output 1          |\n|  TIMER2_TOGGLE2   |  TIMER2 Toggle Output 2          |\n|  TIMER2_TOGGLE3   |  TIMER2 Toggle Output 3          |\n|  TIMER2_TOGGLE4   |  TIMER2 Toggle Output 4          |\n|  CLK_SPI2         |  Clock SPI2                      |\n|  CLK_I2C2         |  Clock I2C2                      |"}, "/soft/maixpy/zh/api_reference/Maix/utils.html": {"title": "Maix.utils", "content": "---\ntitle: Maix.utils\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Maix.utils\n---\n\n\n## gc_heap_size([size])\n\n获取或者设置 GC 堆大小，如果报内存不够时可以考虑设置大一点\n\n### 参数\n\n无 或者 传入新的 GC 堆大小.\n* 如果没有参数就只是获取堆大小；\n* 如果有参数则设置堆大小，然后会自动重启\n\n### 返回值\n\nGC 堆大小\n\n- 使用实例\n\n```python\nimport Maix\n# Maix.utils.gc_heap_size(0x80000) # 固件默认配置为 500KB\nMaix.utils.gc_heap_size(0x96000) # 600KB\n```\n\n## flash_read(flash_offset, size)\n\n从内部 flash 读取 size 指定大小(字节数) 数据\n\n### 参数\n\nflash_offset: flash 地址偏移\n\nflash_offset: flash 地址偏移\n\n## heap_free()\n\n```shell\n>>> Maix.utils.gc_heap_size()\n524288\n>>> Maix.utils.heap_free()\n4374528\n```\n\n\n-----\n\n文章中脚本测试条件为:\n\n- MaixDock\n- MaixPy v0.5.0_246(标准版固件)"}, "/soft/maixpy/zh/api_reference/machine_vision/image/image.html": {"title": "image（机器视觉）", "content": "---\ntitle: image（机器视觉）\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: image（机器视觉）\n---\n\n\n移植于 `openmv`， 与 `openmv` 功能相同\n\n## 例程\n\n### 例程 1： 找绿色\n\n```python\nimport sensor\nimport image\nimport lcd\nimport time\nlcd.init()\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\ngreen_threshold   = (0,   80,  -70,   -10,   -0,   30)\nwhile True:\n\timg=sensor.snapshot()\n\tblobs = img.find_blobs([green_threshold])\n\tif blobs:\n\t\tfor b in blobs:\n\t\t\ttmp=img.draw_rectangle(b[0:4])\n\t\t\ttmp=img.draw_cross(b[5], b[6])\n\t\t\tc=img.get_pixel(b[5], b[6])\n\tlcd.display(img)\n```\n\n### 例程 2： 显示 fps\n\n```python\nimport sensor\nimport image\nimport lcd\nimport time\n\nclock = time.clock()\nlcd.init()\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\nsensor.skip_frames(30)\nwhile True:\n    clock.tick()\n    img = sensor.snapshot()\n    fps =clock.fps()\n    img.draw_string(2,2, (\"%2.1ffps\" %(fps)), color=(0,128,0), scale=2)\n    lcd.display(img)\n```\n\n\n### 例程 3： 扫描二维码\n\n```python\nimport sensor\nimport image\nimport lcd\nimport time\n\nclock = time.clock()\nlcd.init()\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.set_vflip(1)\nsensor.run(1)\nsensor.skip_frames(30)\nwhile True:\n    clock.tick()\n    img = sensor.snapshot()\n    res = img.find_qrcodes()\n    fps =clock.fps()\n    if len(res) > 0:\n        img.draw_string(2,2, res[0].payload(), color=(0,128,0), scale=2)\n        print(res[0].payload())\n    lcd.display(img)\n\n```\n\n> 如果使用了镜头，画面会有扭曲，需要矫正画面\n> 使用 `lens_corr` 函数来矫正， 比如 `2.8`mm， `img.lens_corr(1.8)`\n> 无法识别二维码的时候需要用sensor.set_hmirror(1)来调整摄像头的镜像画面\n\n### 例程4 寻找矩阵\n\n```python\n# Find Rects Example\n#\n# 这个例子展示了如何使用april标签代码中的四元检测代码在图像中找到矩形。 四元检测算法以非常稳健的方式检测矩形，并且比基于Hough变换的方法好得多。 例如，即使镜头失真导致这些矩形看起来弯曲，它仍然可以检测到矩形。 圆角矩形是没有问题的！\n# (但是，这个代码也会检测小半径的圆)...\n\nimport sensor, image, time\n\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565) \nsensor.set_framesize(sensor.QQVGA)\nsensor.skip_frames(time = 2000)\nsensor.set_vflip(1)\n\nclock = time.clock()\n\nwhile(True):\n    clock.tick()\n    img = sensor.snapshot()\n\n    # 下面的`threshold`应设置为足够高的值，以滤除在图像中检测到的具有\n    # 低边缘幅度的噪声矩形。最适用与背景形成鲜明对比的矩形。\n\n    for r in img.find_rects(threshold = 10000):\n        img.draw_rectangle(r.rect(), color = (255, 0, 0))\n        for p in r.corners(): img.draw_circle(p[0], p[1], 5, color = (0, 255, 0))\n        print(r)\n\n    print(\"FPS %f\" % clock.fps())\n\n```\n\n### 例程5 寻找Apriltag\n```python\n# AprilTags 示例\n#\n# 此示例显示了OpenMV Cam在OpenMV Cam M7上检测April标签的强大功能。\n# OpenMV2 M4版本无法检测April标签。\n\nimport sensor, image, time, math\n\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QQVGA) # 如果分辨率更大，我们的内存会耗尽...\nsensor.skip_frames(time = 2000)\nsensor.set_auto_gain(False)  # 必须关闭此功能，以防止图像冲洗…\nsensor.set_auto_whitebal(False)  # 必须关闭此功能，以防止图像冲洗…\nclock = time.clock()\n\n# 注意！与find_qrcodes不同，find_apriltags方法不需要对图像进行镜头校正\n\n# apriltag代码最多支持可以同时处理6种tag家族。\n# 返回的tag标记对象，将有其tag标记家族及其在tag标记家族内的id。\n\ntag_families = 0\ntag_families |= image.TAG16H5 # 注释掉，禁用这个家族\ntag_families |= image.TAG25H7 # 注释掉，禁用这个家族\ntag_families |= image.TAG25H9 # 注释掉，禁用这个家族\ntag_families |= image.TAG36H10 # 注释掉，禁用这个家族\ntag_families |= image.TAG36H11 # 注释掉以禁用这个家族(默认家族)\ntag_families |= image.ARTOOLKIT # 注释掉，禁用这个家族\n\n#标签系列有什么区别？ 那么，例如，TAG16H5家族实际上是一个4x4的方形标签。 \n#所以，这意味着可以看到比6x6的TAG36H11标签更长的距离。 \n#然而，较低的H值（H5对H11），意味着4x4标签的假阳性率远高于6x6标签。 \n#所以，除非你有理由使用其他标签系列，否则使用默认族TAG36H11。\n\n\n\ndef family_name(tag):\n    if(tag.family() == image.TAG16H5):\n        return \"TAG16H5\"\n    if(tag.family() == image.TAG25H7):\n        return \"TAG25H7\"\n    if(tag.family() == image.TAG25H9):\n        return \"TAG25H9\"\n    if(tag.family() == image.TAG36H10):\n        return \"TAG36H10\"\n    if(tag.family() == image.TAG36H11):\n        return \"TAG36H11\"\n    if(tag.family() == image.ARTOOLKIT):\n        return \"ARTOOLKIT\"\n\nwhile(True):\n    clock.tick()\n    img = sensor.snapshot()\n    for tag in img.find_apriltags(families=tag_families): # 如果没有给出家族，默认TAG36H11。\n        img.draw_rectangle(tag.rect(), color = (255, 0, 0))\n        img.draw_cross(tag.cx(), tag.cy(), color = (0, 255, 0))\n        print_args = (family_name(tag), tag.id(), (180 * tag.rotation()) / math.pi)\n        print(\"Tag Family %s, Tag ID %d, rotation %f (degrees)\" % print_args)\n    print(clock.fps())\n\n```\n\n## 函数\n\n函数还可以在本页按 `Ctrl+F` 使用浏览器的搜索功能搜 `image.` 来标记函数\n\n### image.rgb_to_lab(rgb_tuple)\n\n返回RGB888格式的元组 rgb_tuple (r, g, b)对应的LAB格式的元组(l, a, b)。\n\n> RGB888是指红、绿、蓝各8位（0-255）。在LAB中，L的取值范围为0-100，a/b 的取值范围为-128到127。\n\n### image.lab_to_rgb(lab_tuple)\n\n返回LAB格式的元组 lab_tuple (l, a, b)对应的RGB888格式的元组(r, g, b)。\n\n> RGB888是指红、绿、蓝各8位（0-255）。在LAB中，L的取值范围为0-100，a/b 的取值范围为-128到127。\n\n### image.rgb_to_grayscale(rgb_tuple)\n\n返回RGB888格式的元组 rgb_tuple (r, g, b)对应的灰度值。\n\n> RGB888是指红、绿、蓝各8位（0-255）。灰度值取值于0-255。\n\n### image.grayscale_to_rgb(g_value)\n\n返回灰度值 g_value 对应的RGB888格式的元组(r, g, b)。\n\n> RGB888是指红、绿、蓝各8位（0-255）。灰度值取值于0-255。\n\n### image.load_decriptor(path)\n\n从磁盘上加载一个描述符对象(descriptor object).\n\npath 是描述符文件保存的路径。\n\n### image.save_descriptor(path, descriptor)\n\n保存描述符对象 descriptor 到磁盘。\n\npath 是描述符文件保存的路径。\n\n### image.match_descriptor(descritor0, descriptor1[, threshold=70[, filter_outliers=False]])\n\n对于LBP描述符来说，这个函数返回的是一个体现两个描述符之间区别的整数。这一距离测度尤为必要。这个距离是对相似度的一个度量。这个测度值越接近0，LBPF特征点匹配得就越好。\n\n对于ORB描述符来说，这个函数返回的是kptmatch对象。见上。\n\nthreshold 是用来为ORB键点过滤不明确匹配服务的。\n一个较低的 threshold 值将紧扣关键点匹配算法。 threshold 值位于0-100 (int)。默认值为70。\n\nfilter_outliers 是用来为ORB键点过滤异常值服务的。 特征点允许用户提高 threshold 值。默认设置为False。\n\n## HaarCascade 类 – 特征描述符\n\nHaar Cascade特征描述符用于 `image.find_features()` 方法。它没有供用户调用的方法。\n\n### 构造函数\n\nclass image.HaarCascade(path[, stages=Auto])\n\n从一个Haar Cascade二进制文件\b（适合OpenMV Cam\b的格式）加载一个Haar Cascade。 如果您传递“frontalface”字符串 而非一条路径，这个构造函数将会把一个内置的正脸Haar Cascade载入内存。 此外，您也可以通过“eye”来把Haar Cascade载入内存。 最后，这个方法会返回载入的Haar Cascade对象，用来使用 image.find_features() 。\n\nstages 默认值为Haar Cascade中的阶段数。然而，您可以指定一个较低的数值来加速运行特征检测器，当然这会带来较高的误报率。\n\n> 您可以制作自己的Haar Cascades 来配合您的OpenMV Cam 使用。 首先，使用谷歌搜索“<thing> Haar Cascade”，检测是否有人已经为您想要检测的对象制作了OpenCV Haar Cascade。 如果没有，那您需要自己动手制作（工作量巨大）。 关于如何制作自己的Haar Cascade，见此 关于如何把OpenCV Haar Cascades转化成您的OpenMV Cam可以读取的模式， 见此script\n\n问：Haar Cascade 是什么？\n\n答：Haar Cascade是一系列用来确定一个对象是否存在于图像中的对比检查。 这一系列的对比检查分成了多个阶段，后一阶段的运行以先前阶段的完成为前提。 对比检查并不复杂，不过是像检查图像的中心垂直是否比边缘更轻微之类的过程。 大范围的检查在前期阶段首先进行，在后期进行更多更小的区域检查。\n\n问：Haar Cascades 是如何制作而成的？\n\n答：Haar Cascades通过标有正负的图像对发生器算法进行训练。 比如，用数百张含有猫（已被标记为内含猫）的图片和数百张不含有猫形物的图片（已作出不同标记）来训练这个生成算法。 \b\b这个生成算法\b最后会产生一个用来检测猫的Haar Cascades。\n\n## Similarity 类 – 相似度对象\n\n相似度对象由 `image.get_similarity` 返回.\n\n### 构造函数\n\nclass image.similarity\n\n请调用 image.get_similarity() 函数来创建此对象。\n\n#### 方法\n\n##### similarity.mean()\n返回8x8像素块结构相似性差异的均值。范围[-1/+1]，其中 -1完全不同，+1完全相同。\n\n您也可以通过索引 [0] 取得这个值。\n\n##### similarity.stdev()\n返回8x8像素块结构相似性差异的标准偏差。\n\n您也可以通过索引 [1] 取得这个值。\n\n##### similarity.min()\n返回8x8像素块结构相似性差异的最小值。其中 -1完全不同，+1完全相同。\n\n您也可以通过索引 [2] 取得这个值。\n\n> 通过查看此值，您可以快速确定两个图像之间的任何8x8像素块是否差别很大，即远远低于+1。\n\n##### similarity.max()\n\n返回8x8像素块结构相似性差异的最小值。其中 -1完全不同，+1完全相同。\n\n您也可以通过索引 [3] 取得这个值。\n\n> 通过查看此值，您可以快速确定两个图像之间的任何8x8像素块是否都相同。即比-1大很多。\n\n## Histogram 类 – 直方图对象\n\n直方图对象是由 `image.get_histogram` 返回。 灰度直方图有一个包含多个二进制的通道。 所有二进制都进行标准化，使其总和为1。 RGB565有三个包含多个二进制的通道。所有二进制都进行标准化，使其总和为1。\n\n### 构造函数\n\nclass image.histogram\n\n请调用 `image.get_histogram()` 函数来创建此对象。\n\n### 方法\n\n#### histogram.bins()\n\n返回灰度直方图的浮点数列表。 您也可以通过索引 [0] 取得这个值。\n\n#### histogram.l_bins()\n\n返回RGB565直方图LAB的L通道的浮点数列表。 您也可以通过索引 [0] 取得这个值。\n\n#### histogram.a_bins()\n\n返回RGB565直方图LAB的A通道的浮点数列表。 您也可以通过索引 [1] 取得这个值。\n\n#### histogram.b_bins()\n\n返回RGB565直方图LAB的B通道的浮点数列表。 您也可以通过索引 [2] 取得这个值。\n\n#### histogram.get_percentile(percentile)\n\n计算直方图频道的CDF，返回一个传递 percentile (0.0 - 1.0) (浮点数)中的直方图的值。\n\n因此，若您传入0.1，该方法会告知您，当累加入累加器时，哪一个二进制会使累加器跨过0.1。\n\n在没有异常效用破坏您的自适应色跟踪结果时，这对于确定颜色分布的最小值(0.1)和max(0.9)甚是有效。\n\n#### histogram.get_threhsold()\n\n使用Otsu’s 方法计算最佳阈值，将直方图分的每个通道为两半。 该方法返回一个 image.threshold 对象。 这个方法对确定最佳的 image.binary() 阈值特别有用。\n\n#### histogram.get_statistics()\n\n计算直方图中每个颜色通道的平均值、中值、众值、标准差、最小值、最大值、下四分值和上四分值， 并返回一个statistics对象。 您也可以使用 histogram.statistics() 和 histogram.get_stats() 作为这个方法的别名。\n\n\n\n\n\n## Percentile 类 – 百分比\b值对象\n\n百分比值对象由 `histogram.get_percentile` 返回。 灰度百分比值有一个通道。不使用 l_* 、 a_* 或 b_* 方法。 RGB565百分比值有三个通道。使用 l_* 、 a_* 和 b_* 方法。\n\n### 构造函数\n\nclass image.percentile\n\n请调用 histogram.get_percentile() 函数来创建此对象。\n\n### 方法\n\n#### percentile.value()\n\n返回灰度百分比值（取值区间为0-255）。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### percentile.l_value()\n\n返回RGB565 LAB 的L通道的百分比值（取值区间为0-100）。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### percentile.a_value()\n\n返回RGB565 LAB 的A通道的百分比值（取值区间为-128-127）。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### percentile.b_value()\n\n返回RGB565 LAB 的B通道的百分比值（取值区间为-128-127）。\n\n您也可以通过索引 [2] 取得这个值。\n\n## Threhsold 类 – 阈值对象\n\n阈值对象由 histogram.get_threshold 返回。\n\n灰度图像有一个通道。没有 l_*, a_*, 和 b_* 方法.\n\nRGB565 阈值有三个通道。使用 l_*, a_*, 和 b_* 方法。\n\n### 构造函数\n\nclass image.threshold\n\n请调用 histogram.get_threshold() 函数来创建此对象。\n\n#### 方法\n\n#### threhsold.value()\n\n返回灰度图的阈值 (between 0 and 255)。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### threhsold.l_value()\n\n返回RGB565图LAB中的L阈值 (between 0 and 100).\n\n您也可以通过索引 [0] 取得这个值。\n\n#### threhsold.a_value()\n\n返回RGB565图LAB中的A阈值 (between -128 and 127).\n\n您也可以通过索引 [1] 取得这个值。\n\n#### threhsold.b_value()\n\n返回RGB565图LAB中的B阈值 (between -128 and 127).\n\n您也可以通过索引 [2] 取得这个值。\n\n## class Statistics – 统计数据对象\n\n统计数据对象是由 histogram.get_statistics 或 image.get_statistics 返回的。\n\n灰度统计数据有一个通道，使用非 l_* 、 a_* 或 b_* 方法。\n\nRGB565百分比值有三个通道。使用 l_* 、 a_* 和 b_* 方法。\n\n### 构造函数\n\nclass image.statistics\n请调用 histogram.get_statistics() 或 image.get_statistics() 函数来创建此对象。\n\n### 方法\n\n#### statistics.mean()\n\n返回灰度均值(0-255) (int)。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### statistics.median()\n\n返回灰度中值(0-255) (int)。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### statistics.mode()\n\n返回灰度众值(0-255) (int)。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### statistics.stdev()\n\n返回灰度标准差(0-255) (int)。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### statistics.min()\n\n返回灰度最小值(0-255) (int)。\n\n您也可以通过索引 [4] 取得这个值。\n\n#### statistics.max()\n\n返回灰度最大值(0-255) (int)。\n\n您也可以通过索引 [5] 取得这个值。\n\n#### statistics.lq()\n\n返回灰度下四分值(0-255) (int)。\n\n您也可以通过索引 [6] 取得这个值。\n\n#### statistics.uq()\n\n返回灰度上四分值(0-255) (int)。\n\n您也可以通过索引 [7] 取得这个值。\n\n#### statistics.l_mean()\n\n返回RGB5656 LAB 中L的均值(0-255) (int)。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### statistics.l_median()\n\n返回RGB5656 LAB 中L的中值(0-255) (int)。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### statistics.l_mode()\n\n返回RGB5656 LAB 中L的众值(0-255) (int)。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### statistics.l_stdev()\n\n返回RGB5656 LAB 中L的标准偏差值(0-255) (int)。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### statistics.l_min()\n\n返回RGB5656 LAB 中L的最小值(0-255) (int)。\n\n您也可以通过索引 [4] 取得这个值。\n\n#### statistics.l_max()\n\n返回RGB5656 LAB 中L的最大值(0-255) (int)。\n\n您也可以通过索引 [5] 取得这个值。\n\n#### statistics.l_lq()\n\n返回RGB5656 LAB 中L的下四分值(0-255) (int)。\n\n您也可以通过索引 [6] 取得这个值。\n\n#### statistics.l_uq()\n\n返回RGB5656 LAB 中L的上四分值(0-255) (int)。\n\n您也可以通过索引 [7] 取得这个值。\n\n#### statistics.a_mean()\n\n返回RGB5656 LAB 中A的均值(0-255) (int)。\n\n您也可以通过索引 [8] 取得这个值。\n\n#### statistics.a_median()\n\n返回RGB5656 LAB 中A的中值(0-255) (int)。\n\n您也可以通过索引 [9] 取得这个值。\n\n#### statistics.a_mode()\n\n返回RGB5656 LAB 中A的众值(0-255) (int)。\n\n您也可以通过索引 [10] 取得这个值。\n\n#### statistics.a_stdev()\n\n返回RGB5656 LAB 中A的标准偏差值(0-255) (int)。\n\n您也可以通过索引 [11] 取得这个值。\n\n#### statistics.a_min()\n\n返回RGB5656 LAB 中A的最小值(0-255) (int)。\n\n您也可以通过索引 [12] 取得这个值。\n\n#### statistics.a_max()\n\n返回RGB5656 LAB 中A的最大值(0-255) (int)。\n\n您也可以通过索引 [13] 取得这个值。\n\n#### statistics.a_lq()\n\n返回RGB5656 LAB 中A的下四分值(0-255) (int)。\n\n您也可以通过索引 [14] 取得这个值。\n\n#### statistics.a_uq()\n\n返回RGB5656 LAB 中A的上四分值(0-255) (int)。\n\n您也可以通过索引 [15] 取得这个值。\n\n#### statistics.b_mean()\n\n返回RGB5656 LAB 中B的均值(0-255) (int)。\n\n您也可以通过索引 [16] 取得这个值。\n\n#### statistics.b_median()\n\n返回RGB5656 LAB 中B的中值(0-255) (int)。\n\n您也可以通过索引 [17] 取得这个值。\n\n#### statistics.b_mode()\n\n返回RGB5656 LAB 中B的众值(0-255) (int)。\n\n您也可以通过索引 [18] 取得这个值。\n\n#### statistics.b_stdev()\n\n返回RGB5656 LAB 中B的标准差值(0-255) (int)。\n\n您也可以通过索引 [19] 取得这个值。\n\n#### statistics.b_min()\n\n返回RGB5656 LAB 中B的最小值(0-255) (int)。\n\n您也可以通过索引 [20] 取得这个值。\n\n#### statistics.b_max()\n\n返回RGB5656 LAB 中B的最大值(0-255) (int)。\n\n您也可以通过索引 [21] 取得这个值。\n\n#### statistics.b_lq()\n\n返回RGB5656 LAB 中B的下四分值(0-255) (int)。\n\n您也可以通过索引 [22] 取得这个值。\n\n#### statistics.b_uq()\n\n返回RGB5656 LAB 中B的上四分值(0-255) (int)。\n\n您也可以通过索引 [23] 取得这个值。\n\n## Blob 类 – 色块对象\n\n色块对象是由 `image.find_blobs` 返回的。\n\n### 构造函数\n\nclass image.blob\n\n请调用 image.find_blobs() 函数来创建此对象。\n\n### 方法\n\n#### blob.rect()\n\n返回一个矩形元组(x, y, w, h) ，用于如色块边界框的 image.draw_rectangle 等 其他的 image 方法。\n\n#### blob.x()\n\n返回色块的边界框的x坐标(int)。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### blob.y()\n返回色块的边界框的y坐标(int)。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### blob.w()\n\n返回色块的边界框的w坐标(int)。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### blob.h()\n\n返回色块的边界框的h坐标(int)。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### blob.pixels()\n\n返回从属于色块(int)一部分的像素数量。\n\n您也可以通过索引 [4] 取得这个值。\n\n#### blob.cx()\n\n返回色块(int)的中心x位置。\n\n您也可以通过索引 [5] 取得这个值。\n\n#### blob.cy()\n\n返回色块(int)的中心x位置。\n\n您也可以通过索引 [6] 取得这个值。\n\n#### blob.rotation()\n\n返回色块的旋转（单位：弧度）。如果色块类似铅笔或钢笔，那么这个值就是介于0-180之间的唯一值。 如果这个色块圆的，那么这个值就没有效用。如果这个色块完全不具有对称性，您只能由此得到0-360度的旋转。\n\n您也可以通过索引 [7] 取得这个值。\n\n#### blob.code()\n\n返回一个16位的二进制数字，其中为每个颜色阈值设置一个位，这是色块的一部分。 例如，如果您通过 image.find_blobs 来寻找三个颜色阈值，这个色块可以设置为0/1/2位。 注意：除非以 merge=True 调用 image.find_blobs ，否则每个色块只能设置一位。 那么颜色阈值不同的多个色块就可以合并在一起了。 您也可以用这个方法以及多个阈值来实现颜色代码跟踪。\n\n您也可以通过索引 [8] 取得这个值。\n\n#### blob.count()\n\n返回合并为这一色块的多个色块的数量。只有您以 merge=True 调用 image.find_blobs 时，这个数字才不是1。\n\n您也可以通过索引 [9] 取得这个值。\n\n#### blob.area()\n\n返回色块周围的边框面积(w * h)\n\n#### blob.density()\n\n返回这个色块的密度比。这是在色块边界框区域内的像素点的数量。 总的来说，较低的密度比意味着这个对象的锁定得不是很好。\n\n## Line类 – 直线对象\n\n直线对象是由 `image.find_lines` , `image.find_line_segments`  或  `image.get_regression` 返回的。\n\n### 构造函数\n\nclass image.line\n\n请调用 image.find_lines(), image.find_line_segments(), 或 image.get_regression() 函数来创建此对象。\n\n### 方法\n\n#### line.line()\n\n返回一个直线元组(x1, y1, x2, y2) ，用于如 image.draw_line 等其他的 image 方法。\n\n#### line.x1()\n\n返回直线的p1顶点 x坐标分量。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### line.y1()\n\n返回直线的p1 y分量。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### line.x2()\n\n返回直线的p2 x分量。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### line.y2()\n\n返回直线的p2 y分量。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### line.length()\n\n返回直线长度即 sqrt(((x2-x1)^2) + ((y2-y1)^2).\n\n您也可以通过索引 [4] 取得这个值。\n\n#### line.magnitude()\n\n返回霍夫变换后的直线的长度。\n\n您也可以通过索引 [5] 取得这个值。\n\n#### line.theta()\n\n返回霍夫变换后的直线的角度（0-179度）。\n\n您也可以通过索引 [7] 取得这个值。\n\n#### line.rho()\n\n返回霍夫变换后的直线p值。\n\n您也可以通过索引 [8] 取得这个值。\n\n## Circle类 –圆形对象\n\n圆形对象是由 `image.find_circles` 返回的。\n\n### 构造函数\n\nclass image.circle\n\n请调用 image.find_circles() 函数来创建此对象。\n\n### 方法\n\n#### circle.x()\n\n返回圆的x位置。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### circle.y()\n\n返回圆的y位置。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### circle.r()\n\n返回圆的半径。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### circle.magnitude()\n\n返回圆的大小。\n\n您也可以通过索引 [3] 取得这个值。\n\n## Rect类 – 矩形对象\n\n矩形对象是由 `image.find_rects` 返回的。\n\n### 构造函数\n\nclass image.rect\n\n请调用 image.find_rects() 函数来创建此对象。\n\n### 方法\n\n#### rect.corners()\n\n返回一个由矩形对象的四个角组成的四个元组(x,y)的列表。四个角通常是按照从左上角开始沿顺时针顺序返回的。\n\n#### rect.rect()\n\n返回一个矩形元组(x, y, w, h)，用于如 矩形的边界框的 image.draw_rectangle 等其他的 image 方法。\n\n#### rect.x()\n\n返回矩形的左上角的x位置。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### rect.y()\n\n返回矩形的左上角的y位置。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### rect.w()\n\n返回矩形的宽度。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### rect.h()\n\n返回矩形的高度。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### rect.magnitude()\n\n返回矩形的大小。\n\n您也可以通过索引 [4] 取得这个值。\n\n## QRCode类 – 二维码对象\n\n二维码对象是由 `image.find_qrcodes` 返回的。\n\n### 构造函数\n\nclass image.qrcode\n\n请调用 image.find_qrcodes() 函数来创建此对象。\n\n### 方法\n\n#### qrcode.corners()\n\n返回一个由该对象的四个角组成的四个元组(x,y)的列表。四个角通常是按照从左上角开始沿顺时针顺序返回的。\n\n#### qrcode.rect()\n\n返回一个矩形元组(x, y, w, h)，用于如二维码的边界框的 image.draw_rectangle 等其他的 image 方法。\n\n#### qrcode.x()\n\n返回二维码的边界框的x坐标(int)。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### qrcode.y()\n\n返回二维码的边界框的y坐标(int)。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### qrcode.w()\n\n返回二维码的边界框的w坐标(int)。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### qrcode.h()\n\n返回二维码的边界框的h坐标(int)。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### qrcode.payload()\n\n返回二维码有效载荷的字符串，例如URL 。\n\n您也可以通过索引 [4] 取得这个值。\n\n#### qrcode.version()\n\n返回二维码的版本号(int)。\n\n您也可以通过索引 [5] 取得这个值。\n\n#### qrcode.ecc_level()\n\n返回二维码的ECC水平(int)。\n\n您也可以通过索引 [6] 取得这个值。\n\n#### qrcode.mask()\n\n返回二维码的掩码(int)。\n\n您也可以通过索引 [7] 取得这个值。\n\n#### qrcode.data_type()\n\n返回二维码的数据类型。\n\n您也可以通过索引 [8] 取得这个值。\n\n#### qrcode.eci()\n\n返回二维码的ECI。ECI储存了QR码中存储数据字节的编码。若您想要处理包含超过标准ASCII文本的二维码，您需要查看这一数值。\n\n您也可以通过索引 [9] 取得这个值。\n\n#### qrcode.is_numeric()\n\n若二维码的数据类型为数字式，则返回True。\n\n#### qrcode.is_alphanumeric()\n\n若二维码的数据类型为文字数字式，则返回True。\n\n#### qrcode.is_binary()\n\n若二维码的数据类型为二进制式，则返回True。如果您认真处理所有类型的文本，则需要检查eci是否为True，以确定数据的文本编码。通常它只是标准的ASCII，但是它也可能是有两个字节字符的UTF8。\n\n#### qrcode.is_kanji()\n\n若二维码的数据类型为日本汉字，则返回True。设置为True后，您就需要自行解码字符串，因为日本汉字符号每个字符是10位，而MicroPython不支持解析这类文本。\n\n## AprilTag类 – AprilTag对象\n\nAprilTag对象是由 `image.find_apriltags` 返回的。\n\n### 构造函数\n\nclass image.apriltag\n\n请调用 image.find_apriltags() 函数来创建此对象。\n\n### 方法\n\n#### apriltag.corners()\n\n返回一个由该对象的四个角组成的四个元组(x,y)的列表。四个角通常是按照从左上角开始沿顺时针顺序返回的。\n\n#### apriltag.rect()\n\n\n返回一个矩形元组(x, y, w, h)，用于如AprilTag边界框的 image.draw_rectangle 等其他的 image 方法。\n\n#### apriltag.x()\n\n返回AprilTag边界框的x坐标(int)。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### apriltag.y()\n\n返回AprilTag边界框的y坐标(int)。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### apriltag.w()\n\n返回AprilTag边界框的w坐标(int)。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### apriltag.h()\n\n返回AprilTag边界框的h坐标(int)。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### apriltag.id()\n\n返回AprilTag的数字ID。\n\nTAG16H5 -> 0 to 29\nTAG25H7 -> 0 to 241\nTAG25H9 -> 0 to 34\nTAG36H10 -> 0 to 2319\nTAG36H11 -> 0 to 586\nARTOOLKIT -> 0 to 511\n您也可以通过索引 [4] 取得这个值。\n\n#### apriltag.family()\n\n返回AprilTag的数字家庭。\n\nimage.TAG16H5\nimage.TAG25H7\nimage.TAG25H9\nimage.TAG36H10\nimage.TAG36H11\nimage.ARTOOLKIT\n您也可以通过索引 [5] 取得这个值。\n\n#### apriltag.cx()\n\n返回AprilTag的中心x位置(int)。\n\n您也可以通过索引 [6] 取得这个值。\n\n#### apriltag.cy()\n\n返回AprilTag的中心y位置(int)。\n\n您也可以通过索引 [7] 取得这个值。\n\n#### apriltag.rotation()\n\n返回以弧度计的AprilTag的旋度(int)。\n\n您也可以通过索引 [8] 取得这个值。\n\n#### apriltag.decision_margin()\n\n返回AprilTag匹配的色饱和度（取值0.0 - 1.0），其中1.0为最佳。\n\n您也可以通过索引 [9] 取得这个值。\n\n#### apriltag.hamming()\n\n返回AprilTag的可接受的数位误差数值。\n\nTAG16H5 -> 最多可接受0位错误\nTAG25H7 -> 最多可接受1位错误\nTAG25H9 -> 最多可接受3位错误\nTAG36H10 -> 最多可接受3位错误\nTAG36H11 -> 最多可接受4位错误\nARTOOLKIT -> 最多可接受0位错误\n您也可以通过索引 [10] 取得这个值。\n\n#### apriltag.goodness()\n\n返回AprilTag图像的色饱和度（取值0.0 - 1.0），其中1.0为最佳。\n\n> 目前这一数值通常是0.0。未来我们可以启用一个称为“标签细化”的功能，以实现对更小的AprilTag的检测。然而，现在这个功能将帧速率降低到1 FPS以下。\n\n您也可以通过索引 [11] 取得这个值。\n\n#### apriltag.x_translation()\n\n返回距离摄像机x方向的变换，距离的单位未知。\n\n这个方法对于确定远离摄像机的AprilTag的位置很有用。但是，AprilTag的大小以及您使用的镜头等因素都会影响X单元归属的确定。为使用方便，我们推荐您使用查找表将该方法的输出转换为对您的应用程序有用的信息。\n\n注意：此处的方向为从左至右。\n\n您也可以通过索引 [12] 取得这个值。\n\n#### apriltag.y_translation()\n\n返回距离摄像机y方向的变换，距离的单位未知。\n\n这个方法对于确定远离摄像机的AprilTag的位置很有用。但是，AprilTag的大小以及您使用的镜头等因素都会影响Y单元归属的确定。为使用方便，我们推荐您使用查找表将该方法的输出转换为对您的应用程序有用的信息。\n\n注意：此处的方向为从上至下。\n\n您也可以通过索引 [13] 取得这个值。\n\n#### apriltag.z_translation()\n\n返回距离摄像机z方向的变换，距离的单位未知。\n\nT这个方法对于确定远离摄像机的AprilTag的位置很有用。但是，AprilTag的大小以及您使用的镜头等因素都会影响Z单元归属的确定。为使用方便，我们推荐您使用查找表将该方法的输出转换为对您的应用程序有用的信息。\n\n注意：此处的方向为从前至后。\n\n您也可以通过索引 [14] 取得这个值。\n\n#### apriltag.x_rotation()\n\n返回以弧度计的AprilTag在X平面上的旋度。例：目视AprilTag，从左至右移动摄像头。\n\n您也可以通过索引 [15] 取得这个值。\n\n#### apriltag.y_rotation()\n\n返回以弧度计的AprilTag在Y平面上的旋度。例：目视AprilTag，从上至下移动摄像头。\n\n您也可以通过索引 [16] 取得这个值。\n\n#### apriltag.z_rotation()\n\n返回以弧度计的AprilTag在Z平面上的旋度。例：目视AprilTag，旋转摄像头。\n\n注意：这只是 apriltag.rotation() 的重命名版本。\n\n您也可以通过索引 [17] 取得这个值。\n\n## DataMatrix类 – 数据矩阵对象\n\n数据矩阵对象是由 `image.find_datamatrices` 返回的。\n\n## 构造函数\n\nclass image.datamatrix\n\n请调用 image.find_datamatrices() 函数来创建此对象。\n\n### 方法\n\n#### datamatrix.corners()\n\n返回一个由该对象的四个角组成的四个元组(x,y)的列表。四个角通常是按照从左上角开始沿顺时针顺序返回的。\n\n#### datamatrix.rect()\n\n返回一个矩形元组(x, y, w, h)，用于如数据矩阵的边界框的 image.draw_rectangle 等其他的 image 方法。\n\n#### datamatrix.x()\n\n返回数据矩阵的边界框的x坐标(int)。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### datamatrix.y()\n\n返回数据矩阵的边界框的y坐标(int)。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### datamatrix.w()\n\n返回数据矩阵的边界框的w宽度。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### datamatrix.h()\n\n返回数据矩阵的边界框的h高度。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### datamatrix.payload()\n\n返回数据矩阵的有效载荷的字符串。例：字符串。\n\n您也可以通过索引 [4] 取得这个值。\n\n#### datamatrix.rotation()\n\n返回以弧度计的数据矩阵的旋度(浮点数)。\n\n您也可以通过索引 [5] 取得这个值。\n\n#### datamatrix.rows()\n\n返回数据矩阵的行数(int)。\n\n您也可以通过索引 [6] 取得这个值。\n\n#### datamatrix.columns()\n\n返回数据矩阵的列数(int)。\n\n您也可以通过索引 [7] 取得这个值。\n\n#### datamatrix.capacity()\n\n返回这一数据矩阵所能容纳的字符的数量。\n\n您也可以通过索引 [8] 取得这个值。\n\n#### datamatrix.padding()\n\n返回这一数据矩阵中未使用的字符的数量。\n\n您也可以通过索引 [9] 取得这个值。\n\n## BarCode类 – 条形码对象\n\n条形码对象是由 image.find_barcodes 返回的。\n\n## 构造函数\n\nclass image.barcode\n\n请调用 image.find_barcodes() 函数来创建此对象。\n\n### 方法\n\n#### barcode.corners()\n\n返回一个由该对象的四个角组成的四个元组(x,y)的列表。四个角通常是按照从左上角开始沿顺时针顺序返回的。\n\n#### barcode.rect()\n\n返回一个矩形元组(x, y, w, h)，用于如数据矩阵的边界框的 image.draw_rectangle 等其他的 image 方法。\n\n#### barcode.x()\n\n返回条形码的边界框的x坐标(int)。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### barcode.y()\n\n返回条形码的边界框的y坐标(int)。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### barcode.w()\n\n返回条形码的边界框的w宽度(int)。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### barcode.h()\n\n返回条形码的边界框的h高度(int)。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### barcode.payload()\n\n返回条形码的有效载荷的字符串。例：数量。\n\n您也可以通过索引 [4] 取得这个值。\n\n#### barcode.type()\n\n返回条形码的列举类型 (int)。\n\n您也可以通过索引 [5] 取得这个值。\n\nimage.EAN2\nimage.EAN5\nimage.EAN8\nimage.UPCE\nimage.ISBN10\nimage.UPCA\nimage.EAN13\nimage.ISBN13\nimage.I25\nimage.DATABAR\nimage.DATABAR_EXP\nimage.CODABAR\nimage.CODE39\nimage.PDF417 - 未来启用 (e.g. 现在还不能正常使用).\nimage.CODE93\nimage.CODE128\n\n#### barcode.rotation()\n\n返回以弧度计的条形码的旋度(浮点数)。\n\n您也可以通过索引 [6] 取得这个值。\n\n#### barcode.quality()\n\n返回条形码在图像中被检测到的次数(int)。\n\n扫描条形码时，每一条新的扫描线都能解码相同的条形码。每次进行这一过程，条形码的值都会随之增加。\n\n您也可以通过索引 [7] 取得这个值。\n\n## Displacement类 – 位移对象\n\n位移对象由 image.find_displacement 返回。\n\n### 构造函数\n\nclass image.displacement\n\n请调用 image.find_displacement() 函数来创建此对象。\n\n### 方法\n\n#### displacement.x_translation()\n\n返回两个图像之间的x平移像素。 这是精确的子像素，所以它是一个浮点数。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### displacement.y_translation()\n\n返回两个图像之间的y平移像素。 这是精确的子像素，所以它是一个浮点数。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### displacement.rotation()\n\n返回两个图像之间的z平移像素。 这是精确的子像素，所以它是一个浮点数。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### displacement.scale()\n\n返回两个图像之间旋转的弧度。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### displacement.response()\n\n返回两幅图像之间位移匹配结果的质量。 范围 0-1。响应小于0.1的 displacement 对象可能是噪声。\n\n您也可以通过索引 [4] 取得这个值。\n\n## Kptmatch类 – 特征点对象\n\n特征点对象是由 `image.match_descriptor` 返回的。\n\n### 构造函数\n\nclass image.kptmatch\n\n请调用 image.match_descriptor() 函数来创建此对象。\n\n### 方法\n\n#### kptmatch.rect()\n\n返回一个矩形元组(x, y, w, h)，用于如特征点的边界框的 image.draw_rectangle 等其他的 image 方法。\n\n#### kptmatch.cx()\n\n返回特征点的中心x位置(int)。\n\n您也可以通过索引 [0] 取得这个值。\n\n#### kptmatch.cy()\n\n返回特征点的中心y位置(int)。\n\n您也可以通过索引 [1] 取得这个值。\n\n#### kptmatch.x()\n\n返回特征点边界框的x坐标(int)。\n\n您也可以通过索引 [2] 取得这个值。\n\n#### kptmatch.y()\n\n返回特征点边界框的y坐标(int)。\n\n您也可以通过索引 [3] 取得这个值。\n\n#### kptmatch.w()\n\n返回特征点边界框的w宽度(int)。\n\n您也可以通过索引 [4] 取得这个值。\n\n#### kptmatch.h()\n\n返回特征点边界框的h高度(int)。\n\n您也可以通过索引 [5] 取得这个值。\n\n#### kptmatch.count()\n\n返回匹配的特征点的数量(int)。\n\n您也可以通过索引 [6] 取得这个值。\n\n#### kptmatch.theta()\n\n返回估计的特征点的旋度(int)。\n\n您也可以通过索引 [7] 取得这个值。\n\n#### kptmatch.match()\n\n返回匹配关键点的(x，y)元组列表。\n\n您也可以通过索引 [8] 取得这个值。\n\n## ImageWriter类 – ImageWriter对象\n\nImageWriter 对象使得您可以快速地将未压缩的图像写入磁盘。\n\n##＃　构造函数\n\nclass image.ImageWriter(path)\n\n创建一个ImageWriter对象，您就可以以用于OpenMV Cams的简单文件格式将未压缩的图像写到磁盘上。然后未压缩的图像可以使用ImageReader重新读取。\n\n### 方法\n\n#### imagewriter.size()\n\n返回正在写入的文件的大小。\n\n#### imagewriter.add_frame(img)\n\n将一张图像写入磁盘。由于图像未被压缩，因此执行迅速，但会占用大量磁盘空间。\n\n#### imagewriter.close()\n\n关闭图像流文件。您必须关闭文件，否则文件会损坏。\n\n## ImageReader 类– ImageReader对象\n\nImageReader对象使得您可以快速地从磁盘中读取未压缩的图像。\n\n### 构造函数\n\nclass image.ImageReader(path)\n\n创建一个ImageReader对象，用来回放由ImageWriter对象编写的图像数据。ImageWriter对象回放的帧会在与写入磁盘时相同的FPS下回放。\n\n### 方法\n\n#### imagereader.size()\n\n返回正在读取的文件的大小。\n\nimagereader.next_frame([copy_to_fb=True, loop=True])\n从ImageWriter写就的文件中返回图像对象。若 copy_to_fb 为True，图像对象将被直接加载到帧缓冲区中。否则图像对象将被放入堆中。注意：除非图像很小，否则堆可能没有足够的空间来存储图像对象。 若 loop 为True，流的最后一个图像读取之后，回放将重新开始。否则所有帧被读取后，这个方法将返回None。\n\n注意： imagereader.next_frame 尝试在读取帧后通过暂停播放来限制回放速度，以与帧记录的速度相匹配。 否则，这个方法会以200+FPS的速度图像快读播放所有图像。\n\n#### imagereader.close()\n\n关闭正在读取的文件。您需要进行这一操作，以防imagereader 对象受损。但由于是只读文件，文件不会在未关闭时受损。\n\n## Image类 – 图像对象\n\n图像对象是机器视觉操作的基本对象。\n\n### 构造函数\n\nclass image.Image(path[, copy_to_fb=False])\n\n从 path 中的文件中创建一个新的图像对象。\n\n支持bmp/pgm/ppm/jpg/jpeg格式的图像文件。\n\n若 copy_to_fb 为True，图像会直接载入帧缓冲区，您就可以加载大幅图片了。若为False，图像会载入MicroPython的堆中，堆远比帧缓冲区小。\n\n在OpenMV Cam M4中，若 copy_to_fb 为False，您应该尽量把图像大小控制在8KB以下。若为True，则图像最大可为160KB。\n在OpenMV Cam M7中，若 copy_to_fb 为False，您应该尽量把图像大小控制在16KB以下。若为True，则图像最大可为320KB。\n图像支持“[]”记法。 令 image[index] = 8/16-bit value ，以便分配图像像素或 image[index] ，并得到一个图像像素，若是用于RGB图像的16位RGB565值的灰度图像， 这一像素则为8位。\n\n对于JPEG图像而言，“[]”使得您可以访问压缩的节数组形式的JPEG图像色块。由于JPEG图像是压缩的字节流形式，因而对数据组的读取和写入是不透明的。\n\n图像还支持读缓冲区操作。您可以把图像当作节数组对象，将图像输入所有类型的MicroPython函数。若您想传送一个图像，可以将它传递给UART /SPI/ I2C写入函数，可实现自动传送。\n\n### 方法\n\n#### image.width()\n\n返回以像素计的图像的宽度。\n\n#### image.height()\n\n返回以像素计的图像的高度。\n\n#### image.format()\n\n返回用于灰度图的 sensor.GRAYSCALE 、用于RGB图像的 sensor.RGB565 和用于JPEG图像的 sensor.JPEG 。\n\n#### image.size()\n\n返回以字节计的图像大小。\n\n#### image.get_pixel(x, y[, rgbtuple])\n\n灰度图：返回(x, y)位置的灰度像素值。\n\nRGB565l：返回(x, y)位置的RGB888像素元组(r, g, b)。\n\nBayer图像: 返回(x, y)位置的像素值。\n\n不支持压缩图像。\n\n> image.get_pixel() 和 `image.set_pixel()`是允许你操作Bayer模式图像的唯一方法。 Bayer模式图像是文字图像。对于偶数行，其中图像中的像素是R/G/R/G/等。 对于奇数行，其中图像中的像素是G/B/G/B/等。 每个像素是8位。\n\n#### image.set_pixel(x, y, pixel)\n灰度图：将(x, y) 位置的像素设置为灰度值 pixel 。\n\nRGB图像：将(x, y) 位置的像素设置为RGB888元组(r, g, b) pixel 。\n\n不支持压缩图像。\n\n> image.get_pixel() 和 `image.set_pixel()`是允许你操作Bayer模式图像的唯一方法。 Bayer模式图像是文字图像。对于偶数行，其中图像中的像素是R/G/R/G/等。 对于奇数行，其中图像中的像素是G/B/G/B/等。 每个像素是8位。\n\n#### image.mean_pool(x_div, y_div)\n\n在图像中找到 x_div * y_div 正方形的平均值，并返回由每个正方形的平均值组成的修改图像。\n\n此方法允许您在原来图像上快速缩小图像。\n\n不支持压缩图像和bayer图像。\n\n#### image.mean_pooled(x_div, y_div)\n\n在图像中找到 x_div * y_div 正方形的平均值，并返回由每个正方形的平均值组成的新图像。\n\n此方法允许您创建缩小的图像副本。\n\n不支持压缩图像和bayer图像。\n\n#### image.midpoint_pool(x_div, y_div[, bias=0.5])\n\n在图像中找到 x_div * y_div 正方形的中点值，并返回由每个正方形的中点值组成的修改图像。\n\nbias 为0.0返回每个区域的最小值，而``bias`` 为1.0返回每个区域的最大值。\n\n此方法允许您在原来图像上快速缩小图像。\n\n不支持压缩图像和bayer图像。\n\n#### image.midpoint_pooled(x_div, y_div[, bias=0.5])\n\n在图像中找到 x_div * y_div 正方形的中点值，并返回由每个正方形的中点值组成的新图像。\n\nbias 为0.0返回每个区域的最小值，而``bias`` 为1.0返回每个区域的最大值。\n\n此方法允许您创建缩小的图像副本。\n\n不支持压缩图像和bayer图像。\n\n#### image.to_grayscale([copy=False])\n\n将图像转换为灰度图像。 此方法也会修改基础图像像素，以字节为单位更改图像大小，因此只能在灰度图像或RGB565图像上进行。 否则 copy 必须为True才能在堆上创建新的修改图像。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.to_rgb565([copy=False])\n\n将图像转换为彩色图像。 此方法也会修改基础图像像素，以字节为单位更改图像大小，因此只能在RGB565图像上进行。 否则 copy 必须为True才能在堆上创建新的修改图像。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.to_rainbow([copy=False])\n\n将图像转换为彩虹图像。 此方法也会修改基础图像像素，以字节为单位更改图像大小，因此只能在RGB565图像上进行。 否则 copy 必须为True才能在堆上创建新的修改图像。\n\n彩虹图像是彩色图像，对于图像中的每个8位掩模灰度照明值具有唯一的颜色值。 例如，它为热图像提供热图颜色。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.compress([quality=50])\n\nJPEG对图像进行适当压缩。使用这种方法与 compressed 保存堆空间相比，使用更高quality的压缩率是以破坏原始图像为代价的。\n\nquality 是压缩质量（0-100）（int）。\n\n#### image.compress_for_ide([quality=50])\n\nJPEG对图像进行适当压缩。使用这种方法与 compressed 保存堆空间相比，使用更高quality的压缩率是以破坏原始图像为代价的。\n\n这个方法压缩图像，然后通过将每6比特编码为128 - 191之间的字节将JPEG数据格式化，转换为OpenMV IDE，以便显示。进行这一步是为防止JPEG数据被误认为是字节流中的其他文本数据。\n\n您需要使用这一方法来格式化图像数据，以便在OpenMV IDE中通过“开放终端”创建的终端窗口中显示。\n\nquality 是压缩质量（0-100）（int）。\n\n#### image.compressed([quality=50])\n\n返回一个JPEG压缩图像—原始图像未经处理。但是，这个方法需要堆空间的大分配，所以图像压缩质量和图像分辨率必须很低。\n\nquality 是压缩质量（0-100）（int）。\n\n#### image.compressed_for_ide([quality=50])\n\n返回一个JPEG压缩图像—原始图像未经处理。但是，这个方法需要堆空间的大分配，所以图像压缩质量和图像分辨率必须很低。\n\n这个方法压缩图像，然后通过将每6比特编码为128 - 191之间的字节将JPEG数据格式化，转换为OpenMV IDE，以便显示。进行这一步是为防止JPEG数据被误认为是字节流中的其他文本数据。\n\n您需要使用这一方法来格式化图像数据，以便在OpenMV IDE中通过“开放终端”创建的终端窗口中显示。\n\nquality 是压缩质量（0-100）（int）。\n\n#### image.copy([roi[, copy_to_fb=False]])\n\n创建一个图像对象的副本。\n\nRoi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定，ROI即复制整个图像的图像矩形。但这不适用于JPEG图像。\n\n请记住图像副本储存在MicroPython 堆中而不是帧缓冲区。同样，您需要将图像副本大小控制在8KB以下（OpenMV）或16KB以下（OpenMV Cam M7） 如果您想使用一个复制操作来使用所有的堆空间，这个函数会出现异常。过大的图像极易触发异常。\n\n如果 copy_to_fb 为True，则该方法将帧缓冲替换为图像。 帧缓冲区具有比堆大得多的空间，并且可以容纳大图像。\n\n#### image.save(path[, roi[, quality=50]])\n\n将图像的副本保存到 path 中的文件系统。\n\n支持bmp/pgm/ppm/jpg/jpeg格式的图像文件。注意：您无法将jpeg格式的压缩图像保存成未压缩的格式。\n\nroi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定，ROI即复制整个图像的图像矩形。但这不适用于JPEG图像。\n\nquality 指在图像尚未被压缩时将图像保存为JPEG格式的JPEG压缩质量。\n\n#### image.clear()\n\n将图像中的所有像素设置为零（非常快）。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像。\n\n#### image.draw_line(x0, y0, x1, y1[, color[, thickness=1]])\n\n在图像上绘制一条从(x0，y0)到(x1，y1)的线。 您可以单独传递x0，y0，x1，y1，也可以传递给元组(x0，y0，x1，y1)。\n\ncolor 是用于灰度或RGB565图像的RGB888元组。默认为白色。但是，您也可以传递灰度图像的基础像素值(0-255)或RGB565图像的字节反转RGB565值。\n\nthickness 控制线的粗细像素。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.draw_rectangle(x, y, w, h[, color[, thickness=1[, fill=False]]])\n\n在图像上绘制一个矩形。 您可以单独传递x，y，w，h或作为元组(x，y，w，h)传递。\n\ncolor 是用于灰度或RGB565图像的RGB888元组。默认为白色。但是，您也可以传递灰度图像的基础像素值(0-255)或RGB565图像的字节反转RGB565值。\n\nthickness 控制线的粗细像素。\n\n将 fill 设置为True以填充矩形。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.draw_ellipse(cx, cy, rx, ry, rotation[, color[, thickness=1[, fill=False]]])\n\n在图像上绘制椭圆。您可以单独传递cx、cy、rx、ry和rotation(以度为单位)，也可以作为元组传递(cx、yc、rx、ry、rotation)。\n\ncolor 是用于灰度或RGB565图像的RGB888元组。默认为白色。 但是，您也可以为灰度图像传递基础像素值(0-255)，或者为RGB565图像传递字节反转的RGB565值。\n\nthickness 控制边缘的厚度，以像素为单位。\n\n传递 fill 设置为True来填充椭圆。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像或bayer图像。\n\n#### image.draw_circle(x, y, radius[, color[, thickness=1[, fill=False]]])\n\n在图像上绘制一个圆形。 您可以单独传递x，y，半径 或 作为元组(x，y，radius)传递。\n\ncolor 是用于灰度或RGB565图像的RGB888元组。默认为白色。但是，您也可以传递灰度图像的基础像素值(0-255)或RGB565图像的字节反转RGB565值。\n\nthickness 控制线的粗细像素。\n\n将 fill 设置为True以填充圆形。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.draw_string(x, y, text[, color[, scale=1[, x_spacing=0[, y_spacing=0[, mono_space=True]]]]])\n\n从图像中的(x, y)位置开始绘制8x10文本。您可以单独传递x，y，也可以作为元组(x，y)传递。\n\ntext 是写入图像的字符串。 \\n, \\r, 和 \\r\\n 结束符将光标移至下一行。\n\ncolor 是用于灰度或RGB565图像的RGB888元组。默认为白色。但是，您也可以传递灰度图像的基础像素值(0-255)或RGB565图像的字节反转RGB565值。\n\n可以增加 scale 以增加图像上文本的大小。\n\n   仅整数值（例如，1/2/3 /等）。\n\nx_spacing 允许你在字符之间添加（如果是正数）或减去（如果是负数）x像素，设置字符间距。\n\ny_spacing 允许你在字符之间添加（如果是正数）或减去（如果是负数）y像素，设置行间距。\n\nmono_space 默认为True，强制文本间距固定。对于大文本，这看起来很糟糕。设置False以获得非固定宽度的字符间距，看起来好多了。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.draw_cross(x, y[, color[, size=5[, thickness=1]]])\n\n在图像上绘制一个十字。 您可以单独传递x，y或作为元组(x，y)传递。\n\ncolor 是用于灰度或RGB565图像的RGB888元组。默认为白色。但是，您也可以传递灰度图像的基础像素值(0-255)或RGB565图像的字节反转RGB565值。\n\nsize 控制十字线的延伸长度。\n\nthickness 控制边缘的像素厚度。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.draw_arrow(x0, y0, x1, y1[, color[, thickness=1]])\n\n在图像上绘制一条从(x0，y0)到(x1，y1)的箭头。 您可以单独传递x0，y0，x1，y1，也可以传递给元组(x0，y0，x1，y1)。\n\ncolor 是用于灰度或RGB565图像的RGB888元组。默认为白色。但是，您也可以传递灰度图像的基础像素值(0-255)或RGB565图像的字节反转RGB565值。\n\nthickness 控制线的粗细像素。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.draw_image(image, x, y[, x_scale=1.0[, y_scale=1.0[, mask=None[, alpha=256]]]])\n\n绘制一个 image ，其左上角从位置x，y开始。 您可以单独传递x，y，也可以传递给元组(x，y)。\n\nx_scale 控制图像在x方向(浮点数)缩放的程度。\n\ny_scale 控制图像在y方向(浮点数)缩放的程度。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 您可以使用mask掩码进行绘制操作。\n\nalpha 控制源图像绘制到目标图像中的透明度。256 为绘制不透明的源图像，而小于 256 的值产生源图像和目标图像之间的混合。0 表示不修改目标图像。\n\n不支持压缩图像和bayer图像。\n\n#### image.draw_keypoints(keypoints[, color[, size=10[, thickness=1[, fill=False]]]])\n\n在图像上画出一个特征点对象的各个点。\n\ncolor 是用于灰度或RGB565图像的RGB888元组。默认为白色。但是，您也可以传递灰度图像的基础像素值(0-255)或RGB565图像的字节反转RGB565值。\n\nsize 控制特征点的大小。\n\nthickness 控制线的粗细像素。\n\n将 fill 设置为True以填充特征点。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.flood_fill(x, y[, seed_threshold=0.05[, floating_threshold=0.05[, color[, invert=False[, clear_background=False[, mask=None]]]]]])\n\n从位置x，y开始填充图像的区域。 您可以单独传递x，y，也可以传递给元组(x，y)。\n\nseed_threshold 控制填充区域中的像素与原始起始像素的差异。\n\nfloating_threshold 控制填充区域中的像素与任何相邻像素的差异。\n\ncolor 是用于灰度或RGB565图像的RGB888元组。默认为白色。但是，您也可以传递灰度图像的基础像素值(0-255)或RGB565图像的字节反转RGB565值。\n\n将 invert 传递为True，以重新填充flood_fill连接区域外的所有内容。\n\n将 clear_background 传递为True，将其余的flood_fill没有重新着色的像素归零。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩膜中设置的像素会在flood_fill时被评估。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.binary(thresholds[, invert=False[, zero=False[, mask=None]]])\n\n根据像素是否在阈值列表 thresholds 中的阈值内，将图像中的所有像素设置为黑色或白色。\n\nthresholds 必须是元组列表。 [(lo, hi), (lo, hi), ..., (lo, hi)] 定义你想追踪的颜色范围。 对于灰度图像，每个元组需要包含两个值 - 最小灰度值和最大灰度值。 仅考虑落在这些阈值之间的像素区域。 对于RGB565图像，每个元组需要有六个值(l_lo，l_hi，a_lo，a_hi，b_lo，b_hi) - 分别是LAB L，A和B通道的最小值和最大值。 为方便使用，此功能将自动修复交换的最小值和最大值。 此外，如果元组大于六个值，则忽略其余值。相反，如果元组太短，则假定其余阈值处于最大范围。\n\n注解\n\n获取所跟踪对象的阈值，只需在 IDE 帧缓冲区中选择（单击并拖动）跟踪对象。 直方图会相应地更新到所在区域。然后只需写下颜色分布在每个直方图通道中起始与下降位置。 这些将是 thresholds 的低值和高值。 由于上下四分位数据相差微小，故手动确定阈值为佳。\n\n您还可以通过进入OpenMV IDE中的 工具 ->机器视觉 ->阈值编辑器 并从GUI窗口中拖动滑块来确定颜色阈值。\n\ninvert 反转阈值操作，像素在已知颜色范围之外进行匹配，而非在已知颜色范围内。\n\n设置 zero 为True来使阈值像素为零，并使不在阈值列表中的像素保持不变。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n\n#### image.invert()\n\n将二进制图像0（黑色）变为1（白色），1（白色）变为0（黑色），非常快速地翻转二进制图像中的所有像素值。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和Bayer图像。\n\n#### image.b_and(image[, mask=None])\n\n用另一图像与这一图像进行逻辑与运算。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.b_nand(image[, mask=None])\n\n用另一图像与这一图像进行逻辑与非运算。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.b_or(image[, mask=None])\n\n用另一图像与这一图像进行逻辑或运算。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.b_nor(image[, mask=None])\n\n用另一图像与这一图像进行逻辑或非运算。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.b_xor(image[, mask=None])\n\n用另一图像与这一图像进行逻辑异或运算。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.b_xnor(image[, mask=None])\n\n用另一图像与这一图像进行逻辑同或运算。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.erode(size[, threshold[, mask=None]])\n\n从分割区域的边缘删除像素。\n\n这一方法通过卷积图像上((size*2)+1)x((size*2)+1)像素的核来实现，如果相邻像素集的总和小于 threshold ，则对内核的中心像素进行归零。\n\n若 threshold 未设定，这个方法的功能如标准腐蚀方法一样。若threshold设定，您就可以指定腐蚀的特定像素，例如：设置低于2个的像素周围阈值为2。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.dilate(size[, threshold[, mask=None]])\n\n将像素添加到分割区域的边缘中。\n\n这一方法通过卷积图像上((size*2)+1)x((size*2)+1)像素的核来实现，如果相邻像素集的总和大于 threshold ，则将内核的中心像素进行设置。\n\n若 threshold 未设定，这个方法的功能如标准腐蚀方法一样。若threshold设定，您就可以指定腐蚀的特定像素，例如：设置低于2个的像素周围阈值为2。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.open(size[, threshold[, mask=None]])\n\n按顺序对图像执行腐蚀和膨胀。有关更多信息，请参阅 image.erode() 和 image.dilate() 。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.close(size[, threshold[, mask=None]])\n\n按顺序对图像执行膨胀和腐蚀。有关更多信息，请参阅 image.erode() 和 image.dilate() 。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.top_hat(size[, threshold[, mask=None]])\n\n返回原图像和执行 image.open() 函数后图像的差异。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n不支持压缩图像和bayer图像。\n\n#### image.black_hat(size[, threshold[, mask=None]])\n\n返回原图像和执行 image.close() 函数后图像的差异。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n不支持压缩图像和bayer图像。\n\n#### image.negate()\n\n非常快速地翻转（数字反转）图像中的所有像素值。对每个颜色通道的像素值进行数值转换。例： (255 - pixel).\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.replace(image[, hmirror=False[, vflip=False[, mask=None]]])\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\n将 hmirror 设置为True以水平镜像替换图像。\n\n将 vflip 设置为True以垂直翻转替换图像。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.add(image[, mask=None])\n\n将两个图像彼此按像素相加。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.sub(image[, reverse=False[, mask=None]])\n\n将两个图像彼此按像素相减。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\n将 reverse 设置为True可以将减法操作从 this_image-image 反转为 image-this_image 。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.mul(image[, invert=False[, mask=None]])\n\n将两个图像彼此按像素相乘。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\n将 invert 设置为True可将乘法运算从 a*b 改为 1/((1/a)*(1/b))。 特别是，这使图像变亮而不是使图像变暗(例如，乘法与刻录操作)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.div(image[, invert=False[, mask=None]])\n\n将此图像除以另一个图像。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\n将 invert 设置为True可将除法方向从 a/b 改为 b/a。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.min(image[, mask=None])\n\n在像素级 用此图像和另一个图像之间的最小像素值替换此图像中的像素。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n这个方法在OpenMV4上不可用.\n\n#### image.max(image[, mask=None])\n\n在像素级 用此图像和另一个图像之间的最大像素值替换此图像中的像素。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.difference(image[, mask=None])\n\n将两个图像彼此按像素取绝对值。例：对于每个颜色通道而言，将每个像素��换为ABS(this.pixel-image.pixel)。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.blend(image[, alpha=128[, mask=None]])\n\n将另外一张图像 image 与这一图像融合。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\nalpha 控制要混合到这个图像中的其他图像的多少. alpha 应该是0到256之间的整数值。接近零的值会将更多其他图像混合到此图像中，接近256则相反。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.histeq([adaptive=False[, clip_limit=-1[, mask=None]]])\n\n在图像上运行直方图均衡算法。 直方图均衡化使图像中的对比度和亮度标准化。\n\n如果 adaptive 传递为True，那么将在图像上运行自适应直方图均衡方法，这通常比非自适应直方图限定更好，但运行时间更长。\n\nclip_limit 提供了一种限制自适应直方图均衡的对比度的方法。 使用较小的值(例如10)可以生成良好的直方图均衡对比度受限图像。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.mean(size, [threshold=False, [offset=0, [invert=False, [mask=None]]]]])\n\n使用盒式滤波器的标准均值模糊滤波。\n\nSize 是内核的大小。取1 (3x3 内核)、2 (5x5 内核)或更高值。\n\n如果你想在滤波器的输出上自适应地设置阈值，你可以传递 threshold=True 参数来启动图像的自适应阈值处理， 他根据环境像素的亮度（核函数周围的像素的亮度有关），将像素设置为1或者0。 负数 offset 值将更多像素设置为1，而正值仅将最强对比度设置为1。 设置 invert 以反转二进制图像的结果输出。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\nmedian(size, percentile=0.5, threshold=False, offset=0, invert=False, mask])\n在图像上运行中值滤波。在保留边缘的条件下，中值滤波是用来平滑表面的最佳滤波，但是运行速度极慢。\n\nSize 是内核的大小。取1 (3x3 内核)、2 (5x5 内核)或更高值。\n\npercentile 控制内核中所使用值的百分位数。默认情况下，每个像素都使用相邻的第五十个百分位数（中心）替换。使用最小滤波时，您可将此值设置为0，使用下四分位数滤波时设置为0.25，使用上四分位数滤波时设置为0.75，使用最大滤波时设置为1。\n\n如果你想在滤波器的输出上自适应地设置阈值，你可以传递 threshold=True 参数来启动图像的自适应阈值处理， 他根据环境像素的亮度（核函数周围的像素的亮度有关），将像素设置为1或者0。 负数 offset 值将更多像素设置为1，而正值仅将最强对比度设置为1。 设置 invert 以反转二进制图像的结果输出。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.mode(size[, threshold=False, offset=0, invert=False, mask])\n\n在图像上运行众数滤波，用相邻像素的模式替换每个像素。这一方法在灰度图上运行效果良好。但由于这一操作的非线性特性，会在RGB图像边缘上产生许多伪像。\n\nSize 是内核的大小。取1 (3x3 内核)、2 (5x5 内核)。\n\n如果你想在滤波器的输出上自适应地设置阈值，你可以传递 threshold=True 参数来启动图像的自适应阈值处理， 他根据环境像素的亮度（核函数周围的像素的亮度有关），将像素设置为1或者0。 负数 offset 值将更多像素设置为1，而正值仅将最强对比度设置为1。 设置 invert 以反转二进制图像的结果输出。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.midpoint(size[, bias=0.5, threshold=False, offset=0, invert=False, mask])\n\n在图像上运行中点滤波。此滤波器找到图像中每个像素邻域的中点((max-min)/2)。\n\nsize 是内核的大小。取1 (3x3 内核)、2 (5x5 内核)或更高值。\n\nbias 控制图像混合的最小/最大程度。0只适用于最小滤波，1仅用于最大滤波。您可以通过 bias 对图像进行最小/最大化过滤。\n\n如果你想在滤波器的输出上自适应地设置阈值，你可以传递 threshold=True 参数来启动图像的自适应阈值处理， 他根据环境像素的亮度（核函数周围的像素的亮度有关），将像素设置为1或者0。 负数 offset 值将更多像素设置为1，而正值仅将最强对比度设置为1。 设置 invert 以反转二进制图像的结果输出。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.morph(size, kernel, mul=Auto, add=0)\n\n通过过滤器内核对图像进行卷积。这允许您对图像执行通用卷积。\n\nsize 将内核的大小控制为((size*2)+1)x((size*2)+1)像素。\n\nkernel 用来卷积图像的内核，可为一个元组或一个取值[-128:127]的列表。\n\nmul 是用以与卷积像素结果相乘的数字。若不设置，则默认一个值，该值将防止卷积输出中的缩放。\n\nadd 是用来与每个像素卷积结果相加的数值。\n\nmul 可进行全局对比度调整，add可进行全局亮度调整。\n\n如果你想在滤波器的输出上自适应地设置阈值，你可以传递 threshold=True 参数来启动图像的自适应阈值处理， 他根据环境像素的亮度（核函数周围的像素的亮度有关），将像素设置为1或者0。 负数 offset 值将更多像素设置为1，而正值仅将最强对比度设置为1。 设置 invert 以反转二进制图像的结果输出。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n#### image.gaussian(size[, unsharp=False[, mul[, add=0[, threshold=False[, offset=0[, invert=False[, mask=None]]]]]]])\n\n通过平滑高斯核对图像进行卷积。\n\nsize 是内核的大小。取1 (3x3 内核)、2 (5x5 内核)或更高值。\n\n如果 unsharp 设置为True，那么这种方法不会仅进行高斯滤波操作，而是执行非锐化掩模操作，从而提高边缘的图像清晰度。\n\nmul 是用以与卷积像素结果相乘的数字。若不设置，则默认一个值，该值将防止卷积输出中的缩放。\n\nadd 是用来与每个像素卷积结果相加的数值。\n\nmul 可进行全局对比度调整，add可进行全局亮度调整。\n\n如果你想在滤波器的输出上自适应地设置阈值，你可以传递 threshold=True 参数来启动图像的自适应阈值处理， 他根据环境像素的亮度（核函数周围的像素的亮度有关），将像素设置为1或者0。 负数 offset 值将更多像素设置为1，而正值仅将最强对比度设置为1。 设置 invert 以反转二进制图像的结果输出。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.laplacian(size[, sharpen=False[, mul[, add=0[, threshold=False[, offset=0[, invert=False[, mask=None]]]]]]])\n\n通过边缘检测拉普拉斯核来对图像进行卷积。\n\nsize 是内核的大小。取1 (3x3 内核)、2 (5x5 内核)或更高值。\n\n如果 sharpen 被设置为True，那么这种方法将改为锐化图像，而不是仅输出未经过阈值处理的边缘检测图像。 增加内核大小然后增加图像清晰度。\n\nmul 是用以与卷积像素结果相乘的数字。若不设置，则默认一个值，该值将防止卷积输出中的缩放。\n\nadd 是用来与每个像素卷积结果相加的数值。\n\nmul 可进行全局对比度调整，add可进行全局亮度调整。\n\n如果你想在滤波器的输出上自适应地设置阈值，你可以传递 threshold=True 参数来启动图像的自适应阈值处理， 他根据环境像素的亮度（核函数周围的像素的亮度有关），将像素设置为1或者0。 负数 offset 值将更多像素设置为1，而正值仅将最强对比度设置为1。 设置 invert 以反转二进制图像的结果输出。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.bilateral(size[, color_sigma=0.1[, space_sigma=1[, threshold=False[, offset=0[, invert=False[, mask=None]]]]]])\n\n通过双边滤波器对图像进行卷积。 双边滤波器使图像平滑，同时保持图像中的边缘。\n\nsize 是内核的大小。取1 (3x3 内核)、2 (5x5 内核)或更高值。\n\ncolor_sigma 控制使用双边滤波器匹配颜色的接近程度。增加此值可增加颜色模糊。\n\nspace_sigma 控制像素在空间方面相互模糊的程度。增加此值可增加像素模糊。\n\n如果你想在滤波器的输出上自适应地设置阈值，你可以传递 threshold=True 参数来启动图像的自适应阈值处理， 他根据环境像素的亮度（核函数周围的像素的亮度有关），将像素设置为1或者0。 负数 offset 值将更多像素设置为1，而正值仅将最强对比度设置为1。 设置 invert 以反转二进制图像的结果输出。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.cartoon(size[, seed_threshold=0.05[, floating_threshold=0.05[, mask=None]]])\n\n漫游图像并使用flood-fills算法填充图像中的所有像素区域。 这通过使图像的所有区域中的颜色变平来有效地从图像中去除纹理。 为了获得最佳效果，图像应具有大量对比度，以使区域不会太容易相互渗透。\n\nseed_threshold 控制填充区域中的像素与原始起始像素的差异。\n\nfloating_threshold 控制填充区域中的像素与任何相邻像素的差异。\n\nmask 是另一个用作绘图操作的像素级掩码的图像。掩码应该是一个只有黑色或白色像素的图像，并且应该与你正在绘制的 image 大小相同。 仅掩码中设置的像素被修改。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.remove_shadows([image])\n\n从该图像中移除阴影。\n\n如果当前图像没有“无阴影”版本出现，则此方法将尝试从图像中去除阴影，但没有真实无阴影的图像依据。 这种算法适用于去除平坦均匀背景中的阴影。 请注意，此方法需要多秒才能运行，并且仅适用于实时移除阴影，动态生成无阴影版本的图像。 该算法的未来版本将适用于更多的环境，但同样缓慢。\n\n如果当前图像有“无阴影”版本出现，则此方法将使用“真实源”背景无阴影图像去除图像中的所有阴影以滤除阴影。 非阴影像素不会被过滤掉，因此您可以向场景中添加以前不存在的新对象，并且这些对象中的任何非阴影像素都将显示出来。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n只支持RGB565图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.chrominvar()\n\n从图像中删除照明效果，仅留下颜色渐变。比 image.illuminvar() 更快但受阴影影响。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n仅支持RGB565图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.illuminvar()\n\n从图像中删除照明效果，仅留下颜色渐变。比 image.chrominvar() 慢但不受阴影影响。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n仅支持RGB565图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.linpolar([reverse=False])\n\n图像从笛卡尔坐标到线性极坐标重新投影。\n\n设置 reverse = True 可以在相反的方向重新投影。\n\n线性极坐标重新投影将图像旋转转换为x平移。\n\n不支持压缩图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.logpolar([reverse=False])\n\n图像从笛卡尔坐标到对数极坐标重新投影。\n\n设置 reverse = True 可以在相反的方向重新投影。\n\n对数极坐标重新投影将图像的旋转转换为x平移和缩放到y平移。\n\n不支持压缩图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.lens_corr([strength=1.8[, zoom=1.0]])\n\n进行镜头畸变校正，以去除镜头造成的图像鱼眼效果。\n\nstrength 是一个浮点数，该值确定了对图像进行去鱼眼效果的程度。在默认情况下，首先试用取值1.8，然后调整这一数值使图像显示最佳效果。\n\nzoom 是在对图像进行缩放的数值。默认值为 1.0 。\n\n返回图像对象，以便您可以使用 . 表示法调用另一个方法。\n\n不支持压缩图像和bayer图像。\n\n #### img.rotation_corr([x_rotation=0.0[, y_rotation=0.0[, z_rotation=0.0[, x_translation=0.0[, y_translation=0.0[, zoom=1.0[, fov=60.0[, corners]]]]]]]])\n\n通过对帧缓冲区进行3D旋转来纠正图像中的透视问题。\n\n`x_rotation` 是图像在帧缓冲区中绕x轴旋转的角度数(也就是图像上下旋转)。\n\n`y_rotation` 是指图像在帧缓冲区中绕y轴旋转的角度数(即左右旋转图像)。\n\n`z_rotation` 是图像在帧缓冲区中绕z轴旋转的角度数(即图像旋转到适当位置)。\n\n`x_translation` 是图像旋转后向左或向右移动的单位数。因为这种转换应用于3D空间，所以单位不是像素……\n\n`y_translation` 是图像在旋转后向上或向下移动的单位数。因为这种转换应用于3D空间，所以单位不是像素……\n\n`zoom` 是将图像缩放的倍数，默认情况下为1.0。\n\n`fov` 是在进行2D->3D投影时在3D空间旋转图像之前内部使用的视场。当这个值接近0时，图像被放置在距离视口无限远的地方。当这个值接近180时，图像被放置在视口中。通常，你不应该改变这个值，但你可以修改它来改变2D->3D映射效果。\n\n`corners` 是一个拥有四个(x, y) tuples 的 list，代表四个 `corner` 用来创建四点对应单应性,将第一个 `corner` 映射到(0,0),第二个 `corner` (image_width-1, 0),第三个 `corner` (image_width-1 image_height-1)和第四个 `corner` (0,image_height-1)。然后在图像被重新映射后应用3D旋转。这个参数允许你使用 rotation_corr 来做一些事情，比如鸟瞰图转换。例如:\n\n```python\ntop_tilt = 10 # if the difference between top/bottom_tilt become to large this method will stop working\nbottom_tilt = 0\n\npoints = [(tilt, 0), (img.width()-tilt, 0), (img.width()-1-bottom_tilt, img.height()-1), (bottom_tilt, img.height()-1)]\n\nimg.rotation_corr(corners=points)\n```\n\n返回图像对象，以便您可以使用 `.` 调用另一个方法。\n\n不支持压缩图像或拜耳图像。\n\n#### image.get_similarity(image)\n\n返回一个“相似度”对象，描述两幅图像使用SSIM算法来比较两幅图像之间的8x8像素色块的相似度。\n\nimage 可以是图像对象，未压缩图像文件的路径(bmp/pgm/ppm)，也可以是标量值。 如果标量值，该值可以是RGB888元组或基础像素值(例如，灰度图像的8位灰度级或RGB图像的字节反转RGB565值)。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.get_histogram([thresholds[, invert=False[, roi[, bins[, l_bins[, a_bins[, b_bins]]]]]]])\n\n在 roi 的所有颜色通道上进行标准化直方图运算，并返回 histogram 对象。 请参考 histogram 对象以获取更多信息。您也可以使用 image.get_hist 或 image.histogram 来调用这一方法。如果传递 thresholds 列表，则直方图信息将仅从阈值列表中的像素计算得出。\n\nthresholds 必须是元组列表。 [(lo, hi), (lo, hi), ..., (lo, hi)] 定义你想追踪的颜色范围。 对于灰度图像，每个元组需要包含两个值 - 最小灰度值和最大灰度值。 仅考虑落在这些阈值之间的像素区域。 对于RGB565图像，每个元组需要有六个值(l_lo，l_hi，a_lo，a_hi，b_lo，b_hi) - 分别是LAB L，A和B通道的最小值和最大值。 为方便使用，此功能将自动修复交换的最小值和最大值。 此外，如果元组大于六个值，则忽略其余值。相反，如果元组太短，则假定其余阈值处于最大范围。\n\n注解\n\n获取所跟踪对象的阈值，只需在IDE帧缓冲区中选择（单击并拖动）跟踪对象。 直方图会相应地更新到所在区域。然后只需写下颜色分布在每个直方图通道中起始与下降位置。 这些将是 thresholds 的低值和高值。 由于上下四分位数据相差微小，故手动确定阈值为佳。\n\n您还可以通过进入OpenMV IDE中的 工具 ->机器视觉 ->阈值编辑器 并从GUI窗口中拖动滑块来确定颜色阈值。\n\ninvert 反转阈值操作，像素在已知颜色范围之外进行匹配，而非在已知颜色范围内。\n\n除非您需要使用颜色统计信息进行高级操作，否则只需使用`image.get_statistics()` 方法代替此方法查看图像中的像素区域。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\nbins 和其他bin是用于直方图通道的箱数。对于灰度图像，使用 bins ， 对于RGB565图像，使用其他每个通道。每个通道的bin计数必须大于2。 另外，将bin计数设置为大于每个通道的唯一像素值的数量是没有意义的。 默认情况下，直方图将具有每个通道的最大bin数。\n\n不支持压缩图像和bayer图像。\n\n#### image.get_statistics([thresholds[, invert=False[, roi[, bins[, l_bins[, a_bins[, b_bins]]]]]]])\n\n计算 roi 中每个颜色通道的平均值、中值、众值、标准偏差、最小值、最大值、下四分值和上四分值，并返回一个数据对象。 请参见 statistics 对象以获取更多信息。您也可以使用 image.get_stats 或 image.statistics 来调用这一方法。 如果传递 thresholds 列表，则直方图信息将仅从阈值列表中的像素计算得出。\n\nthresholds 必须是元组列表。 [(lo, hi), (lo, hi), ..., (lo, hi)] 定义你想追踪的颜色范围。 对于灰度图像，每个元组需要包含两个值 - 最小灰度值和最大灰度值。 仅考虑落在这些阈值之间的像素区域。 对于RGB565图像，每个元组需要有六个值(l_lo，l_hi，a_lo，a_hi，b_lo，b_hi) - 分别是LAB L，A和B通道的最小值和最大值。 为方便使用，此功能将自动修复交换的最小值和最大值。 此外，如果元组大于六个值，则忽略其余值。相反，如果元组太短，则假定其余阈值处于最大范围。\n\n注解\n\n获取所跟踪对象的阈值，只需在IDE帧缓冲区中选择（单击并拖动）跟踪对象。 直方图会相应地更新到所在区域。然后只需写下颜色分布在每个直方图通道中起始与下降位置。 这些将是 thresholds 的低值和高值。 由于上下四分位数据相差微小，故手动确定阈值为佳。\n\n您还可以通过进入OpenMV IDE中的 工具 ->机器视觉 ->阈值编辑器 并从GUI窗口中拖动滑块来确定颜色阈值。\n\ninvert 反转阈值操作，像素在已知颜色范围之外进行匹配，而非在已知颜色范围内。\n\n您可以在需要获取图像中一个像素区域信息时使用这一方法。例如：若您想用帧差法来检测运动时， 您需要使用这一方法来确定图像颜色通道的变化，从而触发运动检测阈值。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\nbins 和其他bin是用于直方图通道的箱数。对于灰度图像，使用 bins ， 对于RGB565图像，使用其他每个通道。每个通道的bin计数必须大于2。 另外，将bin计数设置为大于每个通道的唯一像素值的数量是没有意义的。 默认情况下，直方图将具有每个通道的最大bin数。\n\n不支持压缩图像和bayer图像。\n\n#### image.get_regression(thresholds[, invert=False[, roi[, x_stride=2[, y_stride=1[, area_threshold=10[, pixels_threshold=10[, robust=False]]]]]]])\n\n对图像所有阈值像素进行线性回归计算。这一计算通过最小二乘法进行，通常速度较快，但不能处理任何异常值。 若 robust 为True，则将使用泰尔指数。泰尔指数计算图像中所有阈值像素间的所有斜率的中值。 若在阈值转换后设定太多像素，即使在80x60的图像上，这一N^2操作也可能将您的FPS降到5以下。 但是，只要阈值转换后的进行设置的像素数量较少，即使在超过30%的阈值像素为异常值的情况下，线性回归也依然有效。\n\n这一方法返回的是一个 image.line 对象。如何轻松运用直线对象， 详见下博文： https://openmv.io/blogs/news/linear-regression-line-following\n\nthresholds 必须是元组列表。 [(lo, hi), (lo, hi), ..., (lo, hi)] 定义你想追踪的颜色范围。 对于灰度图像，每个元组需要包含两个值 - 最小灰度值和最大灰度值。 仅考虑落在这些阈值之间的像素区域。 对于RGB565图像，每个元组需要有六个值(l_lo，l_hi，a_lo，a_hi，b_lo，b_hi) - 分别是LAB L，A和B通道的最小值和最大值。 为方便使用，此功能将自动修复交换的最小值和最大值。 此外，如果元组大于六个值，则忽略其余值。相反，如果元组太短，则假定其余阈值处于最大范围。\n\n> 获取所跟踪对象的阈值，只需在IDE帧缓冲区中选择（单击并拖动）跟踪对象。 直方图会相应地更新到所在区域。然后只需写下颜色分布在每个直方图通道中起始与下降位置。 这些将是 thresholds 的低值和高值。 由于上下四分位数据相差微小，故手动确定阈值为佳。\n\n您还可以通过进入OpenMV IDE中的 工具 ->机器视觉 ->阈值编辑器 并从GUI窗口中拖动滑块来确定颜色阈值。\n\ninvert 反转阈值操作，像素在已知颜色范围之外进行匹配，而非在已知颜色范围内。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\nx_stride 是调用函数时要跳过的x像素数。\n\ny_stride 是调用函数时要跳过的y像素数。\n\n如果回归后的边界框区域小于 area_threshold ，则返回None。\n\n如果回归后的像素数小于 pixel_threshold ，则返回None。\n\n不支持压缩图像和bayer图像。\n\n#### image.find_blobs(thresholds[, invert=False[, roi[, x_stride=2[, y_stride=1[, area_threshold=10[, pixels_threshold=10[, merge=False[, margin=0[, threshold_cb=None[, merge_cb=None]]]]]]]]]])\n\n查找图像中所有色块，并返回一个包括每个色块的色块对象的列表。请观察 image.blob 对象以获取更多信息。\n\nthresholds 必须是元组列表。 [(lo, hi), (lo, hi), ..., (lo, hi)] 定义你想追踪的颜色范围。 对于灰度图像，每个元组需要包含两个值 - 最小灰度值和最大灰度值。 仅考虑落在这些阈值之间的像素区域。 对于RGB565图像，每个元组需要有六个值(l_lo，l_hi，a_lo，a_hi，b_lo，b_hi) - 分别是LAB L，A和B通道的最小值和最大值。 为方便使用，此功能将自动修复交换的最小值和最大值。 此外，如果元组大于六个值，则忽略其余值。相反，如果元组太短，则假定其余阈值处于最大范围。\n\n注解\n\n获取所跟踪对象的阈值，只需在IDE帧缓冲区中选择（单击并拖动）跟踪对象。 直方图会相应地更新到所在区域。然后只需写下颜色分布在每个直方图通道中起始与下降位置。 这些将是 thresholds 的低值和高值。 由于上下四分位数据相差微小，故手动确定阈值为佳。\n\n您还可以通过进入OpenMV IDE中的 工具 ->机器视觉 ->阈值编辑器 并从GUI窗口中拖动滑块来确定颜色阈值。\n\ninvert 反转阈值操作，像素在已知颜色范围之外进行匹配，而非在已知颜色范围内。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\nx_stride 是查找某色块时需要跳过的x像素的数量。找到色块后，直线填充算法将精确像素。 若已知色块较大，可增加 x_stride 来提高查找色块的速度。\n\ny_stride 是查找某色块时需要跳过的y像素的数量。找到色块后，直线填充算法将精确像素。 若已知色块较大，可增加 y_stride 来提高查找色块的速度。\n\n若一个色块的边界框区域小于 area_threshold ，则会被过滤掉。\n\n若一个色块的像素数小于 pixel_threshold ，则会被过滤掉。\n\nmerge 若为True，则合并所有没有被过滤掉的色块，这些色块的边界矩形互相交错重叠。 margin 可在相交测试中用来增大或减小色块边界矩形的大小。例如：边缘为1、相互间边界矩形为1的色块将被合并。\n\n合并色块使颜色代码追踪得以实现。每个色块对象有一个代码值 code ，该值为一个位向量。 例如：若您在 image.find_blobs 中输入两个颜色阈值，则第一个阈值代码为1，第二个代码为2（第三个代码为4，第四个代码为8，以此类推）。 合并色块对所有的code使用逻辑或运算，以便您知道产生它们的颜色。这使得您可以追踪两个颜色，若您用两种颜色得到一个色块对象，则可能是一种颜色代码。\n\n若您使用严格的颜色范围，无法完全追踪目标对象的所有像素，您可能需要合并色块。\n\n最后，若您想要合并色块，但不想两种不同阈值颜色的色块被合并，只需分别两次调用 image.find_blobs ，不同阈值色块就不会被合并。\n\nthreshold_cb 可设置为用以调用阈值筛选后的每个色块的函数，以便将其从将要合并的色块列表中过滤出来。 回调函数将收到一个参数：要被筛选的色块对象。然后回调函数需返回True以保留色块或返回False以过滤色块。\n\nmerge_cb 可设置为用以调用两个即将合并的色块的函数，以禁止或准许合并。回调函数将收到两个参数—两个将被合并的色块对象。 回调函数须返回True以合并色块，或返回False以防止色块合并。\n\n不支持压缩图像和bayer图像。\n\n#### image.find_lines([roi[, x_stride=2[, y_stride=1[, threshold=1000[, theta_margin=25[, rho_margin=25]]]]]])\n\n使用霍夫变换查找图像中的所有直线。返回一个 image.line 对象的列表。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。操作范围仅限于 roi 区域内的像素。\n\nx_stride 是霍夫变换时需要跳过的x像素的数量。若已知直线较大，可增加 x_stride 。\n\ny_stride 是霍夫变换时需要跳过的y像素的数量。若已知直线较大，可增加 y_stride 。\n\nthreshold 控制从霍夫变换中监测到的直线。只返回大于或等于 threshold 的直线。 应用程序的正确的 threshold 值取决于图像。注意：一条直线的大小(magnitude)是组成直线所有索贝尔滤波像素大小的总和。\n\ntheta_margin 控制所监测的直线的合并。 直线角度为 theta_margin 的部分和直线p值为 rho_margin 的部分合并。\n\nrho_margin 控制所监测的直线的合并。 直线角度为 theta_margin 的部分和直线p值为 rho_margin 的部分合并。\n\n该方法通过在图像上运行索贝尔滤波器，并利用该滤波器的幅值和梯度响应来进行霍夫变换。 无需对图像进行任何预处理。但是，清理图像过滤器可得到更为稳定的结果。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.find_line_segments([roi[, merge_distance=0[, max_theta_difference=15]]])\n\n使用霍夫转换来查找图像中的线段。返回一个 image.line 对象的列表。\n\nroi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定， ROI 即图像矩形。操作范围仅限于roi区域内的像素。\n\nmerge_distance 指定两条线段之间的可以相互分开而不被合并的最大像素数。\n\nmax_theta_difference 是上面 merge_distancede 要合并的的两个线段的最大角度差值。\n\n此方法使用LSD库（也被OpenCV使用）来查找图像中的线段。这有点慢，但是非常准确，线段不会跳跃。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.find_circles([roi[, x_stride=2[, y_stride=1[, threshold=2000[, x_margin=10[, y_margin=10[, r_margin=10]]]]]]])\n\n使用霍夫变换在图像中查找圆。返回一个 image.circle 对象列表（见上）。\n\nroi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定， ROI 即图像矩形。操作范围仅限于roi区域内的像素。\n\nx_stride 是霍夫变换时需要跳过的x像素的数量。若已知圆较大，可增加 x_stride 。\n\ny_stride 是霍夫变换时需要跳过的y像素的数量。若已知圆较大，可增加 y_stride 。\n\nthreshold 控制从霍夫变换中监测到的圆。只返回大于或等于 threshold 的圆。 应用程序的正确的 threshold 值取决于图像。注意：一个圆的大小(magnitude)是组成圆所有索贝尔滤波像素大小的总和。\n\nx_margin 控制所检测的圆的合并。 圆像素为 x_margin 、 y_margin 和 r_margin 的部分合并。\n\ny_margin 控制所检测的圆的合并。 圆像素为 x_margin 、 y_margin 和 r_margin 的部分合并。\n\nr_margin 控制所检测的圆的合并。 圆像素为 x_margin 、 y_margin 和 r_margin 的部分合并。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.find_rects([roi=Auto, threshold=10000])\n\n使用用于查找AprilTAg的相同的quad detection算法来查找图像中的矩形。 最适用与背景形成鲜明对比的矩形。AprilTag的quad detection可以处理任意缩放/旋转/剪切的矩形。 返回一个 image.rect 对象的列表。\n\nroi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定， ROI即图像矩形。操作范围仅限于 roi 区域内的像素。\n\n边界大小（通过在矩形边缘上的所有像素上滑动索贝尔算子并相加该值）小于 threshold 的矩形会从返回列表中过滤出来。 threshold 的正确值取决于您的应用程序/场景。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.find_qrcodes([roi])\n\n查找 roi 内的所有二维码并返回一个 image.qrcode 对象的列表。 请参考 image.qrcode 对象以获取更多信息。\n\n为使这一方法成功运行，图像上二维码需比较平展。通过使用 sensor.set_windowing 函数在镜头中心放大、 image.lens_corr 函数来消解镜头的桶形畸变或通过更换视野较为狭小的镜头， 您可得到一个不受镜头畸变影响的更为平展的二维码。有些机器视觉镜头不会造成桶形失真，但是其造价远比OpenMV提供的标准镜片高，这种镜头为无畸变镜头。\n\nroi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定，ROI即整幅图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\nimage.find_apriltags([roi[, families=image.TAG36H11[, fx[, fy[, cx[, cy]]]]]])\n查找 roi 内的所有AprilTag, 并返回一个 image.apriltag 对象的列表。请参考 image.apriltag 对象以获取更多信息。\n\n与二维码相比，AprilTags可在更远距离、较差光线和更扭曲的图像环境下被检测到。 AprilTags可应对所有种类的图像失真问题，而二维码并不能。也就是说，AprilTags只能将数字ID编码作为其有效载荷。\n\nAprilTags也可用于本地化。每个 image.apriltag 对象都从摄像机返回其三维位置信息和旋转角度。 位置信息由 fx 、 fy 、 cx 和 cy 决定，分别为X和Y方向上图像的焦距和中心点。\n\n> 使用OpenMV IDE内置的标签生成器工具来创建AprilTags。标签生成器可创建可打印的8.5“x11”AprilTags。\n\nroi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定，ROI即整幅图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\nfamilies 是要解码的标签家族的位掩码。是一个逻辑或：\n\nimage.TAG16H5\nimage.TAG25H7\nimage.TAG25H9\nimage.TAG36H10\nimage.TAG36H11\nimage.ARTOOLKIT\n默认设置为最好用的 image.TAG36H11 标签家族。注意：每启用一个标签家族， find_apriltags 的速度都会略有放慢。\n\nfx 是以像素为单位的相机x方向的焦距。标准OpenMV Cam的值为(2.8 / 3.984) * 656， 该值通过毫米计的焦距值除以X方向上感光元件的长度，再乘以X方向上感光元件的像素数量得来（对OV7725感光元件而言）。\n\nfy 是以像素为单位的相机y方向的焦距。标准OpenMV Cam的值为(2.8 / 2.952) * 488， 该值通过毫米计的焦距值除以Y方向上感光元件的长度，再乘以Y方向上感光元件的像素数量得来（对OV7725感光元件而言）。\n\ncx 是图像的中心，即 image.width()/2 ，而非 roi.w()/2 。\n\ncy 是图像的中心，即 image.height()/2，而非 roi.h()/2 。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\nimage.find_datamatrices([roi[, effort=200]])\n查找 roi 内的所有数据矩阵并返回一个 image.datamatrix 对象的列表。 请参考 image.datamatrix 对象以获取更多信息。\n\n为使这一方法成功运行，图像上矩形码需比较平展。通过使用 sensor.set_windowing 函数在镜头中心放大、 image.lens_corr 函数来消解镜头的桶形畸变或通过更换视野较为狭小的镜头，您可得到一个不受镜头畸变影响的更为平展的矩形码。 有些机器视觉镜头不会造成桶形失真，但是其造价远比OpenMV提供的标准镜片高，这种镜头是无畸变镜头。\n\nroi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定，ROI即整幅图像的图像矩形。操作范围仅限于 roi 区域内的像素。\n\neffort 控制用于查找矩形码匹配的时间。默认值为200应该适用于所有用例。 但是您也可能以帧速率为代价增加检测，或以检测为代价增加帧速率。 注意：若 effort 设置在约160以下，您就无法进行任何检测；相反，您可将其设置为您需要的任何高值，但是若设置值高于240，检测率将不会继续随之提高。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.find_barcodes([roi])\n\n查找 roi 内所有一维条形码并返回一个 image.barcode 对象列表。 请参考 image.barcode 对象以获取更多信息。\n\n为了获得最佳效果，请使用长640、宽40/80／160窗口。垂直程度越低，运行速度越快。由于条形码是线性一维图像，所以只需在一个方向上有较高分辨率， 而在另一方向上只需较低分辨率。注意：该函数进行水平和垂直扫描，所以您可使用宽40/80／160、长480的窗口。 最后，请一定调整镜头，这样条形码会定位在焦距产生最清晰图像的地方。模糊条码无法被解码。\n\n该函数支持所有一维条形码：\n\nimage.EAN2\nimage.EAN5\nimage.EAN8\nimage.UPCE\nimage.ISBN10\nimage.UPCA\nimage.EAN13\nimage.ISBN13\nimage.I25\nimage.DATABAR (RSS-14)\nimage.DATABAR_EXP (RSS-Expanded)\nimage.CODABAR\nimage.CODE39\nimage.PDF417\nimage.CODE93\nimage.CODE128\nroi 是一个用以复制的矩形的感兴趣区域(x, y, w, h)。如果未指定，ROI即整幅图像的图像矩形。操作范围仅限于 roi 区域内的像素。\n\n不支持压缩图像和bayer图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\nimage.find_displacement(template[, roi[, template_roi[, logpolar=False]]])\n从模板中查找此图像的变换偏移量。 这种方法可以用来做光流。 此方法返回一个 image.displacement 对象，其中包含使用相位相关的位移计算结果。\n\nroi 是需要处理的矩形区域（x，y，w，h）。如果未指定，则等于图像矩形。\n\ntemplate_roi 是需要处理的矩形区域（x，y，w，h）。如果未指定，则等于图像矩形。\n\nroi 和 template roi必须具有相同的w/h，但x/y可以为图像任意位置。您可以在较大图像上滑动较小的rois以获得光流渐变图像.\n\nimage.find_displacement 通常计算两个图像之间的x/y平移。但是，如果您设置 logpolar = True ， 它将会在两个图像之间找到旋转和缩放比例的变化。相同的 image.displacement 对象结果两种可能的反馈。\n\n不支持压缩图像和bayer图像。\n\n注解\n\n请在长宽一致的图像（例如``sensor.B64X64``）上使用此方法。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.find_number(roi)\n\n运行在MINST数据集上训练的LENET-6 CNN（卷积神经网络），以检测位于图像上任何位置的28x28 ROI中的数字。 返回一个包含整数和浮点数的元组，表示检测到的数字（0-9）和检测的置信度（0-1）。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\n仅支持灰度图像。\n\n注解\n\n这种方法是实验性的。如果未来运行使用Caffe在PC上训练的任何CNN，这种方法可能会删除。 最新3.0.0版本固件已删除此函数。\n\n此方法在OpenMV Cam M4 上不可用。\n\n#### image.classify_object(roi)\n\n在图像的ROI上运行CIFAR-10 CNN，以检测飞机，汽车，鸟类，猫，鹿，狗，青蛙，马，船和卡车。 此方法在内部自动将图像缩放到32x32以馈送到CNN。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\n仅支持RGB565图像。\n\n注解\n\n这种方法是实验性的。如果未来运行使用Caffe在PC上训练的任何CNN，这种方法可能会删除。\n\n此方法在OpenMV Cam M4 上不可用。\n\nimage.find_template(template, threshold[, roi[, step=2[, search=image.SEARCH_EX]]])\n尝试使用归一化互相关(NCC)算法在图像中找到第一个模板匹配的位置。返回匹配位置的边界框元组(x, y, w, h)，否则返回None。\n\ntemplate 是一个与这个图像对象相匹配的小图像对象。注意：两图像须都为灰度图。\n\nthreshold 是浮点数（0.0-1.0），其中较小的值在提高检测速率同时增加误报率。相反，较高的值会降低检测速率，同时降低误报率。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\nstep 是查找模板时需要跳过的像素数量。跳过像素可大大提高算法运行的速度。该方法只适用于SERACH_EX模式下的算法。\n\nsearch 可为 image.SEARCH_DS or image.SEARCH_EX. image.SEARCH_DS 搜索模板所用算法较 image.SEARCH_EX 更快，但若模板位于图像边缘周围，可能无法成功搜索。 image.SEARCH_EX 可对图像进行较为详尽的搜索，但其运行速度远低于 image.SEARCH_DS 。\n\n仅支持灰度图像。\n\n#### image.find_features(cascade[, threshold=0.5[, scale=1.5[, roi]]])\n\n这个方法搜索与Haar Cascade匹配的所有区域的图像，并返回一个关于这些特征的边界框矩形元组(x，y，w，h)的列表。若未发现任何特征，则返回一个空白列表。\n\ncascade 是一个Haar Cascade对象。详细信息请查看 image.HaarCascade() 。\n\nthreshold 是浮点数（0.0-1.0），其中较小的值在提高检测速率同时增加误报率。相反，较高的值会降低检测速率，同时降低误报率。\n\nscale 是一个必须大于1.0的浮点数。较高的比例因子运行更快，但其图像匹配相应较差。理想值介于1.35-1.5之间。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\n仅支持灰度图像。\n\n#### image.find_eye(roi)\n\n在眼睛周围的感兴趣区域(x, y, w, h)查找瞳孔。返回一个包含图像中瞳孔(x，y)位置的元组。若未发现瞳孔，则返回(0,0)。\n\n使用这一函数之前，需首先使用 image.find_features() 和Haar算子 frontalface 来搜索某人面部。 然后使用 image.find_features 和Haar算子 find_eye 在面部搜索眼睛。 最后，在调用 image.find_features 函数后返回的每个眼睛ROI上调用这一方法，以得到瞳孔的坐标。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\n仅支持灰度图像。\n\n#### image.find_lbp(roi)\n\n从ROI元组(x, y, w, h)中提取LBP（局部二值模式）键点。您可以使用 image.match_descriptor 函数来比较两组关键点，以获取匹配距离。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\n仅支持灰度图像。\n\n#### image.find_keypoints([roi[, threshold=20[, normalized=False[, scale_factor=1.5[, max_keypoints=100[, corner_detector=image.CORNER_AGAST]]]]]])\n\n从ROI元组(x, y, w, h)中提取ORB键点。您可以使用 image.match_descriptor 函数来比较两组关键点，以获取匹配区域。若未发现关键点，则返回None。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\nthreshold 是控制提取的数量的数字（取值0-255）。对于默认的AGAST角点检测器，该值应在20左右。 对于FAST角点检测器，该值约为60-80。阈值越低，您提取的角点越多。\n\nnormalized 是布尔值。若为True，在多分辨率下关闭提取键点。 若您不关心处理扩展问题，且希望算法运行更快，就将之设置为True。\n\nscale_factor 是一个必须大于1.0的浮点数。较高的比例因子运行更快，但其图像匹配相应较差。理想值介于1.35-1.5之间。\n\nmax_keypoints 是一个键点对象所能容纳的键点最大数量。若键点对象过大导致内存问题，请降低该值。\n\ncorner_detector 是从图像中提取键点所使用的角点检测器算法。 可为 image.CORNER_FAST 或 image.CORNER_AGAST 。FAST角点检测器运行速度更快，但其准确度较低。\n\n仅支持灰度图像。\n\n#### image.find_edges(edge_type[, threshold])\n\n将图像变为黑白，仅将边缘保留为白色像素。\n\nimage.EDGE_SIMPLE - 简单的阈值高通滤波算法\nimage.EDGE_CANNY - Canny边缘检测算法\nthreshold 是一个包含一个低阈值和一个高阈值的二值元组。您可以通过调整该值来控制边缘质量。\n\n默认为 (100, 200)。\n\n仅支持灰度图像。\n\nfind_hog([roi[, size=8]])\n用HOG（定向梯度直方图）线替换ROI中的像素。\n\nroi 是感兴趣区域的矩形元组(x，y，w，h)。如果未指定，ROI即整个图像的图像矩形。 操作范围仅限于 roi 区域内的像素。\n\n仅支持灰度图像。\n\n此方法在OpenMV Cam M4 上不可用。\n\n## 常量\n\n### image.SEARCH_EX\n\n详尽的模板匹配搜索。\n\n### image.SEARCH_DS\n\n更快的模板匹配搜索。\n\n### image.EDGE_CANNY\n\n使用Canny边缘检测算法对图像进行边缘检测。\n\n### image.EDGE_SIMPLE\n\n使用阈值高通滤波算法对图像进行边缘检测。\n\n### image.CORNER_FAST\n\n用于ORB键点的高速低准确率角点检测算法\n\n### image.CORNER_AGAST\n\n用于ORB键点的低速高准确率算法。\n\n### image.TAG16H5\n\nTAG1H5标签群的位掩码枚举。用于AprilTags。\n\n### image.TAG25H7\n\nTAG25H7标签群的位掩码枚举。用于AprilTags。\n\n### image.TAG25H9\n\nTAG25H9标签群的位掩码枚举。用于AprilTags。\n\n### image.TAG36H10\n\nTAG36H10标签群的位掩码枚举。用于AprilTags。\n\n### image.TAG36H11\n\nTAG36H11标签群的位掩码枚举。用于AprilTags。\n\n### image.ARTOOLKIT\n\nARTOOLKIT标签群的位掩码枚举。用于AprilTags。\n\n### image.EAN2\n\nEAN2条形码类型枚举。\n\n### image.EAN5\n\nEAN5条形码类型枚举。\n\n### image.EAN8\n\nEAN8条形码类型枚举。\n\n### image.UPCE\n\nUPCE条形码类型枚举。\n\n### image.ISBN10\n\nISBN10条形码类型枚举。\n\n### image.UPCA\n\nUPCA条形码类型枚举。\n\n### image.EAN13\n\nEAN13条形码类型枚举。\n\n### image.ISBN13\n\nISBN13条形码类型枚举。\n\n### image.I25\n\nI25条形码类型枚举。\n\n### image.DATABAR\n\nDATABAR条形码类型枚举。\n\n### image.DATABAR_EXP\n\nDATABAR_EXP条形码类型枚举。\n\n### image.CODABAR\n\nCODABAR条形码类型枚举。\n\n### image.CODE39\n\nCODE39条形码类型枚举。\n\n### image.PDF417\n\nPDF417条形码类型枚举（目前尚不能运行）。\n\n### image.CODE93\n\nCODE93条形码类型枚举。\n\n### image.CODE128\n\nCODE128条形码类型枚举。"}, "/soft/maixpy/zh/api_reference/machine_vision/isolated_word.html": {"title": "isolated_word（孤立词 MFCC 模块）", "content": "---\ntitle: isolated_word（孤立词 MFCC 模块）\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: isolated_word（孤立词 MFCC 模块）\n---\n\n\n## 类 （class）\n\n### isolated_word\n\nisolated_word 构造参数如下：\n\n- `dmac`: 录音所使用的 DMA 通道，默认使用【通道 2】。\n- `i2s`: 录音设备，默认使用 I2S.DEVICE_0 。\n- `size`: 词汇模板容量，表示可以加载的模板总数，默认为 10 个。\n- `shift`: 声道选择，Maix 系列的硬件录音设备通常为单声道输入，设置 0 为左声道，所以 1 为右声道。\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word(dmac=2, i2s=I2S.DEVICE_0, size=10, shift=0)\n```\n\n## 方法 （function）\n\n### size\n\n返回当前词汇模板总量。\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nsr.size()\n```\n\n### set_threshold\n\n设置孤立词模块的工作参数。\n\n- 参数①： 噪声阈值，用于短时过零率计算\n- 参数②： 短时过零率阈值，超过此阈值，视为进入过渡段。\n- 参数③： 短时累加和阈值，超过此阈值，视为进入过渡段。\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nsr.set_threshold(0, 0, 10000)\n```\n\n### record\n\n录入【词汇模板】。\n\n- 参数①： 将录入的模板保存到指定的索引位置。\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nwhile True：\n  if sr.Done == sr.record(0):\n    pass\n```\n\n### state\n\n可以返回如下工作状态。\n\n\n| 功能  | 描述      |\n| ---   | ---        |\n| Init  | 模块已经初始化。       |\n| Idle  | 模块正在空转，没有工作。|\n| Ready   | 模块录音处理中。       |\n| MaybeNoise| 模块判断是否为噪音环境。|\n| Speak   | 模块等待人声录入。   |\n| Restrain| 模块录入数据不合法，退回 Speak 状态。  |\n| Done  | 模块语音识别成功，可通过 result 获取结果。|\n\n### recognize\n\n识别【词汇模板】。\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nwhile True：\n  if sr.Done == sr.recognize():\n    print(sr.result())\n```\n\n### result\n\n获取【词汇模板】,返回 （匹配的模板编号、匹配的dtw值、当前的帧长、匹配的帧长） 数组。\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nprint(sr.result())\n```\n\n### get\n\n获取【词汇模板】,返回 （数据帧长， 数据帧） 数组。\n\n#### 返回值\n\n* `frm_len`:数据帧长\n* `frm_data`:数据帧\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nprint(sr.get(0))\n```\n\n### set\n\n加载【词汇模板】到模块中。\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nprint(sr.set(1, sr.get(0)))\n```\n\n### run\n\n运行孤立词模块（录音）。\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nsr.run()\n```\n\n### reset\n\n重置孤立词模块。\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nsr.reset()\n```\n\n### dtw\n\n返回 动态时间弯折(DTW)算法 计算最优匹配值，该值越小就越好。\n\n#### 返回值\n\n* `dis`:累计匹配距离（int） \n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nprint(sr.dtw(sr.get(0)))\n```\n\n### __del__\n\n释放孤立词模块，可以主动调用，也可以被 gc.collect() 自动回收。\n\n```python\nfrom speech_recognizer import isolated_word\nsr = isolated_word()\nsr.__del__()\ndel sr\n```"}, "/soft/maixpy/zh/api_reference/machine_vision/sensor.html": {"title": "sensor（摄像头）", "content": "---\ntitle: sensor（摄像头）\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: sensor（摄像头）\n---\n\n\nsensor 传感器模块(这里特指摄像头模块)，进行摄像头配置及图像抓取等，用于控制开发板摄像头完成摄像任务。\n\n\n## 方法\n\n### 初始化单目摄像头\n\n重置并初始化单目摄像头\n\n```python\nsensor.reset([, freq=24000000[, set_regs=True[, dual_buff=False]]])\n```\n\n#### 参数\n\n* `freq`: 设置摄像头时钟频率，频率越高帧率越高，但是画质可能更差。默认 `24MHz`， 如果摄像头有彩色斑点(ov7740)，可以适当调低比如 `20MHz`\n* `set_regs`: 允许程序写摄像头寄存器，默认为 `True`。 如果需要自定义复位序列，可以设置为`False`，然后使用`sensor.__write_reg(addr, value)` 函数自定义写寄存器序列\n* `dual_buff`: 默认为`False`。允许使用双缓冲，会增高帧率，但是内存占用也会增加(大约为384KiB)\n* `choice`: 指定需要搜索的摄像头类型，ov类型(1)，gc类型(2)，mt类型(3)，不传入该参数则搜索全部类型摄像头\n\n#### 返回值\n\n无\n\n### 重置双目摄像头\n\n重置并初始化双目摄像头\n\n> K210 只有一个 DVP 接口，同一时间只能控制一个 Sensor。但是我们可以借助 `shudown` 方法控制 PWDN 引脚以选择特定的 Sensor。 指定 Sensor 后其余操作不变。详见\n\n例程 2\n\n```python\nsensor.binocular_reset()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n### 设置帧大小\n\n用于设置摄像头输出帧大小，k210最大支持VGA格式，大于VGA将无法获取图像\n\n> MaixPy开发板配置的屏幕是320*240分辨率，推荐设置为QVGA格式\n\n```\nsensor.set_framesize(framesize[, set_regs=True])\n```\n\n#### 参数\n\n* `framesize`: 帧大小\n* `set_regs`: 允许程序写摄像头寄存器，默认为 `True`。 如果需要自定义设置帧大小的序列，可以设置为`False`，然后使用`sensor.__write_reg(addr, value)` 函数自定义写寄存器序列\n\n#### 返回值\n\n* `True` : 设置成功\n* `False`: 设置错误\n\n### 设置帧格式\n\n用于设置摄像头输出格式\n\n> MaixPy开发板配置的屏幕使用的是RGB565，推荐设置为RGB565格式\n\n```\nsensor.set_pixformat(format[, set_regs=True])\n```\n#### 参数\n\n* `format`: 帧格式\n* `set_regs`: 允许程序写摄像头寄存器，默认为 `True`。 如果需要自定义设置像素格式的序列，可以设置为`False`，然后使用`sensor.__write_reg(addr, value)` 函数自定义写寄存器序列\n\n> 可选的帧格式有`GRAYSCALE`, `RGB565`, `YUV422`\n\n#### 返回值\n\n* `True` : 设置成功\n* `False`: 设置错误\n\n### 图像捕捉控制\n\n图像捕捉功能控制\n\n```\nsensor.run(enable)\n```\n#### 参数\n\n* `enable`: 1 表示开始抓取图像 0 表示停止抓取图像\n\n#### 返回值\n\n* `True` : 设置成功\n* `False`: 设置错误\n\n\n### 拍摄图像\n\n使用摄像头拍摄一张照片\n\n```\nsensor.snapshot()\n```\n#### 参数\n\n无\n\n#### 返回值\n\n* `img`: 返回的图像对象\n\n### 摄像头控制\n\n关闭摄像头/切换摄像头\n\n```\nsensor.shutdown(enable/select)\n```\n#### 参数\n\n单目摄像头\n* `enable`: True 表示开启摄像头 False 表示关闭摄像头\n\n双目摄像头\n* `select`: 通过写入 0 或 1 来切换摄像头\n\n#### 返回值\n\n无\n\n### 跳帧\n\n跳过指定帧数或者跳过指定时间内的图像，让相机图像在改变相机设置后稳定下来\n\n```\nsensor.skip_frames(n, [, time])\n```\n#### 参数\n\n* `n`: 跳过 n 帧图像\n\n* `time`: 跳过指定时间，单位为ms\n\n> 若 n 和 time 皆未指定，该方法跳过300毫秒的帧；若二者皆指定，该方法会跳过 n 数量的帧，但将在 time 毫秒后返回\n\n#### 返回值\n\n无\n\n### 分辨率宽度\n\n获取摄像头分辨率宽度\n\n```\nsensor.width()\n```\n#### 参数\n\n无\n\n#### 返回值\n\n* `int`类型的摄像头分辨率宽度\n\n\n\n### 分辨率高度\n\n获取摄像头分辨率高度\n\n```\nsensor.height()\n```\n#### 参数\n\n无\n\n#### 返回值\n\n* `int`类型的摄像头分辨率高度\n\n### 获取帧缓冲\n\n获取当前帧缓冲区\n\n```\nsensor.get_fb()\n```\n#### 参数\n\n无\n\n#### 返回值\n\n* `image`类型的对象\n\n### 获取ID\n\n获取当前摄像头ID,需要在摄像头reset之后才能读取到id号\n\n```\nsensor.get_id()\n```\n#### 参数\n\n摄像头的id号\n\n#### 返回值\n\n* `int`类型的ID\n\n### 设置彩条测试模式\n\n将摄像头设置为彩条测试模式\n\n> 开启彩条测试模式后，摄像头会输出一彩条图像，常用来检测摄像机总线是否连接正确。\n```\nsensor.set_colorbar(enable)\n```\n#### 参数\n\n* `enable`: 1 表示开启彩条测试模式 0 表示关闭彩条测试模式\n\n#### 返回值\n\n无\n\n### 设置对比度\n\n设置摄像头对比度\n\n```\nsensor.set_contrast(contrast)\n```\n#### 参数\n\n* `constrast`: 摄像头对比度，范围为[-2,+2]\n\n#### 返回值\n\n* `True` : 设置成功\n* `False`: 设置错误\n\n### 设置亮度\n\n设置摄像头亮度\n\n```\nsensor.set_brightness(brightness)\n```\n#### 参数\n\n* `brightness`: 摄像头亮度，范围为[-2,+2]\n\n####  返回值\n\n* `True` : 设置成功\n* `False`: 设置错误\n\n### 设置饱和度\n\n设置摄像头饱和度\n\n```\nsensor.set_saturation(saturation)\n```\n#### 参数\n\n* `constrast`: 摄像头饱和度，范围为[-2,+2]\n\n#### 返回值\n\n* `True` : 设置成功\n* `False`: 设置错误\n\n### 设置自动增益\n\n设置摄像自动增益模式\n\n```\nsensor.set_auto_gain(enable,gain_db)\n```\n\n#### 参数\n\n* `enable`: 1 表示开启自动增益 0 表示关闭自动增益\n* `gain_db`: 关闭自动增益时，设置的摄像头固定增益值，单位为dB\n\n> 如果需要追踪颜色，需要关闭自动增益\n\n\n#### 返回值\n\n无\n\n### 获取增益值\n\n获取摄像头增益值\n\n```\nsensor.get_gain_db()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n* `float`类型的增益值\n\n### 设置水平镜像\n\n设置摄像头水平镜像\n\n```\nsensor.set_hmirror(enable)\n```\n\n#### 参数\n\n* `enable`: 1 表示开启水平镜像 0 表示关闭水平镜像\n\n#### 返回值\n\n无\n### 设置摄像头垂直翻转\n\n设置摄像头垂直翻转\n\n```\nsensor.set_vflip(enable)\n```\n\n#### 参数\n\n* `enable`: 1 表示开启垂直翻转 0 表示关闭垂直翻转\n\n#### 返回值\n\n无\n\n### 写入寄存器\n\n往摄像头寄存器写入指定值\n\n```\nsensor.__write_reg(address, value)\n```\n\n#### 参数\n\n* `address`: 寄存器地址\n* `value`  ： 写入值\n\n#### 返回值\n\n无\n\n> 请参阅摄像头数据手册以获取详细信息\n\n### 读取寄存器\n\n读取摄像头寄存器值\n\n```\nsensor.__read_reg(address)\n```\n\n#### 参数\n\n* `address`: 寄存器地址\n\n#### 返回值\n\n* `int`类型的寄存器值\n\n> 请参阅摄像头数据手册以获取详细信息\n\n### set_jb_quality\n\n设置传送给 IDE 图像的质量\n\n```\nsensor.set_jb_quality(quality)\n```\n\n#### 参数\n\n`quality`：`int` 类型，图像质量百分比（0~100），数字越大质量越好\n\n## 例程\n\n\n### 例程 1\n\n```python\n# 单目摄像头\n\nimport sensor\nimport lcd\n\nlcd.init()\n\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\n\nwhile True:\n    img = sensor.snapshot()\n    lcd.display(img)\n```\n\n### 例程 2\n\n```python\n# 双目摄像头\n\nimport sensor\nimport image\nimport lcd\nimport time\n\nlcd.init()\n\nsensor.binocular_reset()\nsensor.shutdown(0)  # 选中sensor 0\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\n\nsensor.shutdown(1)  # 选中sensor 1\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\n\nwhile True:\n    sensor.shutdown(0)  # 选中sensor 0\n    img = sensor.snapshot()\n    lcd.display(img)\n    time.sleep_ms(100)\n\n    sensor.shutdown(1)  # 选中sensor 1\n    img = sensor.snapshot()\n    lcd.display(img)\n    time.sleep_ms(100)\n```"}, "/soft/maixpy/zh/api_reference/machine_vision/lcd.html": {"title": "lcd（屏幕显示）", "content": "---\ntitle: lcd（屏幕显示）\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: lcd（屏幕显示）\n---\n\n\n\n\n## 函数\n\n### lcd.init(type=1, freq=15000000, color=lcd.BLACK, invert = 0, lcd_type = 0)\n\n初始化 `LCD` 屏幕显示\n\n#### 参数\n\n* `type`： 设备的类型（保留给未来使用）:\n  * `0`: None\n  * `1`: lcd shield（默认值）\n  * `2`: Maix Cube\n  * `5`: sipeed rgb 屏转接板\n> type 是键值参数，必须在函数调用中通过写入 type= 来显式地调用\n\n* `freq`： `LCD` （实际上指 `SPI` 的通讯速率） 的频率\n\n* `color`： `LCD` 初始化的颜色， 可以是 16 位的 `RGB565` 颜色值，比如 `0xFFFF`； 或者 `RGB888` 元组， 比如 `(236, 36, 36)`， 默认 `lcd.BLACK`\n\n* `invert`: `LCD` 反色显示\n\n* `lcd_type`: lcd 类型：\n  * `0`: 默认类型\n  * `1`: LCD_TYPE_ILI9486\n  * `2`: LCD_TYPE_ILI9481\n  * `3`: LCD_TYPE_5P0_7P0，5 寸或 7 寸 分辨率为 800 * 480 的 lcd （需要搭配 sipeed 转接板）\n  * `4`: LCD_TYPE_5P0_IPS，5 寸 分辨率为 854*489 的 IPS lcd （需要搭配 sipeed 转接板）\n  * `5`: LCD_TYPE_480_272_4P3，4.3 寸分辨率为 480*272 的 lcd （需要搭 sipeed 配转接板）\n\n> MaixCube 和 MaixAmigo 使用 LCD 之前需要配置电源芯片，否则会出现花屏现象，这一步 MaixPy 固件会自动配置，无需手动操作，用户只需要了解即可\n\n### lcd.deinit()\n\n注销 `LCD` 驱动，释放I/O引脚\n\n### lcd.width()\n\n返回 `LCD` 的宽度（水平分辨率）\n\n\n### lcd.height()\n\n返回 `LCD` 的高度（垂直分辨率）。\n\n\n### lcd.type()\n\n返回 `LCD` 的类型（保留给未来使用）：\n\n0: None\n1: lcd Shield\n\n### lcd.freq(freq)\n\n设置或者获取 `LCD` （SPI） 的频率\n\n#### Paremeters\n\n* `freq`: LCD (SPI) 的频率\n\n#### Return\n\nLCD 的频率\n\n\n### lcd.set_backlight(state)\n\n设置 `LCD` 的背光状态， 关闭背光会大大降低lcd扩展板的能耗\n\n> 未实现\n\n#### 参数\n\n* `state`： 背光亮度， 取值 [0,100]\n\n### lcd.get_backlight()\n\n返回背光状态\n\n#### 返回值\n\n背光亮度， 取值 [0,100]\n\n### lcd.display(image, roi=Auto, oft=(x, y))\n\n在液晶屏上显示一张 `image`（GRAYSCALE或RGB565）。\n\nroi 是一个感兴趣区域的矩形元组(x, y, w, h)。若未指定，即为图像矩形\n\n若 roi 宽度小于lcd宽度，则用垂直的黑色边框使 roi 居于屏幕中心（即用黑色填充未占用区域）。\n\n若 roi 宽度大于lcd宽度，则 roi 居于屏幕中心，且不匹配像素不会显示（即液晶屏以窗口形态显示 roi 的中心）。\n\n若 roi 高度小于lcd高度，则用垂直的黑色边框使 roi 居于屏幕中心（即用黑色填充未占用区域）。\n\n若 roi 高度大于lcd高度，则 roi 居于屏幕中心，且不匹配像素不会显示（即液晶屏以窗口形态显示 roi 的中心）。\n\n> roi 是键值参数，必须在函数调用中通过写入 roi= 来显式地调用。\n\n* `oft`: 设置偏移坐标，设置了这个坐标就不会自动填充周围了\n\n\n### lcd.clear()\n\n将液晶屏清空为黑色或者指定的颜色。\n\n#### 参数\n\n* `color`： `LCD` 初始化的颜色， 可以是 16 位的 `RGB565` 颜色值，比如 `0xFFFF`； 或者 `RGB888` 元组， 比如 `(236, 36, 36)`\n\n\n### lcd.direction(dir)\n\n在 `v0.3.1` 之后已经被舍弃， 请使用`lcd.rotation` 和 `lcd.invert`代替， 如非必要请勿使用， 接口仍会被保留用于调试使用\n\n设置屏幕方向， 以及是否镜像等\n\n#### 参数\n\n* `dir`： 正常情况下推荐 `lcd.YX_LRUD` 和 `lcd.YX_RLDU`， 另外还有其它值，交换 `XY` 或者 `LR` 或者 `DU`即可\n\n### lcd.rotation(dir)\n\n设置 `LCD` 屏幕方向\n\n#### 参数\n\n* `dir`: 取值范围 [0,3]， 从`0`到`3`依次顺时针旋转\n\n#### 返回值\n\n当前方向，取值[0,3]\n\n### lcd.mirror(invert)\n\n设置 `LCD` 是否镜面显示\n\n#### 参数\n\n* `invert`： 是否镜面显示， `True` 或者 `False`\n\n#### 返回值\n\n当前设置，是否镜面显示，返回`True`或者`False`\n\n### lcd.bgr_to_rgb(enable)\n\n设置是否启动 bgr 色彩显示\n\n#### 参数\n\n* `enable`：是否启用 bgr 显示，`True` 或者 `False`\n\n### lcd.fill_rectangle(x, y, w, h, color)\n\n填充`LCD` 指定区域\n\n#### 参数\n\n* `x`: 起始坐标`x`\n* `x`: 起始坐标`y`\n* `w`: 填充宽度\n* `h`: 填充高度\n* `color`: 填充颜色， 可以是元组，比如`(255, 255, 255)`，或者`RGB565``uint16`值， 比如红色`0x00F8`\n\n## 例程\n\n### 例程 1： 显示英文\n\n```python\nimport lcd\n\nlcd.init()\nlcd.draw_string(100, 100, \"hello maixpy\", lcd.RED, lcd.BLACK)\n\n```\n\n### 例程 2： 显示图片\n\n```python\nimport lcd\nimport image\n\nimg = image.Image(\"/sd/pic.bmp\")\nlcd.display(img)\n```\n\n### 例程 3： 利用显示图片的方式显示英文\n\n```python\nimport lcd\nimport image\n\nimg = image.Image()\nimg.draw_string(60, 100, \"hello maixpy\", scale=2) \nlcd.display(img)\n```\n\n### 例程 4： 实时显示摄像头捕捉到的图像\n\n```python\nimport sensor, lcd\n\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\nsensor.skip_frames()\nlcd.init()\n\nwhile(True):\n    lcd.display(sensor.snapshot())\n```"}, "/soft/maixpy/zh/api_reference/machine_vision/index.html": {"title": "机器视觉/听觉", "content": "---\ntitle: 机器视觉/听觉\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 机器视觉/听觉\n---\n\n\n主要包含了了与图像、显示、语音相关的类，包括：\n\n* [lcd](./lcd.html)\n* [sensor](./sensor.html)\n* [image](./image/image.html)\n* [video](./../media/video.html)\n* [isolated_word](./isolated_word.html)\n* [maix_asr](./maix_asr.html)"}, "/soft/maixpy/zh/api_reference/machine_vision/maix_asr.html": {"title": "maix_asr（语音识别模块）", "content": "---\ntitle: maix_asr（语音识别模块）\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: maix_asr（语音识别模块）\n---\n\n\n## class（类）\n\n### maix_asr\n\nmaix_asr 构造参数如下：\n\n- `address` 烧写声学模型的 Flash 地址。\n- `i2s` 录音设备，默认使用 I2S.DEVICE_0 。\n- `dmac` 录音所使用的 DMA 通道，默认使用 `通道 3`。\n- `shift` 声道选择，Maix 系列的硬件录音设备通常为单声道输入，设置 0 为左声道，所以 1 为右声道。\n\n```python\nfrom speech_recognizer import asr\nclass maix_asr(asr):\n  def config(self, sets):\n    pass\nt = maix_asr(0x500000, I2S.DEVICE_0, 3, shift=0)\n```\n\n该 maix_asr 模块由继承内部 asr 模块而来的拓展配置接口辅助类，实现如下：\n\n```python\n\nfrom speech_recognizer import asr\n\nclass maix_asr(asr):\n\n  asr_vocab = [\"lv\", \"shi\", \"yang\", \"chun\", \"yan\", \"jing\", \"da\", \"kuai\", \"wen\", \"zhang\", \"de\", \"di\", \"se\", \"si\", \"yue\", \"lin\", \"luan\", \"geng\", \"xian\", \"huo\", \"xiu\", \"mei\", \"yi\", \"ang\", \"ran\", \"ta\", \"jin\", \"ping\", \"yao\", \"bu\", \"li\", \"liang\", \"zai\", \"yong\", \"dao\", \"shang\", \"xia\", \"fan\", \"teng\", \"dong\", \"she\", \"xing\", \"zhuang\", \"ru\", \"hai\", \"tun\", \"zhi\", \"tou\", \"you\", \"ling\", \"pao\", \"hao\", \"le\", \"zha\", \"zen\", \"me\", \"zheng\", \"cai\", \"ya\", \"shu\", \"tuo\", \"qu\", \"fu\", \"guang\", \"bang\", \"zi\", \"chong\", \"shui\", \"cuan\", \"ke\", \"shei\", \"wan\", \"hou\", \"zhao\", \"jian\", \"zuo\", \"cu\", \"hei\", \"yu\", \"ce\", \"ming\", \"dui\", \"cheng\", \"men\", \"wo\", \"bei\", \"dai\", \"zhe\", \"hu\", \"jiao\", \"pang\", \"ji\", \"lao\", \"nong\", \"kang\", \"yuan\", \"chao\", \"hui\", \"xiang\", \"bing\", \"qi\", \"chang\", \"nian\", \"jia\", \"tu\", \"bi\", \"pin\", \"xi\", \"zou\", \"chu\", \"cun\", \"wang\", \"na\", \"ge\", \"an\", \"ning\", \"tian\", \"xiao\", \"zhong\", \"shen\", \"nan\", \"er\", \"ri\", \"zhu\", \"xin\", \"wai\", \"luo\", \"gang\", \"qing\", \"xun\", \"te\", \"cong\", \"gan\", \"lai\", \"he\", \"dan\", \"wei\", \"die\", \"kai\", \"ci\", \"gu\", \"neng\", \"ba\", \"bao\", \"xue\", \"shuai\", \"dou\", \"cao\", \"mao\", \"bo\", \"zhou\", \"lie\", \"qie\", \"ju\", \"chuan\", \"guo\", \"lan\", \"ni\", \"tang\", \"ban\", \"su\", \"quan\", \"huan\", \"ying\", \"a\", \"min\", \"meng\", \"wu\", \"tai\", \"hua\", \"xie\", \"pai\", \"huang\", \"gua\", \"jiang\", \"pian\", \"ma\", \"jie\", \"wa\", \"san\", \"ka\", \"zong\", \"nv\", \"gao\", \"ye\", \"biao\", \"bie\", \"zui\", \"ren\", \"jun\", \"duo\", \"ze\", \"tan\", \"mu\", \"gui\", \"qiu\", \"bai\", \"sang\", \"jiu\", \"yin\", \"huai\", \"rang\", \"zan\", \"shuo\", \"sha\", \"ben\", \"yun\", \"la\", \"cuo\", \"hang\", \"ha\", \"tuan\", \"gong\", \"shan\", \"ai\", \"kou\", \"zhen\", \"qiong\", \"ding\", \"dang\", \"que\", \"weng\", \"qian\", \"feng\", \"jue\", \"zhuan\", \"ceng\", \"zu\", \"bian\", \"nei\", \"sheng\", \"chan\", \"zao\", \"fang\", \"qin\", \"e\", \"lian\", \"fa\", \"lu\", \"sun\", \"xu\", \"deng\", \"guan\", \"shou\", \"mo\", \"zhan\", \"po\", \"pi\", \"gun\", \"shuang\", \"qiang\", \"kao\", \"hong\", \"kan\", \"dian\", \"kong\", \"pei\", \"tong\", \"ting\", \"zang\", \"kuang\", \"reng\", \"ti\", \"pan\", \"heng\", \"chi\", \"lun\", \"kun\", \"han\", \"lei\", \"zuan\", \"man\", \"sen\", \"duan\", \"leng\", \"sui\", \"gai\", \"ga\", \"fou\", \"kuo\", \"ou\", \"suo\", \"sou\", \"nu\", \"du\", \"mian\", \"chou\", \"hen\", \"kua\", \"shao\", \"rou\", \"xuan\", \"can\", \"sai\", \"dun\", \"niao\", \"chui\", \"chen\", \"hun\", \"peng\", \"fen\", \"cang\", \"gen\", \"shua\", \"chuo\", \"shun\", \"cha\", \"gou\", \"mai\", \"liu\", \"diao\", \"tao\", \"niu\", \"mi\", \"chai\", \"long\", \"guai\", \"xiong\", \"mou\", \"rong\", \"ku\", \"song\", \"che\", \"sao\", \"piao\", \"pu\", \"tui\", \"lang\", \"chuang\", \"keng\", \"liao\", \"miao\", \"zhui\", \"nai\", \"lou\", \"bin\", \"juan\", \"zhua\", \"run\", \"zeng\", \"ao\", \"re\", \"pa\", \"qun\", \"lia\", \"cou\", \"tie\", \"zhai\", \"kuan\", \"kui\", \"cui\", \"mie\", \"fei\", \"tiao\", \"nuo\", \"gei\", \"ca\", \"zhun\", \"nie\", \"mang\", \"zhuo\", \"pen\", \"zun\", \"niang\", \"suan\", \"nao\", \"ruan\", \"qiao\", \"fo\", \"rui\", \"rao\", \"ruo\", \"zei\", \"en\", \"za\", \"diu\", \"nve\", \"sa\", \"nin\", \"shai\", \"nen\", \"ken\", \"chuai\", \"shuan\", \"beng\", \"ne\", \"lve\", \"qia\", \"jiong\", \"pie\", \"seng\", \"nuan\", \"nang\", \"miu\", \"pou\", \"cen\", \"dia\", \"o\", \"zhuai\", \"yo\", \"dei\", \"n\", \"ei\", \"nou\", \"bia\", \"eng\", \"den\", \"_\"]\n\n  def get_asr_list(string='xiao-ai-fas-tong-xue'):\n    return [__class__.asr_vocab.index(t) for t in string.split('-') if t in __class__.asr_vocab]\n\n  def get_asr_string(listobj=[117, 214, 257, 144]):\n    return '-'.join([__class__.asr_vocab[t] for t in listobj if t < len(__class__.asr_vocab)])\n\n  def unit_test():\n    print(__class__.get_asr_list('xiao-ai'))\n    print(__class__.get_asr_string(__class__.get_asr_list('xiao-ai-fas-tong-xue')))\n\n  def config(self, sets):\n    self.set([(sets[key], __class__.get_asr_list(key)) for key in sets])\n\n  def recognize(self):\n    res = self.result()\n    # print(tmp)\n    if res != None:\n      sets = {}\n      for tmp in res:\n        sets[__class__.get_asr_string(tmp[1])] = tmp[0]\n        #print(tmp[0], get_asr_string(tmp[1]))\n      return sets\n    return None\n\n```\n\n### function（方法）\n\n#### config\n\n可以配置语音识别的所需要的词汇列表，最大不超过 6 个音符，超了会忽略，参数为 `'xiao-ai-ya' : 0.3` 对应的 中文拼音字符串 和 匹配的最低概率（门限），且注意它不区分音调，所以 `你-好-鸭` 和 `尼-浩-雅` 没有区别，所以设计的时候要注意词汇的语调是否会形成新词。\n\n用例如下：\n\n```python\n  t.config({\n    'xiao-ai-ya' : 0.3,\n    'hao-de-ya' : 0.2,\n    'ni-hao-ya' : 0.3,\n  })\n```\n\n#### recognize\n\n将会识别 config 函数中所配置的词汇。\n\n用例如下：\n\n```python\ntmp = t.recognize()\n# print(tmp)\nif tmp != None:\n    print(tmp)\n```\n\n返回结果：\n\n```python\n{\n    'xiao-ai-ya' : 0.9,\n    'xiao-ai' : 0.2,\n}\n```\n\n跟 config 时的参数一样，只是作为返回值给出，可以见到此处出现 `小-爱-鸭` 和 `小-爱` 两个匹配结果。\n\n#### state\n\n期望保持在 100ms 内能够执行 asr 模块，它会返回当前模块状态，可以忽略返回结果，用法如下：\n\n```python\nfrom machine import Timer\n\ndef on_timer(timer):\n  #print(\"time up:\",timer)\n  #print(\"param:\",timer.callback_arg())\n  timer.callback_arg().state()\n\n# default: maix dock / maix duino set shift=0\nt = maix_asr(0x500000, I2S.DEVICE_0, 3, shift=0) # maix bit set shift=1\ntim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PERIODIC, period=64, callback=on_timer, arg=t)\ntim.start()\n```\n\n可见 on_timer 会在 64 ms 的周期内执行 timer.callback_arg().state() 函数，其中 timer.callback_arg() 为 maix_asr 类的实例。\n\n#### run\n\n控制模块运行（录音）。\n\n#### stop\n\n控制模块停止（录音）。\n\n#### __del__\n\n主动调用可释放模块，可被 gc.collect() 主动回收。"}, "/soft/maixpy/zh/api_reference/media/nes.html": {"title": "NES 游戏模拟器", "content": "---\ntitle: NES 游戏模拟器\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: NES 游戏模拟器\n---\n\n\n经典的 FC 红白机 游戏模拟器， 带我们回到小时候吧～～\n\n**警告，该模块只在标准固件（> 2m）中被编译包含，其他固件不带有，如有需求，请重新编译固件。**\n\n## 函数\n\n### init(rc_type=nes.KEYBOARD, cs, mosi, miso, clk, repeat=16, vol=5)\n\n初始化 `NES` 模拟器\n\n#### 参数\n\n* `tc_type`： 遥控器类型， 键盘（`nes.KEYBOARD`）（注意是串口与电脑通信，而不是直接接USB键盘到开发板）或者手柄（`nes.JOYSTICK`）。 \n> 建议使用`PS2`手柄，体验会更好， 键盘通过串口工具输入可能不能同时按多个按键，当然也可以通过自己在PC写一个脚本来转发键值就能解决（去[这里](https://github.com/sipeed/MaixPy_scripts/tree/master/multimedia/nes)找找？）\n\n* `cs`： 如果使用 `SPI` 接口的 `PS2` 手柄， 传入 `cs` 外设编号（注意不是引脚号，需要先映射引脚）\n* `mosi`： 如果使用 `SPI` 接口的 `PS2` 手柄， 传入 `mosi` 外设编号（注意不是引脚号，需要先映射引脚）\n* `miso`： 如果使用 `SPI` 接口的 `PS2` 手柄， 传入 `miso` 外设编号（注意不是引脚号，需要先映射引脚）\n* `clk`： 如果使用 `SPI` 接口的 `PS2` 手柄， 传入 `clk` 外设编号（注意不是引脚号，需要先映射引脚）\n* `repeat`： 这个参数只对使用键盘（/串口）时， 指按键的重复率\n* `vol`： 初始化时的音量， 后面可以通过按键调整\n\n### 基础示例\n\n运行 `NES` 游戏 `ROM`\n\n#### 参数\n\n* `nes`： 游戏 `ROM` 路径， 比如 `/sd/mario.nes`\n\n```python\ntry:\n  nes.init(nes.INPUT)\n  nes.load(\"/sd/mario.nes\")\n  while True:\n    nes.loop()\nfinally:\n  nes.free()\n```\n\n## 快捷键\n\n\n### 代码输入\n\n* `nes.input` ： `(①号机手柄, ②号机手柄, 菜单功能)`\n\n### 键盘（/串口）\n\n* `移动` ： `W A S D`\n* `A` ： `J`\n* `B` ： `K`\n* `start` ： `M` 或者 `Enter`\n* `option`： `N` 或者 `\\`\n* `退出` ： `ESC`\n* `音量 -` ： `-`\n* `音量 +` ： `=`\n* `运行速度 -` ： `R`\n* `运行速度 +` ： `F`\n\n### 手柄\n\n* `移动` ： 方向键 `<-` `^` `V` `->`\n* `A` ： `□`\n* `B` ： `×`\n* `start` ： `START`\n* `select`： `SELECT`\n* `退出` ： 暂无\n* `音量 -` ： `R2`\n* `音量 +` ： `R1`\n* `运行速度 -` ： `L1`\n* `运行速度 +` ： `L2`\n\n## 例程\n\n> \"mario.nes\" 游戏文件请自行搜索下载\n\n### Gamepad测试\n\n以下为双手柄输入测试代码，具体的接线和测试方式请看[Gamgpad测试](/hardware/zh/modules/amigo_handle.html#手柄测试)\n\n```python\nfrom machine import I2C\nimport nes, lcd\nfrom sound import CubeAudio\nimport sys, time\nfrom fpioa_manager import fm\nfrom Maix import FPIOA, GPIO\n\n\n# B A SEL START UP DOWN LEFT RIGHT  X   Y\n# 1 2 4   8     16  32   64   128  254 253\ni2c = I2C(I2C.I2C2, freq=400*1000, sda=27, scl=24)\nlcd.init(freq=15000000)\nlcd.register(0x36, 0x20\nstate = 0\nimport time\ni = 0\nwhile True:\n    dev = i2c1.scan()\n    print(dev)\n    dev = i2c2.scan()\n    print(dev)\n    time.sleep(0.5)\n    try:\n        #i2c.writeto(0x4A, b'0')\n        tmp = (i2c1.readfrom(0x4A, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n    try:\n        #i2c.writeto(0x42, b'0')\n        tmp = (i2c2.readfrom(0x42, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n\n```\n\n\n### 键盘（串口）\n\n```python\nimport nes, lcd\n\nlcd.init(freq=15000000)\nnes.init(nes.KEYBOARD)\nnes.load(\"/sd/mario.nes\")\n\nwhile True:\n    nes.loop()\n    \n```\n\n### PS2 手柄\n\n```python\nimport nes, lcd\nfrom fpioa_manager import fm\n\nfm.register(19, fm.fpioa.GPIOHS19)\nfm.register(18, fm.fpioa.GPIOHS18)\nfm.register(23, fm.fpioa.GPIOHS23)\nfm.register(21, fm.fpioa.GPIOHS21)\n\nlcd.init(freq=15000000)\nnes.init(nes.JOYSTICK, cs=fm.fpioa.GPIOHS19, clk=fm.fpioa.GPIOHS18, mosi=fm.fpioa.GPIOHS23, miso=fm.fpioa.GPIOHS21)\nnes.load(\"/sd/mario.nes\")\n\nwhile True:\n    nes.loop()\n\n```\n\n### 双手柄玩游戏(Amigo)\n```python\nfrom machine import I2C\nimport nes, lcd\nfrom sound import CubeAudio\nimport sys, time\nfrom fpioa_manager import fm\nfrom Maix import FPIOA, GPIO\nimport time\ni2c = I2C(I2C.I2C3, freq=400*1000, sda=27, scl=24) \nCubeAudio.init(i2c)\ntmp = CubeAudio.check()\nprint(tmp)\n\nCubeAudio.ready(volume=100)\n\n\nfm.fpioa.set_function(13,fm.fpioa.I2S0_MCLK)\nfm.fpioa.set_function(21,fm.fpioa.I2S0_SCLK)\nfm.fpioa.set_function(18,fm.fpioa.I2S0_WS)\nfm.fpioa.set_function(35,fm.fpioa.I2S0_IN_D0)\nfm.fpioa.set_function(34,fm.fpioa.I2S0_OUT_D2)\n\n\n\ni2c1 = I2C(I2C.I2C1, freq=400*1000, sda=9, scl=7) #P1手柄I2C设置\ni2c = I2C(I2C.I2C2, freq=400*1000, sda=27, scl=24) #P2手柄I2C设置\n\nlcd.init(freq=15000000)\nlcd.register(0x36, 0x20) # amigo\n\n\nstate = 0\n\ntry:\n  nes.init(nes.INPUT)\n\n\n  nes.load(\"mario.nes\") #游戏文件名\n  nes.load(\"/sd/mario.nes\") #读取sd卡游戏文件\n\n\n\n  for i in range(20000):\n    nes.loop()\n  for i in range(500):\n    nes.loop()\n    nes.input(8, 0, 0)\n    nes.loop()\n    nes.input(0, 0, 0)\n    nes.loop()\n  while True:\n\n    #这是P1手柄输入\n    try:\n        left = (i2c1.readfrom(0x4A, 1))\n    except Exception as e:\n        print(e)\n    nes.loop()\n\n    #这是P2手柄输入\n    try:\n        right = (i2c.readfrom(0x42, 1))\n    except Exception as e:\n        print(e)\n    #nes.input(right[0], 0, 0) #单个手柄输入 \n    nes.input(right[0], left[0], 0) #双手柄输入\n    for i in range(100):\n      nes.loop()\n    nes.loop()\nfinally:\n  nes.free()\n```"}, "/soft/maixpy/zh/api_reference/media/video.html": {"title": "video（视频）", "content": "---\ntitle: video（视频）\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: video（视频）\n---\n\n\n\n支持播放和录制 `avi` 视频，需要烧录 [标准固件](https://dl.sipeed.com/shareURL/MAIX/MaixPy/release/master/maixpy_v0.6.2_41_g02d12688e) ，才能使用\n\n## 全局函数\n\n### open(path, record=False, interval=100000, quality=50, width=320, height=240, audio=False, sample_rate=44100, channels=1)\n\n打开一个文件来播放或者录制\n\n#### 参数\n\n* `path`： 文件路径， 比如 `/sd/badapple.avi`\n* `record`： 是否进行录制， 如果选择 `Ture`， 则会进行录制视频，否则是播放视频。 默认 `False`\n* `interval`： 录制的帧间隔， 单位是微秒， fps = 1000000/interval， 默认 `100000`， 即每秒`10`帧\n* `quality`： `jpeg` 压缩质量（`%`）， 默认`50`\n* `width`： 录制屏幕宽度， 默认 `320`\n* `height`： 录制屏幕高度， 默认 `240`\n* `audio`： 是否录制音频， 默认 `False`\n* `sample_rate`： 录制音频采样率， 默认 `44100` (`44.1k`)\n* `channels`： 录制音频声道数， 默认 `1`， 即单声道\n\n#### 返回值\n\n返回一个对象， 根据不同格式返回的对象不同。\n\n目前只支持 `avi` 格式， 返回 由 `avi` 类创建的对象\n\n## 类 `avi`\n\n由 `video.open()` 函数返回\n\n### play()\n\n播放视频， 每调用一次解析一次数据（音频或者视频）\n\n#### 返回值\n\n* `0`： 播放结束\n* `1`： 正在播放\n* `2`： 暂停（保留）\n* `3`： 当前解码的帧是视频帧\n* `4`： 当前解码的帧是音频帧\n\n### capture(img)\n\n捕获视频画面帧（顺序捕获）\n\n#### 参数\n\n* `img`: image 对象, 用来存放捕获到的画面\n\n#### 返回值\n\n* `0`： 已经达到视频末尾\n* `3`： 成功捕获到视频画面帧\n\n### volume(volume)\n\n设置音量\n\n#### 参数\n\n* `volume`： 音量值， 取值范围：[0,100]\n\n#### 返回值\n\n设置的音量值， 取值范围 [0,100]\n\n\n### record()\n\n录制视频和音频， 每调用一次录制一帧，函数内部会限制速度，如果没有到录制设置的间隔，在到达设定的间隔之前会阻塞\n\n#### 返回值\n\n录制的视频的当前帧的长度\n\n\n\n\n## 例程 \n\n### 例程 1： 播放 `avi` 视频\n\n首先保证视频是 `320x240` 大小， 视频压缩格式为 `mjpeg`， 音频压缩格式位 `PCM`， 还需要接入扬声器和LCD。\n\n可以在这里下载测试可以用的视频： [badapple.avi](http://api.dl.sipeed.com/shareURL/MAIX/MaixPy/assets)\n\n```python\nfrom Maix import GPIO, I2S\n\nfrom fpioa_manager import fm\nimport lcd\nimport video\nimport time\n\nlcd.init()\n\n# AUDIO_PA_EN_PIN = None  # Bit Dock and old MaixGo\nAUDIO_PA_EN_PIN = 32      # Maix Go(version 2.20)\n# AUDIO_PA_EN_PIN = 2     # Maixduino\n\n# init i2s(i2s0)\ni2s = I2S(I2S.DEVICE_0)\n\n# config i2s according to audio info\ni2s.channel_config(i2s.CHANNEL_1, I2S.TRANSMITTER, resolution=I2S.RESOLUTION_16_BIT,\n                       cycles=I2S.SCLK_CYCLES_32, align_mode=I2S.RIGHT_JUSTIFYING_MODE)\n\n# open audio PA\nif AUDIO_PA_EN_PIN:\n    fm.register(AUDIO_PA_EN_PIN, fm.fpioa.GPIO1, force=True)\n    wifi_en = GPIO(GPIO.GPIO1, GPIO.OUT)\n    wifi_en.value(1)\n\nfm.register(34,  fm.fpioa.I2S0_OUT_D1, force=True)\nfm.register(35,  fm.fpioa.I2S0_SCLK, force=True)\nfm.register(33,  fm.fpioa.I2S0_WS, force=True)\n\nv = video.open(\"/sd/badapple_320_240_15fps.avi\")\nprint(v)\nv.volume(50)\nwhile True:\n    if v.play() == 0:\n        print(\"play end\")\n        break\nv.__del__()\n\n```\n\n默认使用了 `I2S0` 来播放音频， 所以需要设置 `I2S0` 对应的引脚， 关闭WiFi是因为`Dock`板WiFi对音质的干扰\n\n\n### 例程2： 录制 `avi` 视频\n\n\n```python\n\nimport sensor, image, lcd, time\n\nlcd.init(freq=15000000)\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\n\nsensor.set_hmirror(1)\nsensor.set_vflip(1)\n\nsensor.run(1)\nsensor.skip_frames(30)\n\nimport video\n\nv = video.open(\"/sd/capture.avi\", audio = False, record=1, interval=200000, quality=50)\n\ntim = time.ticks_ms()\nfor i in range(50):\n    tim = time.ticks_ms()\n    img = sensor.snapshot()\n    lcd.display(img)\n    img_len = v.record(img)\n    # print(\"record\",time.ticks_ms() - tim)\n\nprint(\"record_finish\")\nv.record_finish()\nv.__del__()\n\n# play your record\nv = video.open(\"/sd/capture.avi\")\nprint(v)\nv.volume(50)\nwhile True:\n    if v.play() == 0:\n        print(\"play end\")\n        break\n\nprint(\"play finish\")\nv.__del__()\n\nlcd.clear()\n```\n\n可以取消打印屏蔽来看实际的录制间隔有没有达到设置的帧间隔（比如这里设置的`200000us`） 实际打印应该是 `200ms`， \n如果实际帧间隔大于设置的值，则说明实际性能没有达到设置的要求，需要调大设置的帧间隔即减小帧率。 \n另外去掉显示和打印也可以一定程度上增加帧率。\n\n### 例程3: 顺序 `avi` 捕获视频帧并显示\n\n```python\nimport lcd\nimport video\nimport image\n\nlcd.init()\nv = video.open(\"/sd/badapple_320_240_15fps.avi\")\nprint(v)\nimg = image.Image()\nwhile True:\n    status = v.capture(img)\n    if status != 0:\n        lcd.display(img)\n    else:\n        print(\"end\")\n        break;\nv.__del__()\n```"}, "/soft/maixpy/zh/api_reference/media/audio.html": {"title": "audio（音频）", "content": "---\ntitle: audio（音频）\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: audio（音频）\n---\n\n\n抽象的音频对象，该对象可以被当做参数传入也可以直接使用其方法来播放音频\n\n## 模块函数\n\n###  构造函数\n\n构造 `Audio` 对象\n\n```python\naudio.Audio(array=None, path=None, points=1024)\n```\n\n####  参数\n\n该接口能传入一个参数，每个参数会决定不同的音频类型\n\n* `array`: `bytearray`类型的数据，可以将该数据转换为音频对象， 默认 `None`\n\n* `path`: 打开的音频文件路径，目前仅支持 `wav` 格式， 默认 `None`, **注意**需要标明关键字`path`，`audio.Audio(\"/sd/1.wav\")`这样是错的！！ `audio.Audio(path = \"/sd/1.wav\")` 才是正确的\n\n* `points`: 开辟有 points 个采样点数的音频缓冲，一个采样点大小为 32bit。为0的情况下将不开辟缓冲, 默认 `1024`\n\n####  返回值\n\n返回一个 `Audio` 对象\n\n\n### to_bytes: bytes转换函数\n\n将音频对象中的音频数据转换为 `bytearray` 类型的对象\n\n```\naudio_data = test_audio.to_bytes()\n```\n\n####  参数\n\n无\n\n####  返回值\n\n返回的音频数据 `bytearray` 对象\n\n\n### play_process: 播放预处理函数\n\n用于预处理音频对象，在播放之前需要对音频文件进行解析，所以需要预处理。这里需要传入一个播放用的 I2S 设备\n\n```\nwav_info = test_audio.play_process(i2s_dev)\n```\n\n####  参数\n\n* `i2s_dev`: 用于播放的i2s设备\n\n\n####  返回值\n\n该 wav 文件的头部信息 ,`list`类型，分别是`numchannels`（声道数）, `samplerate`（采样率）, `byterate`（每秒数据字节数=samplerate * numchannels * bitspersample / 8）, `blockalign`（每个采样所需的字节数 = numchannels * bitspersample / 8）, `bitspersample`（每个采样存储的bit数，8：8bit，16：16bit，32：32bit）, `datasize`（音频数据长度）\n\n### play: 播放函数\n\n读取音频文件并且解析播放，一般配合循环来使用\n\n\n####  参数\n\n无\n\n\n####  返回值\n\n* `None`： 格式不支持播放\n* `0`： 播放结束\n* `1`： 正在播放\n\n### finish： 音频后处理函数\n\n完成音频播放，该函数必须在播放完毕后调用，回收底层分配的资源\n\n\n####  参数\n\n无\n\n####  返回值\n\n无\n\n## 例程\n\n播放 `wav` 音频\n\n```python \nfrom fpioa_manager import *\nfrom Maix import I2S, GPIO\nimport audio\n\n# disable wifi\nfm.register(8, fm.fpioa.GPIO0)\nwifi_en=GPIO(GPIO.GPIO0,GPIO.OUT)\nwifi_en.value(0)\n\n# register i2s(i2s0) pin\nfm.register(34,fm.fpioa.I2S0_OUT_D1)\nfm.register(35,fm.fpioa.I2S0_SCLK)\nfm.register(33,fm.fpioa.I2S0_WS)\n\n# init i2s(i2s0)\nwav_dev = I2S(I2S.DEVICE_0)\n\n# init audio\nplayer = audio.Audio(path = \"/sd/6.wav\")\nplayer.volume(40)\n\n# read audio info\nwav_info = player.play_process(wav_dev)\nprint(\"wav file head information: \", wav_info)\n\n# config i2s according to audio info\nwav_dev.channel_config(wav_dev.CHANNEL_1, I2S.TRANSMITTER,resolution = I2S.RESOLUTION_16_BIT ,cycles = I2S.SCLK_CYCLES_32, align_mode = I2S.RIGHT_JUSTIFYING_MODE)\nwav_dev.set_sample_rate(wav_info[1])\n\n# loop to play audio\nwhile True:\n    ret = player.play()\n    if ret == None:\n        print(\"format error\")\n        break\n    elif ret==0:\n        print(\"end\")\n        break\nplayer.finish()\n```"}, "/soft/maixpy/zh/api_reference/index.html": {"title": "", "content": "---\ntitle: \nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: \n---"}, "/soft/maixpy/zh/api_reference/extend/touchscreen.html": {"title": "touchscreen（触摸屏幕）", "content": "---\ntitle: touchscreen（触摸屏幕）\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: touchscreen（触摸屏幕）\n---\n\n\n`touchscreen` 模块包含了基本的读取触摸屏幕操作\n\n目前支持的触摸屏幕：\n\n* ns2009（默认）\n\n如果需要修改驱动型号，需要重新编译 `MaixPy` 源码修改预编译支持的型号\n\n\n\n## 全局函数\n\n### init(i2c=None, cal=None)\n\n初始化触摸屏\n\n> API 在后面可能会有所改动（主要是针对多种驱动对参数的改动）\n\n#### 参数\n\n* `i2c`： 目前支持的是 `I2C` 通信的触摸屏， 传入`I2C`实例对象， 后期这个参数可能会被重命名或者取消\n* `cal`： 校准数据， 是一个 `7` 个整型值的元组， 可以通过 `touchscreen.calibrate()` 函数得到\n\n### calibrate()\n\n校准屏幕，使屏幕显示和触摸屏像素能够对应\n\n#### 返回值\n\n返回一个 `7` 个整型值的元组， 可以保存到文件系统或者`flash`，在初始化的时候传入，这样就不用每次都校准了\n\n### read()\n\n读取当前屏幕的状态以及按下的点的坐标值\n\n#### 返回值\n\n一个由 `3` 个整型值组成的元组 `(status, x, y)`， 注意这个值会一直保持上一个状态\n\n* `status`： 状态， 取值有 `touchscreen.STATUS_PRESS`， `touchscreen.STATUS_MOVE`， `touchscreen.STATUS_RELEASE`\n* `x`：  `x` 轴坐标\n* `y`：  `y` 轴坐标\n\n\n## 常量\n\n### touchscreen.STATUS_PRESS\n\n屏幕被按下， `read()` 函数返回的元组的第一个值\n\n### touchscreen.STATUS_MOVE\n\n屏幕被按住并移动，即按住移动， `read()` 函数返回的元组的第一个值\n\n### touchscreen.STATUS_RELEASE\n\n屏幕不再被按住，即没有点击， `read()` 函数返回的元组的第一个值\n\n\n\n## 例程\n\n## 例程 1 ： 图画板\n\n黑底白画笔画图板， 使用`boot` 按键可以清除内容\n\n> 取消 `ts.calibrate()` 的注释可以在开始运行触摸屏校准程序\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](../builtin_py/board_info.html)。\n\n```python\nimport touchscreen as ts\nfrom machine import I2C\nimport lcd, image\nfrom board import board_info\nfrom fpioa_manager import *\n\nboard_info=board_info()\n\nfm.register(board_info.BOOT_KEY, fm.fpioa.GPIO1)\nbtn_clear = GPIO(GPIO.GPIO1, GPIO.IN)\n\nlcd.init()\ni2c = I2C(I2C.I2C0, freq=400000, scl=30, sda=31)\nts.init(i2c)\n#ts.calibrate()\nlcd.clear()\nimg = image.Image()\nstatus_last = ts.STATUS_IDLE\nx_last = 0\ny_last = 0\ndraw = False\nwhile True:\n    (status,x,y) = ts.read()\n    print(status, x, y)\n    if draw:\n        img.draw_line((x_last, y_last, x, y))\n    if status_last!=status:\n        if (status==ts.STATUS_PRESS or status == ts.STATUS_MOVE):\n            draw = True\n        else:\n            draw = False\n        status_last = status\n    lcd.display(img)\n    x_last = x\n    y_last = y\n    if btn_clear.value() == 0:\n        img.clear()\nts.__del__()\n```"}, "/soft/maixpy/zh/api_reference/extend/htpa.html": {"title": "modules.htpa（HTPA 热红外测温模组）", "content": "---\ntitle: modules.htpa（HTPA 热红外测温模组）\nkeywords: maixpy, k210, AIOT, spmod\ndesc: maixpy doc: modules.htpa（HTPA 热红外测温模组）\n---\n\n\n海曼 HTPA 32x32 热红外测温模组\n\n<img src=\"../../../assets/hardware/other/htpa32x32.png\">\n\n## 构造方法 htpa(i2c, scl_pin, sda_pin, i2c_freq)\n\n创建一个实例\n\n### 参数\n\n* `i2c`: I2C编号， 比如`I2C.I2C0`，取值 [0, 2] (见`machine.I2C`)\n* `scl_pin`: I2C SCL 引脚\n* `sda_pin`: I2C SDA 引脚\n* `i2c_freq`: I2C 时钟频率\n\n\n### 返回值\n\nhtpa 对象\n\n\n## 实例方法 temperature()\n\n获取传感器温度值，只能被实例调用\n\n### 返回值\n\n数组，长度为传感器的宽度x高度，比如`32x32`\n\n## 实例方法 width()\n\n获取传感器分辨率宽度，只能被实例调用\n\n### 返回值\n\n整数，宽度\n\n## 实例方法 height()\n\n获取传感器分辨率宽度，只能被实例调用\n\n\n## 例子\n\n[heimann_HTPA_32x32](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/others/heimann_HTPA_32x32)"}, "/soft/maixpy/zh/api_reference/extend/onewire.html": {"title": "modules.onewire（单总线）", "content": "---\ntitle: modules.onewire（单总线）\nkeywords: maixpy, k210, AIOT, spmod\ndesc: maixpy doc: modules.onewire（单总线）\n---\n\n\n单总线即只有单根信号线，该线即传输数据也传输时钟，并且数据传输也为双向，节约 IO 口。\n\n## 构造方法 onewire(gpio_num)\n\n### 参数\n\n* `gpio_num`：GPIO号。\n\n### 返回值\n\n* onewire 对象\n\n## 实例方法 reset()\n\n重置\n\n### 返回值\n\n* bool 类型，是否成功。\n\n## 实例方法 readbit()\n\n读取一位数据\n\n### 返回值\n\n* int 类型，读取到的数据。\n\n## 实例方法 readbyte()\n\n读取一个字节\n\n### 返回值\n\n* int 类型，读取到的数据。\n\n## 实例方法 readbuffer(n)\n\n读取指定长度的字节数\n\n### 参数\n\n* `n`：int 类型，需要读取的字节数\n\n### 返回值\n\n* bytearray 类型，读取到的字节数组\n\n## 实例方法 writebit(bit)\n\n写入一个位\n\n### 参数\n\n* `bit`：int 类型，需要写入的位数据\n\n## 实例方法 writebyte(byte)\n\n### 参数\n\n* `byte`：int 类型，需要写入的字节数据\n\n## 实例方法 writebuffer(buf)\n\n### 参数\n\n* `buf`：bytearray 类型，需要写入的数据\n\n## 实例方法 select(rom_in)\n\n让主机指定某一个从机。\n\n### 参数\n\n* `rom_in`：bytearray 类型，表示将指定从机的8byte的ROM数据。\n\n## 实例方法 search(diff_in)\n\n使用 F0H 标准搜索\n\n### 参数\n\n* `diff_in`：int 类型，第一次搜索优先选择的路径\n\n### 返回值\n\n* `list`：元素为(depth,roms)的列表，`depth` 为搜索深度,int 类型，`rom` 为器件 ROM 码，list 类型。\n\n## 实例方法 skip()\n\n跳过 ROM，适用于单节点\n\n## 实例方法 depower()\n\n重新使能IO\n\n## 实例方法 crc8(data_in)\n\n计算8位循环冗余校验码\n\n### 参数\n\n* `data_in`：需要校验的数据\n\n### 返回值\n\n* 返回校验码"}, "/soft/maixpy/zh/api_reference/extend/index.html": {"title": "外设模块", "content": "---\ntitle: 外设模块\nkeywords: maixpy, k210, AIOT, spmod\ndesc: maixpy doc: 外设模块\n---\n\n\n这里的外设模块主要指片外外设（相对于片上外设，比如GPIO、I2C等），比如 `LCD`、 摄像头、 触摸屏等等\n\n关于图像相关的暂时放在了 [机器视觉](../machine_vision/index.html) 分类， 包括以下外设模块\n\n* [lcd](../machine_vision/lcd.html)： 显示图像\n* [sensor](../machine_vision/sensor.html)： 获取摄像头数据， 取名叫 `sensor` 是兼容 `openmv`， 当然也不完全一样，请阅读文档\n\n其它外设模块包括：\n\n* [touchscreen](./touchscreen.html)： 触摸屏相关操作，读取触摸屏点击状态以及获取点击的坐标等\n* [ws2812](./ws2812.html): WS2812单总线灯带\n* [热红外温度传感器](./htpa.html)\n* [超声波](./ultrasonic.html)"}, "/soft/maixpy/zh/api_reference/extend/ultrasonic.html": {"title": "modules.ultrasonic（超声波测距模块）", "content": "---\ntitle: modules.ultrasonic（超声波测距模块）\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: modules.ultrasonic（超声波测距模块）\n---\n\n\nGrove - Ultrasonic Ranger(超声波测距模块)，只需要单根数据线\n\n<div class=\"grove_pic\">\n<img src=\"./../../../assets/hardware/module_grove/ultrasonic.jpg\">\n</div>\n\n\n## 构造方法 ultrasonic(gpiohs)\n\n### 参数\n\n* `gpiohs`: gpiohs 编号，需要先使用`fm`注册引脚,比如\n\n```python\nfrom fpioa_manager import *\nfrom modules import ultrasonic\n\nfm.register(board_info.D[6], fm.fpioa.GPIOHS0, force = True)\ndevice = ultrasonic(fm.fpioa.GPIOHS0)\n```\n\n### 返回值\n\n返回对象\n\n## 方法 measure(unit, timeout)\n\n### 参数\n\n* `unit`： 单位， 在下面的常数中取值\n* `timeout`: 超时时间，单位为微秒（us）\n\n## 常数\n\n### ultrasonic.UNIT_CM\n\n返回的距离的单位，厘米\n\n### ultrasonic.UNIT_INCH\n\n返回的距离的单位，英尺"}, "/soft/maixpy/zh/api_reference/extend/ws2812.html": {"title": "modules.ws2812（WS2812 灯带）", "content": "---\ntitle: modules.ws2812（WS2812 灯带）\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: modules.ws2812（WS2812 灯带）\n---\n\n\n本模块使用`K210`的`I2S`进行模块的驱动，所以在使用的过程中需要注意是否冲突\n  \n目前最多支持12路灯带\n\n## 构造函数\n\n```python\nfrom modules import ws2812\nclass ws2812(led_pin=-1,led_num=-1,i2s_num=I2S_DEVICE_2,i2s_chn=I2S_CHANNEL_3,i2s_dma_chn=DMAC_CHANNEL1)\n```\n通过指定参数新建一个 `ws2812` 对象\n\n### 参数\n\n* `led_pin`: 灯带数据线连接的引脚，比如 `board_info.D[4]`\n\n* `led_num`: 灯带一共有多少颗灯珠\n\n* `i2s_num`: 该对象使用哪个 `I2S` 设备进行驱动，默认为 `I2S_DEVICE_2`,取值范围为 `0-2`\n\n* `i2s_chn`: 该对象使用哪个 `I2S` 通道，默认为 `I2S_CHANNEL_3`，取值范围为 `0-3`\n\n* `i2s_dma_chn`: 该对象使用的DMA通道，用户一般不考虑\n\n## 方法\n\n\n### set_led\n\n设置某个 led 灯颜色\n\n```python\nclass_ws2812.set_led(num， color)\n```\n\n#### 参数\n\n* `num` : 第 `N` 颗灯珠，从 `0` 开始\n\n* `color` : 该灯珠赋值的颜色，为 `tuple` 类型， （R,G,B）\n\n#### 返回值\n\n无\n\n### display\n\n开始工作，设置完成后调用\n\n```python\nclass_ws2812.display()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n## 例程0\n\n30 个 LED 灯全部亮红色\n\n```python\nfrom modules import ws2812\nclass_ws2812 = ws2812(board_info.D[4],30)\nfor i in range(30):\n    class_ws2812.set_led(i,(0xff,0,0))\nclass_ws2812.display()\n```\n\n## 例程1\n\n灯带红色渐变\n\n```python\nfrom modules import ws2812\nclass_ws2812 = ws2812(board_info.D[4],30)\nr=0\ndir = True\nwhile True:\n    if dir:\n        r += 1\n    else:\n        r -= 1\n    if r>=255:\n        r = 255\n        dir = False\n    elif r<0:\n        r = 0\n        dir = True\n    for i in range(30):\n        a = class_ws2812.set_led(i,(r,0,0))\n    a=class_ws2812.display()\n```\n\n> 以上例程，可见[`MaixPy_scripts`](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/grove/ws2812)"}, "/soft/maixpy/zh/api_reference/standard/utime.html": {"title": "utime – 时间相关的功能", "content": "---\ntitle: utime – 时间相关的功能\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: utime – 时间相关的功能\n---\n\n\n\n该模块实现了相应CPython模块的子集，如下所述。有关更多信息，请参阅原始CPython文档： [time](https://docs.python.org/3.5/library/time.html#module-time).\n\n`utime`模块提供获取当前时间和日期，测量时间间隔和延迟的功能。\n\n**时间纪元**: Unix移植版本使用标准为1970-01-01 00:00:00 UTC的POSIX系统时代。但是，嵌入式移植版本使用的是2000-01-01 00:00:00 UTC的纪元。\n\n**维护实际日历日期/时间**: 这需要实时时钟（RTC）。在具有底层OS（包括一些RTOS）的系统上，RTC可能是隐含的。设置和维护实际日历时间是OS / RTOS的责任，并且在MicroPython之外完成，它只使用OS API来查询日期/时间。在裸机移植上，系统时间依赖于`machine.RTC（）`对象。可以使用`machine.RTC（）。datetime（tuple）`函数设置当前日历时间，并通过以下方式维护：\n\n* 通过备用电池（可能是特定电路板的附加可选组件）。\n* 使用联网时间协议（需要由移植/用户设置）。\n* 每次上电时由用户手动设置（许多电路板在硬复位时保持RTC时间，但有些可能需要在这种情况下再次设置）。\n如果未使用系统/ MicroPython RTC维护实际日历时间，则低于此要求参考当前绝对时间的函数可能与预期不符。\n\n## 函数\n\n### utime.localtime([secs])\n\n将自纪元（见上文）以秒为单位的时间转换为8元组，其中包含:(年，月，日，小时，分钟，秒，工作日，晚期）如果未提供秒数或无，则为当前时间来自RTC使用。\n\n* 年份包括世纪（例如2014年）。\n* 月是1-12\n*  mday是1-31\n* 小时是0-23\n* 分钟是0-59\n* 秒是0-59\n周一至周日的工作日为0-6\n* yearday是1-366\n\n\n### utime.mktime()\n\n这是本地时间的反函数。它的参数是一个完整的8元组，表示按当地时间表示的时间。它返回一个整数，它是自2000年1月1日以来的秒数。\n\n### utime.sleep(seconds)\n\n睡眠给定的秒数。有些电路板可能会接受秒作为浮点数来休眠几秒钟。请注意，其他板可能不接受浮点参数，因为与它们的兼容性使用 `sleep_ms()` 和 `sleep_us()` 函数。\n\n### utime.sleep_ms(ms)\n\n给定毫秒数的延迟应为正或0。\n\n### utime.sleep_us(us)\n\n给定微秒数的延迟应为正或0。\n\n### utime.ticks_ms()\n\n返回一个带有任意参考点的递增毫秒计数器，它在某个值之后回绕。\n\n环绕值未明确公开，但我们将其称为TICKS_MAX以简化讨论。值的周期为TICKS_PERIOD = TICKS_MAX + 1. TICKS_PERIOD保证为2的幂，但在不同硬件的移植之间可能不同。相同的句点值用于所有`ticks_ms（）`，`ticks_us（）`，`ticks_cpu（）`函数（为简单起见）。因此，这些函数将返回范围[0 .. TICKS_MAX]中的值，包括总TICKS_PERIOD值。请注意，仅使用非负值。在大多数情况下，您应该将这些函数返回的值视为不透明。可用的唯一操作是`ticks_diff（）`和`ticks_add（）`函数，如下所述。\n\n> 注意：直接对这些值执行标准数学运算（+， - ）或关系运算符（<，<=，>，> =）将导致无效结果。执行数学运算然后将其结果作为参数传递给ticks_diff（）或ticks_add（）也将导致后者函数的无效结果。\n\n### utime.ticks_us()\n\n就像上面的'ticks_ms（）`一样，但是在几微秒内。\n\n### utime.ticks_cpu()\n\n类似于`ticks_ms（）`和`ticks_us（）`，但系统中的分辨率最高。这通常是CPU时钟，这就是函数以这种方式命名的原因。但它不必是CPU时钟，而是可以使用系统中可用的一些其他定时源（例如，高分辨率定时器）。在'utime`模块级别没有指定此函数的确切时间单位（分辨率），但特定硬件的文档可能提供更具体的信息。此功能用于非常精细的基准测试或非常紧凑的实时循环。避免在便携式代码中使用它。\n\n\n### utime.ticks_add(ticks, delta)\n\n偏移值按给定数字计算，可以是正数也可以是负数。给定一个ticks值，该函数允许在tick值的模块算术定义之后或之后计算ticks值delta ticks（参见上面的`ticks_ms（）`）。 ticks参数必须是调用`ticks_ms（）`，`ticks_us（）`或`ticks_cpu（）`函数（或从之前调用`ticks_add（）`）的直接结果。但是，delta可以是任意整数或数字表达式。 ticks_add（）对于计算事件/任务的截止日期非常有用。 （注意：你必须使用`ticks_diff（）`函数来处理截止日期。）\n\n例子:\n\n```python\n# Find out what ticks value there was 100ms ago\nprint(ticks_add(time.ticks_ms(), -100))\n\n# Calculate deadline for operation and test for it\ndeadline = ticks_add(time.ticks_ms(), 200)\nwhile ticks_diff(deadline, time.ticks_ms()) > 0:\n    do_a_little_of_something()\n\n# Find out TICKS_MAX used by this port\nprint(ticks_add(0, -1))\n```\n\n### utime.ticks_diff(ticks1, ticks2)\n\n\n测量从`ticks_ms（）`，`ticks_us（）`或`ticks_cpu（）`函数返回的值之间的差异，作为可以回绕的有符号值。\n\n参数顺序与减法运算符相同，`ticks_diff（ticks1，ticks2）`与`ticks1  -  ticks2`具有相同的含义。但是，`ticks_ms（）`等函数返回的值可能会回绕，因此直接使用减法会产生不正确的结果。这就是为什么需要`ticks_diff（）`，它实现模块化（或更具体地说，环）算术，即使对于环绕值也能产生正确的结果（只要它们之间不太远，见下文）。该函数返回范围为[-TICKS_PERIOD / 2 .. TICKS_PERIOD / 2-1]的**有符号**值（这是二进制补码有符号二进制整数的典型范围定义）。如果结果是否定的，则意味着ticks1在时间上早于ticks2。否则，这意味着ticks1发生在ticks2之后。如果ticks1和ticks2彼此分开不超过TICKS_PERIOD / 2-1滴答，则仅保留**。如果不成立，将返回不正确的结果。具体来说，如果两个刻度值相隔TICKS_PERIOD / 2-1刻度，则该值将由该函数返回。但是，如果实时滴答的TICKS_PERIOD / 2已在它们之间传递，则该函数将返回-TICKS_PERIOD / 2，即结果值将回绕到可能值的负范围。\n\n上述限制的非正式理由：假设您被锁在一个房间内，除了标准的12档时钟外无法监控时间的流逝。然后，如果你现在看表盘，不再看13个小时（例如，如果你长时间睡觉），那么一旦你再看一遍，你可能觉得只有1个小时过去了。为了避免这个错误，请定期查看时钟。您的应用程序也应该这样做。 “太长时间睡眠”这个比喻也直接映射到应用程序行为：不要让你的应用程序运行任何单个任务太长时间。分步运行任务，并在两者之间进行计时。\n\n`ticks_diff()` 旨在适应各种使用模式，其中包括：\n\n* 超时轮询。在这种情况下，事件的顺序是已知的，你只会处理`ticks_diff（）`的正面结果：\n\n```python\n# Wait for GPIO pin to be asserted, but at most 500us\nstart = time.ticks_us()\nwhile pin.value() == 0:\n    if time.ticks_diff(time.ticks_us(), start) > 500:\n        raise TimeoutError\n```\n\n* 调度事件。 在这种情况下，如果事件过期，则ticks_diff（）结果可能为负：\n\n```python\n# This code snippet is not optimized\nnow = time.ticks_ms()\nscheduled_time = task.scheduled_time()\nif ticks_diff(scheduled_time, now) > 0:\n    print(\"Too early, let's nap\")\n    sleep_ms(ticks_diff(scheduled_time, now))\n    task.run()\nelif ticks_diff(scheduled_time, now) == 0:\n    print(\"Right at time!\")\n    task.run()\nelif ticks_diff(scheduled_time, now) < 0:\n    print(\"Oops, running late, tell task to run faster!\")\n    task.run(run_faster=true)\n```\n> 注意：不要将`time（）`值传递给`ticks_diff（）`，你应该对它们使用常规的数学运算。但请注意，`time（）`可能（也会）溢出。这被称为https://en.wikipedia.org/wiki/Year_2038_problem .\n\n### utime.time()\n\n返回自纪元以来的整数秒数，假设如上所述设置和维护基础RTC。如果未设置 RTC，则此函数返回自特定硬件移植参考时间点以来的秒数（对于没有电池供电的 RTC 的嵌入式电路板，通常自上电或复位后）。如果要开发便携式 MicroPython 应用程序，则不应依赖此函数来提供高于第二的精度。如果你需要更高的精度，使用`ticks_ms（）`和`ticks_us（）`函数，如果你需要日历时间，`localtime（）`没有参数是一个更好的选择。\n\n#### 与CPython的区别\n\n在 CPython 中，此函数返回自 Unix 纪元（1970-01-01 00:00 UTC）以来的秒数，作为浮点数，通常具有微秒精度。 使用 MicroPython，只有 Unix 移植版本使用相同的纪元，如果浮点精度允许，则返回亚秒精度。 嵌入式硬件通常没有浮点精度来表示长时间范围和亚秒精度，因此它们使用具有第二精度的整数值。 某些嵌入式硬件也缺少电池供电的 RTC，因此返回自上次上电或其他相对硬件特定点（例如复位）以来的秒数。\n\n\n### time.ticks()\n\n等同于 `time.ticks_ms` \n\n\n### time.clock()\n\n获取 `clock` 对象\n\n#### 返回值\n\n`clock` 对象\n\n## clock 对象\n\n由 `time.clock()` 返回\n\n### clock.tick()\n\n记录开始时间（ms）， 与`clock.fps()`搭配使用可以计算`fps`\n\n#### 返回值\n\nNone\n\n### clock.fps()\n\n根据上一个调用`clock.tick()`到现在的时间计算出帧率（`fps`）\n\n比如：\n\n```python\nimport sensor\nimport time\nclock = time.clock()\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nwhile True:\n\tclock.tick()\n\tsensor.snapshot()\n\tprint(\"fps = \",clock.fps())\n```\n\n\n\n### clock.reset()\n\n重置所有标记\n\n### clock.avg()\n\n根据上一个调用`clock.tick()`到现在的时间计算出每帧消耗的时间"}, "/soft/maixpy/zh/api_reference/standard/uhashlib.html": {"title": "uhashlib –哈希算法", "content": "---\ntitle: uhashlib –哈希算法\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: uhashlib –哈希算法\n---\n\n\n\n该模块实现了相应[CPython](http://docs.micropython.org/en/latest/reference/glossary.html#term-cpython)模块的子集，如下所述。有关更多信息，请参阅原始CPython文档：[hashlib](https://docs.python.org/3.5/library/hashlib.html#module-hashlib)。\n\n该模块实现二进制数据哈希算法。可用算法的确切清单取决于电路板。在可以实现的算法中：\n\nSHA256-SHA2系列的最新现代哈希算法。它适用于密码安全的目的。除非它具有特定的代码大小限制，否则建议将其包含在MicroPython内核中，并建议任何开发板都提供此功能。\n\n在 K210 中有硬件加速，不是软件计算\n\n[例程](https://github.com/sipeed/MaixPy_scripts/blob/master/basic/demo_sha256.py)：\n```python\na = bytes([0]*65)\nb = hashlib.sha256(a)\nc = b.digest()\nprint(c)\n```\n\n## 构造函数\n\n## 类 uhashlib.sha256([data])\n\n创建一个SHA256哈希对象，并有选择地向其中馈送数据。\n\n\n## 方法\n\n### hash.update(data)\n\n将更多的二进制数据输入哈希。\n\n### hash.digest()\n\n返回通过哈希传递的所有数据的哈希，作为字节对象。调用此方法后，无法再将更多数据馈入哈希。\n\n**注意**： 在`micropython`中， 使用此函数会完成最后的计算， 不是单纯的将结果显示出来， 所以只能调用一次， 如果你要多次使用这个值， 请保存到变量\n```python\nc = b.digest()\nprint(c)\n```\n多次调用会发现返回值不相同\n```python\nc = b.digest()\nd = b.digest()\nprint(c == d) # False\n```\n\n### hash.hexdigest()\n\n未实现此方法。使用 `ubinascii.hexlify(hash.digest())` 可获得类似的效果。"}, "/soft/maixpy/zh/api_reference/standard/ubinascii.html": {"title": "ubinascii – 二进制/ ASCII转换", "content": "---\ntitle: ubinascii – 二进制/ ASCII转换\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: ubinascii – 二进制/ ASCII转换\n---\n\n\n\n该模块实现了相应CPython模块的子集，如下所述。有关更多信息，请参阅原始CPython文档：[binascii](https://docs.python.org/3.5/library/binascii.html#module-binascii).\n\n该模块以ASCII格式（两个方向）实现二进制数据与其各种编码之间的转换。\n\n## 函数\n\n### ubinascii.hexlify(data[, sep])\n\n将二进制数据转换为十六进制表示。返回字节字符串。\n\n#### 与CPython的区别\n\n如果提供了附加参数sep，则它将用作十六进制值之间的分隔符。\n\n### ubinascii.unhexlify(data)\n\n将十六进制数据转换为二进制表示。返回字节字符串。 （即hexlify的倒数）\n\n### ubinascii.a2b_base64(data)\n\n解码base64编码的数据，忽略输入中的无效字符。符合 [RFC 2045 s.6.8.](https://tools.ietf.org/html/rfc2045#section-6.8) 返回一个bytes对象。\n\n### ubinascii.b2a_base64(data)\n\n以base64格式编码二进制数据，如 [RFC 3548](https://tools.ietf.org/html/rfc3548.html)所述。返回编码数据，后跟换行符，作为bytes对象。"}, "/soft/maixpy/zh/api_reference/standard/uzlib.html": {"title": "uzlib  — zlib 解压缩", "content": "---\ntitle: uzlib  — zlib 解压缩\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: uzlib  — zlib 解压缩\n---\n\n\n该模块实现了相应CPython模块的子集，如下所述。有关更多信息，请参阅原始CPython文档：[zlib](https://docs.python.org/3.5/library/zlib.html#module-zlib)。\n\n该模块允许解压使用 [DEFLATE](https://en.wikipedia.org/wiki/DEFLATE) 算法压缩的二进制数据（通常用于zlib库和gzip存档器）。\n\n压缩尚未实现。\n\n## 函数\n\n### decompress\n\n解压\n\n```python\nuzlib.decompress(data, wbits=0, bufsize=0)\n```\n\n#### 参数\n\n* `wbits`： 压缩期间使用的 DEFLATE 字典窗口大小（8-15，字典大小是该值的2的幂）。 另外，如果值为正，则假定数据为 zlib 流（使用 zlib 头）。 否则，如果它是负数，则假定它是原始 DEFLATE 流。 \n\n* `bufsize`： 参数用于与CPython兼容， 可忽略。\n\n#### 返回值\n\n将解压缩的数据作为`bytes`类型返回。 \n\n### DecompIO\n\n创建一个流包装器，允许对另一个流中的压缩数据进行透明解压缩。 这允许处理具有大于可用堆大小的数据的压缩流。 除了decompress（）中描述的值之外，`wbits`可以取值 24..31（16+8..15），这意味着输入流具有gzip头。\n\n```python\nclass uzlib.DecompIO(stream, wbits=0)\n```\n\n## 与 CPython 的不同\n\n这个类是MicroPython扩展。它包含在临时基础上，可能会在以后的版本中进行大量更改或删除。"}, "/soft/maixpy/zh/api_reference/standard/uos.html": {"title": "uos – 基本的“操作系统”服务", "content": "---\ntitle: uos – 基本的“操作系统”服务\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: uos – 基本的“操作系统”服务\n---\n\n\n\n该模块实现了相应CPython模块的子集，如下所述。有关更多信息，请参阅原始CPython文档：[os](https://docs.python.org/3.5/library/os.html#module-os)。\n\n`uos`模块包含用于文件系统访问和挂载，终端重定向和复制以及`uname`和`urandom`等函数。\n\n## 常用函数\n\n### uos.uname()\n\n返回一个元组（可能是一个命名了的元组），其中包含有关底层机器和/或其操作系统的信息。元组按以下顺序有五个字段，每个字段都是一个字符串：\n\n* sysname  - 底层系统的名称\n* nodename  - 节点名（/板子名称）（可以与sysname相同）\n* release  - 底层系统的版本\n* version -  MicroPython版本和构建日期\n* machine  - 底层硬件的标识符（例如，板，CPU）\n\n\n### uos.urandom(n)\n\n返回一个包含n个随机字节的字节对象。只要有可能，它就由硬件随机数生成器生成。\n\n## 文件系统访问\n\n### uos.chdir(path)\n\n更改当前目录。\n\n### uos.getcwd()\n\n获取当前目录。\n\n### uos.ilistdir([dir])\n\n此函数返回一个迭代器，然后生成与列出的目录中的条目对应的元组。如果不传参数，它列出了当前目录，否则它列出了dir给出的目录。\n\n元组具有形式（名称，类型，inode [，大小]）：\n\n* name： 是一个字符串（如果dir是一个字节对象，则为字节），并且是条目的名称;\n* type： 是一个整数，指定条目的类型，目录为 0x4000，常规文件为 0x8000;\n* inode： 是对应于文件inode的整数，对于没有这种概念的文件系统可以是0。\n* 某些平台可能会返回包含条目大小的4元组。对于文件条目，size是表示文件大小的整数，如果未知则为-1。目前条目的含义目前尚未定义。\n\n\n### uos.listdir([dir])\n\n如果没有参数，请列出当前目录。否则列出给定目录。\n\n### uos.mkdir(path)\n\n创建一个新目录。\n\n### uos.remove(path)\n\n删除文件。\n\n### uos.rmdir(path)\n\n删除目录。\n\n### uos.rename（old_path，new_path）\n\n重命名文件。\n\n### uos.stat(path)\n\n获取文件或目录的状态。\n\n### uos.statvfs(path)\n\n获取文件系统的状态。\n\n按以下顺序返回包含文件系统信息的元组：\n\n* f_bsize  - 文件系统块大小\n* f_frsize  - 片段大小\n* f_blocks  -  f_frsize单位中fs的大小\n* f_bfree  - 空闲块数\n* f_bavail  - 无特权用户的空闲块数\n* f_files  -  inode数量\n* f_ffree  - 免费inode的数量\n* f_favail  - 无特权用户的免费inode数\n* f_flag  - 挂载标志\n* f_namemax  - 最大文件名长度\n\n与inode相关的参数：`f_files`，`f_ffree`，`f_avail`和`f_flags`参数可能返回'0`，因为它们在特定于硬件的实现中不可用。\n\n### uos.sync()\n\n同步所有文件系统。\n\n## 终端重定向和复制\n\n### uos.dupterm(stream_object，index = 0)\n\n在给定的`stream`类对象上复制或切换MicroPython终端（REPL）。 stream_object参数必须实现`readinto（）`和`write（）`方法。流应处于非阻塞模式，如果没有可用于读取的数据，`readinto（）`应返回'None`。\n\n调用此函数后，将在此流上重复所有终端输出，并且流上可用的任何输入都将传递到终端输入。\n\nindex参数应为非负整数，并指定设置的复制槽。给定端口可以实现多个槽（槽0将始终可用），并且在这种情况下，终端输入和输出在所有设置的槽上复制。\n\n如果`None`作为stream_object传递，则在索引给出的槽上取消复制。\n\n该函数返回给定槽中的前一个类似流的对象。\n\n##  文件系统挂载\n\n某些端口提供虚拟文件系统（VFS）以及在此VFS中安装多个“真实”文件系统的功能。文件系统对象可以安装在VFS的根目录中，也可以安装在根目录中的子目录中。这允许Python程序看到的文件系统的动态和灵活配置。具有此功能的端口提供`mount（）`和`umount（）`函数，以及可能由VFS类表示的各种文件系统实现。\n\n### uos.mount(fsobj，mount_point，*，readonly)\n\n将文件系统对象fsobj挂载到mount_point字符串指定的VFS中的位置。 fsobj可以是一个具有`mount（）`方法或块设备的VFS对象。如果它是块设备，则会自动检测文件系统类型（如果未识别文件系统，则会引发异常）。 mount_point可以是'/'在根目录下挂载fsobj，或者'/ <name>'挂载到根目录下的子目录中。\n\n如果readonly为“True”，则文件系统以只读方式挂载。\n\n在mount过程中，在文件系统对象上调用`mount（）`方法。\n\n如果mount_point已经挂载，将引发`OSError（EPERM）`。\n\n### uos.umount(mount_point)\n\n卸载文件系统。 mount_point可以是命名安装位置的字符串，也可以是先前安装的文件系统对象。在卸载过程中，在文件系统对象上调用方法`umount（）`。\n\n如果找不到mount_point，会引发`OSError（EINVAL）`。\n\n### class uos.VfsFat(block_dev)\n\n创建使用FAT文件系统格式的文件系统对象。 FAT文件系统的存储由block_dev提供。可以使用`mount（）`挂载由此构造函数创建的对象。\n\n#### static mkfs(block_dev)\n\n在block_dev上构建FAT文件系统。\n\n##  文件系统格式化\n\n在MaixPy中，我们提供了对flash进行文件系统格式化的操作。如果用户想要清空flash文件系统那么可以使用该接口 `flash_format` 来实现\n\n### uos.flash_format()\n\n该接口不需要传入参数，直接使用将对开发板的 flash 进行格式化。请注意，格式化将清空所有文件，在使用前请确认 flash 中文件都是需要删除的\n\n## 块设备\n\n块设备是实现块协议的对象，块协议是由 `AbstractBlockDev` 类在下面描述的一组方法。该类的具体实现通常允许访问类似存储器的功能作为硬件（如闪存）。特定文件系统驱动程序可以使用块设备来存储其文件系统的数据。\n\n\n### class uos.AbstractBlockDev()...)\n\n构造块设备对象。构造函数的参数取决于特定的块设备。\n\n#### readblocks(block_num, buf)\n\n从索引block_num给出的块开始，将块从设备读入buf（字节数组）。要读取的块数由buf的长度给出，该长度将是块大小的倍数。\n\n#### writeblocks(block_num, buf)\n\n从索引block_num给出的块开始，将buf（字节数组）中的块写入设备。要写入的块数由buf的长度给出，该长度将是块大小的倍数。\n\n#### ioctl(op, arg)\n\n控制块设备并查询其参数。要执行的操作由op给出，它是以下整数之一：\n\n* 1  - 初始化设备（arg未使用）\n* 2  - 关闭设备（arg未使用）\n* 3  - 同步设备（arg未使用）\n* 4  - 获取块数的计数，应该返回一个整数（arg未使用）\n* 5  - 获取块中的字节数，应该返回一个整数，或者“None”，在这种情况下使用默认值512（arg未使用）\n\n### 例程\n\n#### 例程1\n\n以fat32举例，下面的类将实现一个块设备，它使用`bytearray`将其数据存储在RAM中：\n\n```python\nclass RAMBlockDev:\n    def __init__(self, block_size, num_blocks):\n        self.block_size = block_size\n        self.data = bytearray(block_size * num_blocks)\n\n    def readblocks(self, block_num, buf):\n        for i in range(len(buf)):\n            buf[i] = self.data[block_num * self.block_size + i]\n\n    def writeblocks(self, block_num, buf):\n        for i in range(len(buf)):\n            self.data[block_num * self.block_size + i] = buf[i]\n\n    def ioctl(self, op, arg):\n        if op == 4: # get number of blocks\n            return len(self.data) // self.block_size\n        if op == 5: # get block size\n            return self.block_size\n```\n\n或者：\n\n```python\nimport uos\n\nbdev = RAMBlockDev(512, 50)\nuos.VfsFat.mkfs(bdev)\nvfs = uos.VfsFat(bdev)\nuos.mount(vfs, '/ramdisk')\n```\n#### 例程2\n\n以spiffs举例，下面的类将实现一个块设备，它使用`bytearray`将其数据存储在RAM中：\n\n```python\n\nclass RAMFlashDev:\n    def __init__(self):\n            self.fs_size = 256*1024\n            self.fs_data = bytearray(256*1024)\n            self.erase_block = 32*1024\n            self.log_block_size = 64*1024\n            self.log_page_size = 4*1024\n    def read(self,buf,size,addr):\n            for i in range(len(buf)):\n                buf[i] = self.fs_data[addr+i]\n    def write(self,buf,size,addr):\n            for i in range(len(buf)):\n                self.fs_data[addr+i] = buf[i]\n    def erase(self,size,addr):\n            for i in range(size):\n                self.fs_data[addr+i] = 0xff\n\n```\n\n```python\n\nblkdev = RAMFlashDev.RAMFlashDev()\nvfs = uos.VfsSpiffs(blkdev)\nvfs.mkfs(vfs)\nuos.mount(vfs,'/ramdisk')\n\n```"}, "/soft/maixpy/zh/api_reference/standard/ure.html": {"title": "ure – 简单的正则表达式", "content": "---\ntitle: ure – 简单的正则表达式\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: ure – 简单的正则表达式\n---\n\n\n\n该模块实现了相应CPython模块的子集，如下所述。 有关更多信息，请参阅原始CPython文档：[re](https://docs.python.org/3.5/library/re.html#module-re).\n\n该模块实现了正则表达式操作。 支持的正则表达式语法是CPython`re`模块的子集（实际上是POSIX扩展正则表达式的子集）。\n\n## 支持的运算符和特殊序列\n\n* `.` : 匹配任何字符。\n\n* `[...]` : 匹配字符集。 支持单个字符和范围，包括否定集（例如`[^ a-c]`）。\n\n* `^` : 匹配字符串的开头。\n\n* `$` : 匹配字符串的结尾。\n\n* `?` : 匹配零个或前一个子模式之一。\n\n* `*` : 匹配前一个子模式的零个或多个。\n\n* `+` : 匹配前一个子模式中的一个或多个。\n\n* `??` : 非贪婪版的`？`，匹配零或一，偏好为零。\n\n* `*?` : `*`的非贪婪版本，匹配零或更多，优先选择最短匹配。\n\n* `+?` : 非贪婪的“+”版本，匹配一个或多个，优先匹配最短。\n\n* `|` : 匹配此运算符的左侧或右侧子模式。\n\n* `(...)` : 分组。 每个组都在捕获（它捕获的子字符串可以使用`match.group（）方法访问）。\n\n* `\\d` : 匹配数字。 相当于`[0-9]`。\n\n* `\\D` : 匹配非数字。 相当于`[^ 0-9]`。\n\n* `\\s` : \n\n* `\\S` : 匹配空白。 相当于 `[^ \\t-\\r]`.\n\n* `\\w` : 匹配“单词字符”（仅限ASCII）。 相当于 `[A-Za-z0-9_]`.\n\n* `\\W` : 匹配非“单词字符”（仅限ASCII）。 相当于 `[^A-Za-z0-9_]`.\n\n* `\\` : 转义字符。 除了上面列出的那些之外，反斜杠后面的任何其他字符都是字面意思。 例如，`\\*`等同于文字`*`（不被视为`*`运算符）。 请注意，`\\r`，`\\n，`等不是专门处理的，并且相当于文字字母`r`，`n`等。因此，不建议使用原始Python字符串（`r“”`）用于正则表达式。 例如，`r“\\r \\n”`用作正则表达式时相当于`“rn”`。 要匹配CR后跟LF的字符，请使用`\"\\r\\n\"`。\n\n## 不支持的表达式\n\n* 重复计算 (`{m,n}`)\n* 命名组 (`(?P<name>...)`)\n* 非捕获组 (`(?:...)`)\n* 更高级的断言 (`\\b, \\B`)\n* 像`\\r`，`\\n`这样的特殊字符转义 - 使用Python自己的转义\n* 其它\n\n\n例子：\n\n```python\nimport ure\n\n# As ure doesn't support escapes itself, use of r\"\" strings is not\n# recommended.\nregex = ure.compile(\"[\\r\\n]\")\n\nregex.split(\"line1\\rline2\\nline3\\r\\n\")\n\n# Result:\n# ['line1', 'line2', 'line3', '', '']\n```\n## 方法\n\n### ure.compile(regex_str[, flags])\n\n编译正则表达式， 返回[regex](http://docs.micropython.org/en/latest/library/ure.html?highlight=ure#regex) 对象。\n\n### ure.match(regex_str, string)\n\n编译regex_str并匹配字符串。 匹配始终从字符串中的起始位置开始。\n\n### ure.search(regex_str, string)\n\n编译regex_str并在字符串中搜索它。 与`match`不同，这将搜索字符串以匹配正则表达式的第一个位置（如果正则表达式被锚定，它仍然可以是0）。\n\n### ure.sub(regex_str, replace, string, count=0, flags=0)\n\n编译regex_str并在字符串中搜索它，用replace替换所有匹配项，并返回新字符串。\n\nreplace可以是字符串或函数。 如果它是一个字符串，那么`\\<number>`和`\\g<number>`形式的转义序列可用于扩展到相应的组（或不匹配组的空字符串）。 如果replace是一个函数，那么它必须采用一个参数（匹配）并且应该返回一个替换字符串。\n\n如果指定了count并且非零，那么在进行许多替换之后，替换将停止。 flags参数被忽略。\n\n注意：此函数的可用性取决于`MicroPython port`。\n\n### ure.DEBUG\n\n标记值，显示有关已编译表达式的调试信息。 （可用性取决于`MicroPython 移植实现`。）\n\n\n## Regex 对象\n\n编译了的正则表达式。 使用`ure.compile()`创建此类的实例。\n\n### regex.match(string) regex.search(string) regex.sub(replace, string, count=0, flags=0)\n\n类似于模块级函数`match（）`，`search（）`和`sub（）`。 如果将相同的正则表达式应用于多个字符串，则使用方法会更高效。\n\n### regex.split(string, max_split=-1)\n\n使用正则表达式拆分字符串。 如果给出 max_split，则指定要执行的最大拆分数。 返回字符串列表（如果指定了，则最多可以有 max_split + 1 个元素）。\n\n\n## Match 对象\n\n匹配`match（）`和`search（）`方法返回的对象，并传递给sub（）中的替换函数。\n\n### match.group(index)\n\n返回匹配（子）字符串。 整个匹配的索引为0，每个捕获组的索引为1和更高。 仅支持数字组。\n\n### match.groups()\n\n返回包含匹配组的所有子串的元组。\n\n注意：此方法的可用性取决于`MicroPython 移植实现`。\n\n### match.start([index]) match.end([index])\n\n返回匹配的子字符串组的开头或结尾的原始字符串中的索引。 index默认为整个组，否则将选择一个组。\n\n注意：这些方法的可用性取决于`MicroPython 移植实现`。\n\n### match.span([index])\n\n\n返回2元组`（match.start（index），match.end（index））`。\n\n注意：此方法的可用性取决于`MicroPython 移植` 是否实现。"}, "/soft/maixpy/zh/api_reference/standard/cmath.html": {"title": "cmath – 复数的数学函数", "content": "---\ntitle: cmath – 复数的数学函数\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: cmath – 复数的数学函数\n---\n\n\n该模块实现了相应CPython模块的子集，如下所述。有关更多信息，请参阅原始CPython文档: [cmath](https://docs.python.org/3.5/library/cmath.html#module-cmath).\n\n`cmath` 模块提供了一些处理复数的基本数学函数。\n\n\n## 函数\n\n### cos\n\n```python\ncmath.cos(z)\n```\n\n返回`z`的余弦。\n\n### exp\n\n```python\ncmath.exp(z)\n```\n\n返回`z`的指数。\n\n### log\n\n```python\ncmath.log(z)\n```\n\n返回`z`的自然对数。分支切割沿负实轴。\n\n### log10\n\n```python\ncmath.log10(z)\n```\n\n返回`z`的以10为底的对数。分支切割沿负实轴。\n\n### phase\n\n```python\ncmath.phase(z)\n```\n\n返回数字“z”的相位，范围（-pi，+ pi）。\n\n### polar\n\n```python\ncmath.polar(z)\n```\n\n作为元组返回`z`的极性形式。\n\n### rect\n\n```python\ncmath.rect(r, phi)\n```\n\n返回模数`r`和相位`phi`的复数。\n\n### sin\n\n```python\ncmath.sin(z)\n```\n\n返回`z`的正弦值。\n\n### sqrt\n\n```python\ncmath.sqrt(z)\n```\n\n返回`z`的平方根。\n\n## Constants\n\n### cmath.e\n\n自然对数的基础\n\n### cmath.pi\n\n圆周长与直径的比值"}, "/soft/maixpy/zh/api_reference/standard/uheapq.html": {"title": "uheapq – 堆队列算法", "content": "---\ntitle: uheapq – 堆队列算法\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: uheapq – 堆队列算法\n---\n\n\n\n该模块实现了对应 CPython 模块的子集，如下所述。 有关更多信息，请参阅原始CPython文档：[heapq](https://docs.python.org/3.5/library/heapq.html#module-heapq)。\n\n该模块实现堆队列算法。\n\n堆队列只是一个以某种方式存储其元素的列表。\n\n\n## 函数\n\n### heappush\n\n```python\nuheapq.heappush(heap, item)\n```\n\n将元素放入堆。\n\n### heappop\n\n```python\nuheapq.heappop(heap)\n```\n\n弹出堆中的第一个元素，然后将其返回。 如果heap为空，则引发`IndexError`。\n\n### heapify\n\n```python \nuheapq.heapify(x)\n```\n\n将列表x转换为堆。 这是一个 in-place（划分交换排序）操作。"}, "/soft/maixpy/zh/api_reference/standard/math.html": {"title": "math – 数学函数", "content": "---\ntitle: math – 数学函数\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: math – 数学函数\n---\n\n\n\n该模块实现了相应CPython模块的子集，如下所述。有关更多信息，请参阅原始CPython文档：[math](https://docs.python.org/3.5/library/math.html#module-math).\n\n`math`模块提供了一些处理浮点数的基本数学函数。\n\n\n## 函数\n\n### math.acos(x)\n\n返回`x`的反余弦值。\n\n### math.acosh(x)\n\n返回`x`的反双曲余弦值。\n\n### math.asin(x)\n\n返回`x`的反正弦。\n\n### math.asinh(x)\n\n返回`x`的反双曲正弦值。\n\n### math.atan(x)\n\n返回`x`的反正切。\n\n### math.atan2(y, x)\n\n返回`y` /`x`的反正切的主值。\n\n### math.atanh(x)\n\n返回`x`的反双曲正切。\n\n### math.ceil(x)\n\n返回一个整数，“x”向正无穷大四舍五入。\n\n### math.copysign(x, y)\n\n以`y`的符号返回`x`。\n\n### math.cos(x)\n\n返回`x`的余弦。\n\n\n### math.cosh(x)\n\n返回`x`的双曲余弦值\n\n### math.degrees(x)\n\n返回弧度`x`转换为度数。\n\n### math.erf(x)\n\n返回`x`的错误函数。\n\n### math.erfc(x)\n\n返回`x`的互补误差函数。\n\n### math.exp(x)\n\n返回`x`的指数。\n\n### math.expm1(x)\n\n返回`exp（x） -  1`。\n\n### math.fabs(x)\n\n返回`x`的绝对值。\n\n### math.floor(x)\n\n返回一个整数，“x”向负无穷大舍入。\n\n### math.fmod(x, y)\n\n返回`x` /`y`的余数。\n\n### math.frexp(x)\n\n将浮点数分解为尾数和指数。返回的值是元组`（m，e）`，使得`x == m * 2 ** e`完全正确。如果`x == 0`则函数返回`（0.0,0）`，否则关系`0.5 <= abs（m）<1`成立。\n\n### math.gamma(x)\n\n返回`x`的伽玛函数。\n\n### math.isfinite(x)\n\n如果`x`是有限的，则返回True。\n\n### math.isinf(x)\n\n如果`x`是无限的，则返回True。\n\n### math.isnan(x)\n\n如果`x`不是数字，则返回True\n\n### math.ldexp(x, exp)\n\n返回`x *（2 ** exp）`。\n\n### math.lgamma(x)\n\n返回`x`的伽玛函数的自然对数。\n\n### math.log(x)\n\n返回`x`的自然对数。\n\n### math.log10(x)\n\n返回`x`的以10为底的对数。\n\n### math.log2(x)\n\n返回`x`的base-2对数。\n\n### math.modf(x)\n\n返回两个浮点数的元组，是“x”的分数和整数部分。两个返回值都与`x`具有相同的符号。\n\n### math.pow(x, y)\n\n将`x`返回到'y`的幂。\n\n### math.radians(x)\n\n返回度数`x`转换为弧度。\n\n### math.sin(x)\n\n返回`x`的正弦值。\n\n### math.sinh(x)\n\n返回`x`的双曲正弦值。\n\n### math.sqrt(x)\n\n返回`x`的平方根。\n\n### math.tan(x)\n\n返回`x`的正切值。\n\n### math.tanh(x)\n\n返回`x`的双曲正切。\n\n### math.trunc(x)\n\n返回一个整数，“x”向0舍入。\n\n## Constants\n\n### math.e\n\n自然对数的基础\n\n### math.pi\n\n圆周长与直径的比值"}, "/soft/maixpy/zh/api_reference/standard/ucollections.html": {"title": "ucollections – 集合和容器类型", "content": "---\ntitle: ucollections – 集合和容器类型\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: ucollections – 集合和容器类型\n---\n\n\n\n\n该模块实现了相应CPython模块的子集，如下所述。有关更多信息，请参阅原始CPython文档 [collections](https://docs.python.org/3.5/library/collections.html#module-collections).\n\n此模块实现高级集合和容器类型以保存/累积各种对象。\n\n## 类\n\n### ucollections.deque(iterable, maxlen[, flags])\n\nDeques（双端队列）是一个类似列表的容器，支持O（1）追加并从双端队列的任一侧弹出。使用以下参数创建新的deques：\n\n* iterable必须是空元组，并且新的deque被创建为空。\n* 必须指定maxlen，并且双端队列将限制为此最大长度。一旦双端队列已满，添加的任何新项目将丢弃对方的项目。\n* 添加项目时，可选标志可以为1以检查溢出。\n\n除了支持bool和len之外，deque对象还有以下方法：\n\n#### `deque.append(x)`\n\n将`x`添加到双端队列的右侧。如果启用了溢出检查并且没有剩余空间，则引发 IndexError。\n\n#### `deque.popleft()`\n\n从双端队列的左侧移除并返回一个项目。如果没有项目，则引发 IndexError。\n\n### ucollections.namedtuple(name, fields)\n\n这是工厂函数，用于创建具有特定名称和字段集的新的namedtuple类型。 namedtuple是元组的子类，它不仅可以通过数字索引访问其字段，还可以使用符号字段名称访问属性访问语法。 Fields是指定字段名称的字符串序列。为了与CPython兼容，它也可以是一个以空格分隔的字段命名的字符串（但效率较低）。使用示例：\n\n```python\nfrom ucollections import namedtuple\n\nMyTuple = namedtuple(\"MyTuple\", (\"id\", \"name\"))\nt1 = MyTuple(1, \"foo\")\nt2 = MyTuple(2, \"bar\")\nprint(t1.name)\nassert t2.name == t2[1]\n```\n\n### ucollections.OrderedDict(...)\n\n`dict`类型子类，它记住并保留添加的键的顺序。当迭代命令dict时，按照添加的顺序返回键/项：\n\n```python\nfrom ucollections import OrderedDict\n\n# To make benefit of ordered keys, OrderedDict should be initialized\n# from sequence of (key, value) pairs.\nd = OrderedDict([(\"z\", 1), (\"a\", 2)])\n# More items can be added as usual\nd[\"w\"] = 5\nd[\"b\"] = 3\nfor k, v in d.items():\n    print(k, v)\n```\n\nOutput:\n\n```python\nz 1\na 2\nw 5\nb 3\n```"}, "/soft/maixpy/zh/api_reference/standard/sys.html": {"title": "sys – 系统特定功能", "content": "---\ntitle: sys – 系统特定功能\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: sys – 系统特定功能\n---\n\n\n\n该模块实现了相应CPython模块的子集，如下所述。 有关更多信息，请参阅原始CPython文档：[sys](https://docs.python.org/3.5/library/sys.html#module-sys).\n\n## 功能函数\n\n### sys.exit(retval=0)\n\n使用给定的退出代码终止当前程序。 根据此，此函数引发“SystemExit”异常。 如果给出了一个参数，它的值作为`SystemExit`的参数给出。\n\n### sys.print_exception(exc, file=sys.stdout)\n\n使用回溯到类文件对象文件（或默认情况下为`sys.stdout`）打印异常。\n\n> **和 CPython 的不同**\n> 这是一个函数的简化版本，它出现在CPython的回溯模块中。 与traceback.print_exception（）不同，此函数只接受异常值而不是异常类型，异常值和回溯对象; file参数应该是位置的; 不支持其他参数。 可以在micropython-lib中找到与CPython兼容的回溯模块。\n\n## 常量\n\n### sys.argv\n\n当前程序启动时的可变参数列表。\n\n### sys.byteorder\n\n系统的字节顺序（“小端”或“大端”`）。\n\n### sys.implementation\n\n包含有关当前Python实现的信息的对象。 对于MicroPython，它具有以下属性：\n\n* name - 字符串“micropython”\n* version - 元组 (major, minor, micro), e.g. (1, 7, 0)\n\n此对象是区分MicroPython与其他Python实现的推荐方法（请注意，它仍然可能不存在于非常小的端口中）。\n\n> **和 CPython 的不同**\n> CPython要求为此对象提供更多属性，但实际有用的最低要求是在MicroPython中实现的。\n\n### sys.maxsize\n\n本机整数类型可以在当前平台上保存的最大值，或MicroPython整数类型可表示的最大值，如果它小于平台最大值（对于没有长int支持的MicroPython端口的情况）。\n\n此属性对于检测平台的“位数”（32位与64位等）非常有用。 建议不要直接将此属性与某个值进行比较，而是计算其中的位数：\n\n```python\nbits = 0\nv = sys.maxsize\nwhile v:\n    bits += 1\n    v >>= 1\nif bits > 32:\n    # 64-bit (or more) platform\n    ...\nelse:\n    # 32-bit (or less) platform\n    # Note that on 32-bit platform, value of bits may be less than 32\n    # (e.g. 31) due to peculiarities described above, so use \"> 16\",\n    # \"> 32\", \"> 64\" style of comparisons.\n```\n\n### sys.modules\n\n加载模块的字典。 在某些端口上，它可能不包含内置模块。\n\n### sys.path\n\n用于搜索导入模块的可变目录列表。\n\n### sys.platform\n\n运行 MicroPython 的平台。 对于OS / RTOS端口，这通常是OS的标识符，例如，` “LINUX”`。 对于裸金属端口，它是电路板的标识符，例如 `“pyboard”`用于原始的 MicroPython 参考板。 因此，它可用于区分一块板与另一块板。 如果您需要检查您的程序是否在 MicroPython 上运行（与其他 Python 实现相比），请使用`sys.implementation`。\n\n### sys.stderr\n\n标准错误 `stream`.\n\n### sys.stdin\n\n标准输入 `stream`.\n\n### sys.stdout\n\n标准输出 `stream`.\n\n### sys.version\n\n实现的 Python 版本， 返回一个字符串\n\n### sys.version_info\n\n实现的 Python 版本， 返回一个由整数组成的元组"}, "/soft/maixpy/zh/api_reference/standard/ujson.html": {"title": "ujson – JSON encoding and decoding", "content": "---\ntitle: ujson – JSON encoding and decoding\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: ujson – JSON encoding and decoding\n---\n\n\n\n该模块实现了相应 CPython 模块的子集，如下所述。有关更多信息，请参阅原始 CPython 文档：[json](https://docs.python.org/3.5/library/json.html#module-json).\n\n此模块允许在 Python 对象和 JSON 数据格式之间进行转换。\n\n## 函数\n\n### dump\n\n```python\nujson.dump(obj, stream)\n```\n\n将 `obj` 序列化化为 JSON 字符串，将其写入给定的流。\n\n### dumps\n\n```python\nujson.dumps(obj)\n```\n\n返回表示为 JSON 字符串的 `obj`。\n\n### load\n\n```python\nujson.load(stream)\n```\n\n解析给定的流，将其解释为 JSON 字符串并将数据反序列化为 Python 对象。返回结果对象。\n\n解析继续，直到遇到文件结尾。如果未正确形成流中的数据，则会引发 ValueError。\n\n### loads\n\n```python\nujson.loads(str)\n```\n\n解析JSON str并返回一个对象。如果字符串格式出错，则引发ValueError。"}, "/soft/maixpy/zh/api_reference/standard/ustruct.html": {"title": "ustruct – 打包和解包原始数据类型", "content": "---\ntitle: ustruct – 打包和解包原始数据类型\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: ustruct – 打包和解包原始数据类型\n---\n\n\n\n该模块实现了相应的`CPython`模块的子集，如下所述。有关更多信息，请参阅原始CPython文档： [struct](https://docs.python.org/3.5/library/struct.html#module-struct).\n\n支持的大小/字节顺序前缀: `@`, `<`, `>`, `!`.\n\n支持的格式代码： `b`, `B`, `h`, `H`, `i`, `I`, `l`, `L`, `q`, `Q`, `s`, `P`, `f`, `d` （后者2取决于浮点支持）。\n\n## 函数\n\n### calcsize\n\n```python\nustruct.calcsize(fmt)\n```\n\n返回存储给定`fmt`所需的字节数。\n\n### pack\n\n```python\nustruct.pack(fmt, v1, v2, ...)\n```\n\n根据格式字符串`fmt`打包值`v1`，`v2`，`...`。返回值是编码值的字节对象。\n\n### pack_into\n\n```python\nustruct.pack_into(fmt, buffer, offset, v1, v2, ...)\n```\n\n根据格式字符串`fmt`将值`v1`，`v2`，`...`打包到从offset开始的缓冲区中。从缓冲区的末尾开始计数可能是负数。\n\n### unpack\n\n```python\nustruct.unpack(fmt, data)\n```\n\n根据格式字符串`fmt`从`data`解包。返回值是解压缩值的元组。\n\n### unpack_from\n\n```python\nustruct.unpack_from(fmt, data, offset=0)\n```\n\n根据格式字符串`fmt`从 `offset` 开始从`data`解包。 `offset`可能是负数，从缓冲区的末尾开始计数。返回值是解压缩值的元组。"}, "/soft/maixpy/zh/api_reference/standard/uerrno.html": {"title": "uerrno — 系统错误代码", "content": "---\ntitle: uerrno — 系统错误代码\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: uerrno — 系统错误代码\n---\n\n\n\n\n该模块实现了相应CPython模块的子集，如下所述。有关更多信息，请参阅原始CPython文档：[errno](https://docs.python.org/3.5/library/errno.html#module-errno)。\n\n该模块描述了 `OSError` 错误的错误标识。特定的代码库存取决于 `Micropython 的移植`， 错误会在特定的会出现错误的函数进行说明。\n\n\n## 常量\n\n### EEXIST, EAGAIN, 等\n\n基于 ANSI C / POSIX 标准的错误代码。所有错误代码均以 “E” 开头。如上所述，代码库存取决于 MicroPython 的移植。错误通常可以作为`exc.args [0]`访问，其中`exc`是`OSError`的一个实例。用法示例：\n\n```python\ntry:\n    uos.mkdir(\"my_dir\")\nexcept OSError as exc:\n    if exc.args[0] == uerrno.EEXIST:\n        print(\"Directory already exists\")\n```\n\n### uerrno.errorcode\n\n字典将数字错误代码映射到带有符号错误代码的字符串（参见上文）：\n\n```python\n>>> print(uerrno.errorcode[uerrno.EEXIST])\nEEXIST\n```"}, "/soft/maixpy/zh/api_reference/standard/index.html": {"title": "标准库", "content": "---\ntitle: 标准库\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 标准库\n---\n\n\n* [cmath](./cmath.html)\n* [gc](./gc.html)\n* [math](./math.html)\n* [sys](./sys.html)\n* [ubinascii](./ubinascii.html)\n* [ucollections](./ucollections.html)\n* [uctypes](./uctypes.html)\n* [uerrno](./uerrno.html)\n* [uhashlib](./uhashlib.html)\n* [uheapq](./uheapq.html)\n* [ujson](./ujson.html)\n* [uos](./uos.html)\n* [ure](./ure.html)\n* [uselect](./uselect.html)\n* [usocket](./usocket.html)\n* [ustruct](./ustruct.html)\n* [utime](./utime.html)\n* [uzlib](./uzlib.html)"}, "/soft/maixpy/zh/api_reference/standard/uctypes.html": {"title": "uctypes – 以结构化方式访问二进制数据", "content": "---\ntitle: uctypes – 以结构化方式访问二进制数据\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: uctypes – 以结构化方式访问二进制数据\n---\n\n\n该模块为MicroPython实现“外部数据接口”。 它背后的想法类似于CPython的`ctypes`模块，但实际的API是不同的，流线型和小尺寸优化。 该模块的基本思想是定义具有与C语言允许的功能大致相同的数据的数据结构布局，然后使用熟悉的点语法访问它以引用子字段。\n\n> **警告**\n> \n> uctypes模块允许访问机器的任意内存地址（包括I / O和控制寄存器）。 不小心使用它可能会导致崩溃，数据丢失，甚至硬件故障。\n\n> **也可参考**\n> \n> **[ustruct](ustruct.md)模块**\n> \n> 用于访问二进制数据结构的标准Python方法（不能很好地扩展到大型和复杂的结构）。\n\n\n例程：\n\n```python\nimport uctypes\n\n# Example 1: Subset of ELF file header\n# https://wikipedia.org/wiki/Executable_and_Linkable_Format#File_header\nELF_HEADER = {\n    \"EI_MAG\": (0x0 | uctypes.ARRAY, 4 | uctypes.UINT8),\n    \"EI_DATA\": 0x5 | uctypes.UINT8,\n    \"e_machine\": 0x12 | uctypes.UINT16,\n}\n\n# \"f\" is an ELF file opened in binary mode\nbuf = f.read(uctypes.sizeof(ELF_HEADER, uctypes.LITTLE_ENDIAN))\nheader = uctypes.struct(uctypes.addressof(buf), ELF_HEADER, uctypes.LITTLE_ENDIAN)\nassert header.EI_MAG == b\"\\x7fELF\"\nassert header.EI_DATA == 1, \"Oops, wrong endianness. Could retry with uctypes.BIG_ENDIAN.\"\nprint(\"machine:\", hex(header.e_machine))\n\n\n# Example 2: In-memory data structure, with pointers\nCOORD = {\n    \"x\": 0 | uctypes.FLOAT32,\n    \"y\": 4 | uctypes.FLOAT32,\n}\n\nSTRUCT1 = {\n    \"data1\": 0 | uctypes.UINT8,\n    \"data2\": 4 | uctypes.UINT32,\n    \"ptr\": (8 | uctypes.PTR, COORD),\n}\n\n# Suppose you have address of a structure of type STRUCT1 in \"addr\"\n# uctypes.NATIVE is optional (used by default)\nstruct1 = uctypes.struct(addr, STRUCT1, uctypes.NATIVE)\nprint(\"x:\", struct1.ptr[0].x)\n\n\n# Example 3: Access to CPU registers. Subset of STM32F4xx WWDG block\nWWDG_LAYOUT = {\n    \"WWDG_CR\": (0, {\n        # BFUINT32 here means size of the WWDG_CR register\n        \"WDGA\": 7 << uctypes.BF_POS | 1 << uctypes.BF_LEN | uctypes.BFUINT32,\n        \"T\": 0 << uctypes.BF_POS | 7 << uctypes.BF_LEN | uctypes.BFUINT32,\n    }),\n    \"WWDG_CFR\": (4, {\n        \"EWI\": 9 << uctypes.BF_POS | 1 << uctypes.BF_LEN | uctypes.BFUINT32,\n        \"WDGTB\": 7 << uctypes.BF_POS | 2 << uctypes.BF_LEN | uctypes.BFUINT32,\n        \"W\": 0 << uctypes.BF_POS | 7 << uctypes.BF_LEN | uctypes.BFUINT32,\n    }),\n}\n\nWWDG = uctypes.struct(0x40002c00, WWDG_LAYOUT)\n\nWWDG.WWDG_CFR.WDGTB = 0b10\nWWDG.WWDG_CR.WDGA = 1\nprint(\"Current counter:\", WWDG.WWDG_CR.T)\n```\n\n\n## 定义结构布局\n\n结构布局由“描述符”定义 - 一个Python字典，它将字段名称编码为键，以及将它们作为关联值访问它们所需的其他属性：\n\n```python\n{\n    \"field1\": <properties>,\n    \"field2\": <properties>,\n    ...\n}\n```\n\n目前，`uctypes`需要明确规定每个字段的偏移量。 从结构开始以字节为单位给出偏移量。\n\n以下是各种字段类型的编码示例：\n\n* 标量类型:\n\n```python\n\"field_name\": offset | uctypes.UINT32\n```\n\n换句话说，该值是标量类型标识符，与结构起始处的字段偏移量（以字节为单位）进行或运算。\n\n* 递归结构：\n\n```python\n\"sub\": (offset, {\n    \"b0\": 0 | uctypes.UINT8,\n    \"b1\": 1 | uctypes.UINT8,\n})\n```\n\n即，值是2元组，其第一个元素是偏移量，第二个是结构描述符字典（注意：递归描述符中的偏移量与其定义的结构相关）。 当然，递归结构不仅可以通过文字字典指定，还可以通过按名称引用结构描述符字典（前面定义）来指定。\n\n* 原始类型的数组：\n\n```python\n\"arr\": (offset | uctypes.ARRAY, size | uctypes.UINT8),\n```\n\n即，值是一个2元组，其第一个元素是ARRAY标志与偏移进行OR运算，第二个是标量元素类型ORed数组中的元素数。\n\n*聚合类型数组：\n\n```python\n\"arr2\": (offset | uctypes.ARRAY, size, {\"b\": 0 | uctypes.UINT8}),\n```\n\n即，值是一个3元组，其第一个元素是ARRAY标志，与偏移相关，第二个是数组中的元素数，第三个是元素类型的描述符。\n\n*指向原始类型的指针：\n\n```python\n\"ptr\": (offset | uctypes.PTR, uctypes.UINT8),\n```\n\n即，值是2元组，其第一个元素是PTR标志与偏移进行OR运算，第二个元素是标量元素类型。\n\n*指向聚合类型的指针：\n\n```python\n\"ptr2\": (offset | uctypes.PTR, {\"b\": 0 | uctypes.UINT8}),\n```\n\n即，值是2元组，其第一个元素是PTR标志与偏移量进行OR运算，第二个元素是指向的类型的描述符。\n\n*比特场：\n\n```python\n\"bitf0\": offset | uctypes.BFUINT16 | lsbit << uctypes.BF_POS | bitsize << uctypes.BF_LEN,\n```\n\n即，value是一种包含给定位域的标量值（类型名称类似于标量类型，但前缀为“BF”），与包含位域的标量值的偏移进行OR运算，并进一步与位位置和位长度的值进行“或”运算。标量值内的位域，分别移位BF_POS和BF_LEN位。位域位置从标量的最低有效位（具有0的位置）开始计数，并且是字段的最右位的数量（换句话说，它是标量需要向右移位的位数）提取位域）。\n\n在上面的例子中，首先在偏移0处提取UINT16值（当访问硬件寄存器时，这个细节可能很重要，需要特定的访问大小和对齐），然后是最右边的位是此UINT16的lsbit位的位域，以及length是bitsize bits，将被提取。例如，如果lsbit为0且bitsize为8，那么它将有效地访问UINT16的最低有效字节。\n\n注意，位域操作独立于目标字节字节序，特别是上面的例子将在小端和大端结构中访问UINT16的最低有效字节。但它取决于最低有效位被编号为0.某些目标可能在其原生ABI中使用不同的编号，但是“uctypes”总是使用上述的标准化编号。\n\n## 模块内容\n\n### class uctypes.struct(addr, descriptor, layout_type=NATIVE)\n\n基于内存中的结构地址，描述符（编码为字典）和布局类型（参见下文）来实例化“外部数据结构”对象。\n\n### uctypes.LITTLE_ENDIAN\n\nlittle-endian压缩结构的布局类型。 （打包意味着每个字段占用描述符中定义的字节数，即对齐为1）。\n\n### uctypes.BIG_ENDIAN\n\nbig-endian压缩结构的布局类型。\n\n### uctypes.NATIVE\n\n本机结构的布局类型 - 数据字节顺序和对齐符合运行MicroPython的系统的ABI。\n\n### uctypes.sizeof(struct, layout_type=NATIVE)\n\n以字节为单位返回数据结构的大小。 struct参数可以是结构类，也可以是特定的实例化结构对象（或其聚合字段）。\n\n### uctypes.addressof(obj)\n\n返回对象的地址。 参数应该是字节，字节数组或其他支持缓冲区协议的对象（该缓冲区的地址实际上是返回的）。\n\n### uctypes.bytes_at(addr, size)\n\n以给定的地址和大小捕获内存作为bytes对象。 由于bytes对象是不可变的，因此内存实际上是复制并复制到bytes对象中，因此如果内存内容稍后更改，则创建的对象将保留原始值。\n\n### uctypes.bytearray_at(addr, size)\n\n将给定地址和大小的内存捕获为bytearray对象。 与上面的bytes_at（）函数不同，内存是通过引用捕获的，因此它也可以写入，并且您将在给定的内存地址访问当前值。\n\n### uctypes.UINT8 uctypes.INT8 uctypes.UINT16 uctypes.INT16 uctypes.UINT32 uctypes.INT32 uctypes.UINT64 uctypes.INT64\n\n结构描述符的整数类型。 提供了8,16,32和64位类型的常量，包括有符号和无符号。\n\n### uctypes.FLOAT32 uctypes.FLOAT64\n\n结构描述符的浮点类型。\n\n### uctypes.VOID\n\nVOID是UINT8的别名，用于方便地定义C的void指针：（uctypes.PTR，uctypes.VOID）。\n\n### uctypes.PTR uctypes.ARRAY\n\n输入指针和数组的常量。 请注意，结构没有显式常量，它是隐式的：没有PTR或ARRAY标志的聚合类型是一种结构。\n\n## 结构描述符和实例化结构对象\n\n给定结构描述符字典及其布局类型，您可以使用`uctypes.struct（）`构造函数在给定的内存地址实例化特定的结构实例。 内存地址通常来自以下来源：\n\n*访问裸机系统上的硬件寄存器时的预定义地址。 在特定MCU / SoC的数据表中查找这些地址。\n\n*作为调用某些FFI（外部函数接口）函数的返回值。\n\n*来自uctypes.addressof（），当您想要将参数传递给FFI函数时，或者访问I / O的某些数据（例如，从文件或网络套接字读取的数据）。\n\n\n## 结构对象\n\n结构对象允许使用标准点表示法访问单个字段：`my_struct.substruct1.field1。如果字段是标量类型，获取它将产生与字段中包含的值对应的原始值（Python整数或浮点数）。 标量字段也可以分配给。\n\n如果某个字段是一个数组，则可以使用标准的下标运算符[]访问其各个元素 - 同时读取和分配。\n\n如果一个字段是一个指针，它可以使用[0]语法解除引用（对应于C *运算符，尽管[0]也适用于C）。 还支持使用其他整数值（但是为0）订阅指针，其语义与C中相同。\n\n总而言之，访问结构字段通常遵循C语法，除了指针取消引用，当您需要使用[0]运算符而不是*时。\n\n## 限制\n\n\n* 访问非标量字段会导致分配中间对象以表示它们。这意味着应该特别注意布局在禁用内存分配时（例如从中断）需要访问的结构。建议如下：\n  * 避免访问嵌套结构。例如，代替mcu_registers.peripheral_a.register1，为每个外设定义单独的布局描述符，作为peripheral_a.register1进行访问。或者只缓存特定的外设：peripheral_a = mcu_registers.peripheral_a。如果寄存器由多个位域组成，则需要缓存对特定寄存器的引用：reg_a = mcu_registers.peripheral_a.reg_a。\n  * 避免使用其他非标量数据，如数组。例如，使用peripheral_a.register0而不是peripheral_a.register [0]。同样，另一种方法是缓存中间值，例如register0 = peripheral_a.register [0]。\n* `uctypes`模块支持的偏移范围是有限的。支持的确切范围被认为是实现细节，一般建议是将结构定义拆分为从几千字节到几十千字节的最大值。在大多数情况下，这是一种自然情况，例如，在一个结构中定义MCU的所有寄存器（扩展到32位地址空间）没有意义，而是通过外设块定义外设块。在某些极端情况下，您可能需要人工分割几个部分的结构（例如，如果在中间访问具有多兆字节数组的本机数据结构，尽管这将是非常合成的情况）。）"}, "/soft/maixpy/zh/api_reference/standard/gc.html": {"title": "gc – 内存回收", "content": "---\ntitle: gc – 内存回收\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: gc – 内存回收\n---\n\n\n\n该模块实现了相应CPython模块的子集，如下所述。有关更多信息，请参阅原始CPython文档：[gc](https://docs.python.org/3.5/library/gc.html#module-gc).\n\n## 函数\n\n### gc.enable()\n\n启用自动垃圾回收。\n\n### gc.disable()\n\n禁用自动垃圾回收。仍然可以分配堆内存，仍然可以使用 `gc.collect()` 手动启动垃圾收集。\n\n### gc.collect()\n\n运行垃圾回收。\n\n### gc.mem_alloc()\n\n返回分配的堆 RAM 的字节数。\n\n#### Difference to CPython\n\n此功能是 MicroPython 扩展。\n\n### gc.mem_free()\n\n返回可用堆RAM的字节数，如果堆剩余数量未知，则返回-1。\n\n#### 与CPython的区别\n\n此功能是MicroPython扩展。\n\n### gc.threshold([amount])\n\n设置或查询其他GC分配阈值。通常，仅当不能满足新分配时，即在内存不足（OOM）条件下才触发集合。如果调用此函数，除了OOM之外，每次分配了大量字节后都会触发一个集合（总共，因为上一次分配了这么多的字节）。 amount通常被指定为小于完整堆大小，意图在堆耗尽之前触发集合，并希望早期集合可以防止过多的内存碎片。这是一种启发式度量，其效果因应用程序而异，以及量参数的最佳值。\n\n不带参数调用函数将返回阈值的当前值。值-1表示禁用的分配阈值。\n\n#### 与CPython的区别\n\n此函数是MicroPython扩展。 CPython有一个类似的函数 - `set_threshold()`，但是由于不同的GC实现，它的签名和语义是不同的。"}, "/soft/maixpy/zh/api_reference/standard/usocket.html": {"title": "usocket – 套接字模块", "content": "---\ntitle: usocket – 套接字模块\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: usocket – 套接字模块\n---\n\n\n该模块实现了相应CPython模块的子集，如下所述。有关更多信息，请参阅原始CPython文档: [socket](https://docs.python.org/3.5/library/socket.html#module-socket).\n\n该模块提供对BSD套接字接口的访问\n\n> **与CPython的区别** \n\n> 为了提高效率和一致性，MicroPython中的套接字对象直接实现了`stream`（类文件）接口。在CPython中，您需要使用`makefile（）`方法将套接字转换为类文件对象。 MicroPython仍支持此方法（但是无操作），因此在与CPython兼容的情况下，请务必使用它。\n\n## 套接字地址格式\n\n`usocket`模块的本机套接字地址格式是getaddrinfo函数返回的不透明数据类型，必须用它来解析文本地址（包括数字地址）：\n\n```python\nsockaddr = usocket.getaddrinfo('www.micropython.org', 80)[0][-1]\n# You must use getaddrinfo() even for numeric addresses\nsockaddr = usocket.getaddrinfo('127.0.0.1', 80)[0][-1]\n# Now you can use that address\nsock.connect(addr)\n```\n\n使用`getaddrinfo`是最有效的（在内存和处理能力方面），而且也是使用地址的可移植方式。\n\n但是，`socket`模块（注意与此处描述的本机MicroPython`usocket`模块的区别）提供了与CPython兼容的方式来使用元组指定地址，如下所述。请注意，取决于`MicroPython端口`，可以在内置或需要从`micropython-lib`安装套接字模块（如“MicroPython Unix端口”的情况），并且某些端口仍然只接受元组中的数字地址格式，并要求使用`getaddrinfo`函数来解析域名。\n\n总的来说：\n\n* 编写便携式应用程序时始终使用`getaddrinfo`。\n* 如果您的端口支持快速黑客和交互式使用，则下面描述的元组地址可用作快捷方式。\n\n`socket`模块的元组地址格式：\n\n* IPv4：（ipv4_address，port），其中ipv4_address是带有点符号数字IPv4地址的字符串，例如， “8.8.8.8”，端口号和整数端口号在1-65535范围内。请注意，域名不被接受为ipv4_address，应首先使用usocket.getaddrinfo（）解析它们。\n\n* IPv6：（ipv6_address，port，flowinfo，scopeid），其中ipv6_address是带冒号数字IPv6地址的字符串，例如： `“2001：db8 :: 1”`，port是1-65535范围内的整数端口号。 flowinfo必须为0. scopeid是链路本地地址的接口范围标识符。请注意，域名不被接受为ipv6_address，应首先使用`usocket.getaddrinfo（）`解析它们。 IPv6支持的可用性取决于`MicroPython端口`。\n\n## 方法\n\n### usocket.socket(af=AF_INET, type=SOCK_STREAM, proto=IPPROTO_TCP)\n\n使用给定的地址系列，套接字类型和协议号创建一个新套接字。请注意，在大多数情况下不需要指定proto（不推荐使用，因为一些MicroPython端口可能会省略`IPPROTO_ *`常量）。相反，type参数将自动选择所需的协议：\n\n```python\n# Create STREAM TCP socket\nsocket(AF_INET, SOCK_STREAM)\n# Create DGRAM UDP socket\nsocket(AF_INET, SOCK_DGRAM)\n```\n\n### usocket.getaddrinfo(host, port, af=0, type=0, proto=0, flags=0)\n\n将 host / port 参数转换为5元组序列，其中包含用于创建连接到该服务的套接字的所有必要参数。参数af，type和proto（与`socket（）`函数具有相同的含义）可用于过滤返回哪种地址。如果未指定参数或为零，则可以返回所有地址组合（需要在用户端进行过滤）。\n\n生成的5元组列表具有以下结构：\n\n```python\n(family, type, proto, canonname, sockaddr)\n```\n\n以下示例显示如何连接到给定的URL：\n\n```python\ns = usocket.socket()\n# This assumes that if \"type\" is not specified, an address for\n# SOCK_STREAM will be returned, which may be not true\ns.connect(usocket.getaddrinfo('www.micropython.org', 80)[0][-1])\n```\n\n\n建议使用过滤参数：\n\n```python\ns = usocket.socket()\n# Guaranteed to return an address which can be connect'ed to for\n# stream operation.\ns.connect(usocket.getaddrinfo('www.micropython.org', 80, 0, SOCK_STREAM)[0][-1])\n```\n\n> 与CPython的区别\n\n> 如果此函数出错，CPython会引发`socket.gaierror`异常（`OSError`子类）。 MicroPython没有`socket.gaierror`并直接引发OSError。请注意，`getaddrinfo（）`的错误号形成一个单独的命名空间，可能与`uerrno`模块中的错误号不匹配。为了区分`getaddrinfo（）`错误，它们用负数表示，而标准系统错误是正数（错误号可以使用来自异常对象的`e.args [0]`属性访问）。使用负值是临时细节，可能在将来发生变化。\n\n### usocket.inet_ntop(af, bin_addr)\n\n将给定地址族af的二进制网络地址bin_addr转换为文本表示：\n\n\n```python\n>>> usocket.inet_ntop(usocket.AF_INET, b\"\\x7f\\0\\0\\1\")\n'127.0.0.1'\n```\n\n\n### usocket.inet_pton(af, txt_addr)\n\n将给定地址族af的文本网络地址txt_addr转换为二进制表示：\n\n```python\n>>> usocket.inet_pton(usocket.AF_INET, \"1.2.3.4\")\nb'\\x01\\x02\\x03\\x04'\n```\n\n\n## 常量\n\n### usocket.AF_INET usocket.AF_INET6\n\n解决家庭类型。可用性取决于特定的`MicroPython端口`。\n\n### usocket.SOCK_STREAM usocket.SOCK_DGRAM\n\n套接字类型。\n\n### usocket.IPPROTO_UDP usocket.IPPROTO_TCP\n\nIP协议号。可用性取决于特定的`MicroPython端口`。注意，在调用`usocket.socket（）`时不需要指定它们，因为`SOCK_STREAM`套接字类型会自动选择`IPPROTO_TCP`和`SOCK_DGRAM`  - `IPPROTO_UDP`。因此，这些常量的唯一实际用途是作为`setsockopt（）`的参数。\n\n### usocket.SOL_*\n\n套接字选项级别（`setsockopt（）`的参数）。确切的库存取决于`MicroPython端口`。\n\n### usocket.SO_*\n\n套接字选项（`setsockopt（）`的参数）。确切的库存取决于`MicroPython端口`。\n\n\n## 类 socket\n\n### 方法\n\n#### socket.close()\n\n标记套接字已关闭并释放所有资源。一旦发生这种情况，套接字对象上的所有未来操作都将失败。如果协议支持，远程端将接收EOF指示。\n\n套接字在被垃圾收集时会自动关闭，但建议你在完成它们之后立即“关闭”它们。\n\n#### (maixpy 未实现)socket.bind(address)\n\n将套接字绑定到地址。套接字必须尚未绑定。\n\n#### (maixpy 未实现)socket.listen([backlog])\n\n使服务器接受连接。如果指定了积压，则必须至少为0（如果低，则将其设置为0）;并指定在拒绝新连接之前系统将允许的未接受连接数。如果未指定，则选择默认的合理值。\n\n#### (maixpy 未实现)socket.accept()\n\n接受连接。套接字必须绑定到一个地址并侦听连接。返回值是一对（conn，address），其中conn是可用于在连接上发送和接收数据的新套接字对象，address是绑定到连接另一端的套接字的地址。\n\n#### socket.connect(address)\n\n连接到地址处的远程套接字。\n\n#### socket.send(bytes)\n\n将数据发送到套接字。套接字必须连接到远程套接字。返回发送的字节数，可能小于数据长度（“短写”）。\n\n#### socket.sendall(bytes)\n\n将所有数据发送到套接字。套接字必须连接到远程套接字。与`send（）`不同，此方法将尝试通过连续发送数据块来发送所有数据。\n\n此方法在非阻塞套接字上的行为未定义。因此，在MicroPython上，建议使用`write（）`方法，它具有相同的“无短写入”策略来阻塞套接字，并将返回在非阻塞套接字上发送的字节数。\n\n#### socket.recv(bufsize)\n\n从套接字接收数据。返回值是表示接收数据的字节对象。一次接收的最大数据量由bufsize指定。\n\n#### socket.sendto(bytes, address)\n\n将数据发送到套接字。套接字不应连接到远程套接字，因为目标套接字由地址指定。\n\n#### socket.recvfrom(bufsize)\n\n从套接字接收数据。返回值是一对（字节，地址），其中bytes是表示接收数据的字节对象，address是发送数据的套接字的地址。\n\n#### socket.setsockopt(level, optname, value)\n\n设置给定套接字选项的值。所需的符号常量在套接字模块中定义（SO_ *等）。该值可以是整数或表示缓冲区的类字节对象。\n\n\n#### socket.settimeout(value)\n\n注意：并非每个端口都支持此方法，请参阅下文。\n\n阻止套接字操作设置超时。 value参数可以是表示秒的非负浮点数，也可以是None。如果给出非零值，则如果在操作完成之前已经过了超时时间值，则后续的套接字操作将引发“OSError”异常。如果给出零，则套接字处于非阻塞模式。如果给出None，则套接字处于阻塞模式。\n\n并非每个“MicroPython端口”都支持此方法。更便携和通用的解决方案是使用`uselect.poll`对象。这允许同时等待多个对象（而不仅仅是在套接字上，而是在支持轮询的通用`stream`对象上）。例：\n\n```python\n# Instead of:\ns.settimeout(1.0)  # time in seconds\ns.read(10)  # may timeout\n\n# Use:\npoller = uselect.poll()\npoller.register(s, uselect.POLLIN)\nres = poller.poll(1000)  # time in milliseconds\nif not res:\n    # s is still not ready for input, i.e. operation timed out\n```\n\n> 与CPython的区别\n\n> CPython在超时的情况下引发`socket.timeout`异常，这是一个OSError子类。 MicroPython直接引发了一个`OSError`。如果你使用`除了OSError`：来捕获异常，你的代码将在MicroPython和CPython中都有效。\n\n#### socket.setblocking(flag)\n\n设置套接字的阻塞或非阻塞模式：如果flag为false，则套接字设置为非阻塞，否则设置为阻塞模式。\n\n这个方法是某些`settimeout（）`调用的简写：\n\n`sock.setblocking(True)` 相当于`sock.settimeout(None)`\n`sock.setblocking(False)` i相当于 `sock.settimeout(0)`\n\n#### socket.makefile(mode='rb', buffering=0)\n\n返回与套接字关联的文件对象。确切的返回类型取决于给makefile（）的参数。支持仅限于二进制模式（'rb'，'wb'和'rwb'）。 CPython的参数：不支持编码，错误和换行符。\n\n> 与CPython的区别\n\n> 由于MicroPython不支持缓冲流，因此忽略缓冲参数的值，并将其视为0（无缓冲）。\n\n> 与CPython的区别\n\n> 关闭makefile（）返回的文件对象也将关闭原始套接字。\n\n#### socket.read([size])\n\n从插槽中读取大小字节。返回一个字节对象。如果没有给出大小，它会读取插座中可用的所有数据，直到EOF;因此，在套接字关闭之前，该方法不会返回。此函数尝试读取所请求的数据（没有“短读取”）。但是，对于非阻塞套接字，这可能是不可能的，然后将返回更少的数据。\n\n#### socket.readinto(buf[, nbytes])\n\n将字节读入buf。如果指定了nbytes，则最多读取多个字节。否则，最多读取len（buf）字节。就像read（）一样，此方法遵循“无短读”策略。\n\n返回值：读取并存储到buf中的字节数。\n\n#### socket.readline()\n\n读一行，以换行符结尾。\n\n返回值：读取的行。\n\n\n#### socket.write(buf)\n\n将字节缓冲区写入套接字。此函数将尝试将所有数据写入套接字（无“短写”）。但是，对于非阻塞套接字，这可能是不可能的，并且返回值将小于buf的长度。\n\n返回值：写入的字节数。\n\n#### exception usocket.error\n\nMicroPython没有此异常。\n\n> 与CPython的区别\n\n> CPython曾经有一个`socket.error`异常现在已被弃用，它是`OSError`的别名。在MicroPython中，直接使用`OSError`。\n\n\n\n\n## 例程\n\n### 例程 1： 下载图片并显示\n\n> 注意需要设置 WiFi SSID 和 密码\n\n```python\nimport socket\nimport network\nimport gc\nimport os\nimport lcd, image\n\nfm.register(board_info.WIFI_RX,fm.fpioa.UART2_TX)\nfm.register(board_info.WIFI_TX,fm.fpioa.UART2_RX)\nuart = machine.UART(machine.UART.UART2,115200,timeout=1000, read_buf_len=4096)\nnic=network.ESP8285(uart)\nnic.connect(\"Sipeed_2.4G\",\"------\")\n\nsock = socket.socket()\naddr = socket.getaddrinfo(\"dl.sipeed.com\", 80)[0][-1]\nsock.connect(addr)\nsock.send('''GET /MAIX/MaixPy/assets/Alice.bmp HTTP/1.1\nHost: dl.sipeed.com\ncache-control: no-cache\n\n''')\n\nimg = b\"\"\nsock.settimeout(5)\nwhile True:\n    data = sock.recv(4096)\n    if len(data) == 0:\n        break\n    print(\"rcv:\", len(data))\n    img = img + data\n\nprint(len(img))\nimg = img[img.find(b\"\\r\\n\\r\\n\")+4:]\nprint(len(img))\nprint(\"save to /sd/Alice.bmp\")\nf = open(\"/sd/Alice.bmp\",\"wb\")\nf.write(img)\nf.close()\nprint(\"save ok\")\nprint(\"display\")\nimg = image.Image(\"/sd/Alice.bmp\")\nlcd.init()\nlcd.display(img)\n```\n\n\n\n### 例程 2： 发送图片\n\n```python\n\nimport os\nimport socket\nimport network\nimport gc\n\nfm.register(board_info.WIFI_RX,fm.fpioa.UART2_TX)\nfm.register(board_info.WIFI_TX,fm.fpioa.UART2_RX)\nuart = machine.UART(machine.UART.UART2,115200,timeout=1000, read_buf_len=4096)\nnic=network.ESP8285(uart)\nnic.connect(\"Sipeed_2.4G\",\"-------\")\n\naddr = (\"192.168.0.183\", 3456)\nsock = socket.socket()\nsock.connect(addr)\nsock.settimeout(5)\n\nf = open(\"/sd/Alice.bmp\",\"rb\")\nwhile True:\n    img = f.read(2048)\n    if not img or (len(img) == 0):\n        break\n    sock.send(img)\nf.close()\nsock.close()\n```"}, "/soft/maixpy/zh/api_reference/machine/uart.html": {"title": "machine.UART", "content": "---\ntitle: machine.UART\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: machine.UART\n---\n\n\nuart 模块主要用于驱动开发板上的异步串口，可以自由对 uart 进行配置。k210 一共有3个 uart，每个 uart 可以进行自由的引脚映射。\n\n## 构造\n\n### 引脚映射\n\n在使用 uart 前，我们需要使用 fm 来对芯片引脚进行映射和管理。如下所示，将 PIN10 设置为 uart2 的发送引脚，PIN11 设置为 uart2 的接收引脚\n```\nfm.register(board_info.PIN10,fm.fpioa.UART2_TX)\nfm.register(board_info.PIN11,fm.fpioa.UART2_RX)\n```\n\n### 构造函数\n\n```\nuart = machine.UART(uart,baudrate,bits,parity,stop,timeout, read_buf_len)\n```\n\n通过指定的参数新建一个 UART 对象\n\n#### 参数\n\n* `uart` UART 号，使用指定的 UART，可以通过 `machine.UART.` 按tab键来补全\n* `baudrate`: UART 波特率\n* `bits`: UART 数据宽度，支持 `5/6/7/8` (默认的 REPL 使用的串口（UARTHS）只支持 8 位模式)， 默认 `8`\n* `parity`: 奇偶校验位，支持 `None`, `machine.UART.PARITY_ODD`,  `machine.UART.PARITY_EVEN` （默认的 REPL 使用的串口（UARTHS）只支持 None）， 默认 `None`\n* `stop`: 停止位， 支持 `1`， `1.5`, `2`， 默认 `1`\n* `timeout`: 串口接收超时时间\n* `read_buf_len`： 串口接收缓冲，串口通过中断来接收数据，如果缓冲满了，将自动停止数据接收\n\n#### 返回值\n\n* UART对象\n\n## 方法\n\n### init\n\n用于初始化 uart，一般在构造对象时已经初始化，这里用在重新初始化 uart\n```\nuart.init(baudrate,bits,parity,stop,timeout, read_buf_len)\n```\n\n#### 参数\n\n同构造函数，但不需要第一个UART号\n\n#### 返回值\n\n无\n\n### read\n\n用于读取串口缓冲中的数据\n\n```\nuart.read(num)\n```\n#### 参数\n\n* `num`: 读取字节的数量，一般填入缓冲大小，如果缓冲中数据的数量没有 `num` 大，那么将只返回缓冲中剩余的数据\n\n#### 返回值\n\n* `bytes`类型的数据\n\n### readline\n\n用于读取串口缓冲数据的一行\n\n```\nuart.readline(num)\n```\n* `num`: 读取行的数量\n\n#### 返回值\n\n*`bytes`类型的数据\n\n\n### write\n\n用于使用串口发送数据\n\n```\nuart.write(buf)\n```\n#### 参数\n\n* `buf`: 需要发送到数据\n\n#### 返回值\n\n* 写入的数据量\n\n### deinit\n\n注销 UART 硬件，释放占用的资源\n\n```\nuart.deinit()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n### repl_uart()\n\n获取用于 REPL 的串口对象\n\n#### 返回值\n\n用于 REPL 的串口对象， 默认初始化位 `115200 8 N 1`\n\n\n## 例程\n\n\n### 例程 1\n\n在运行里程之前，请确认 `PIN4` 已经连接到 `PIN10`， `PIN3` 已经连接到 `PIN11`\n\n运行程序后，可以在终端看到 `baudrate:115200 bits:8 parity:0 stop:0 ---check Successfully` 的打印信息\n\n> 以下例程对于Bit开发是不能直接进行使用，需要修改对应可用的PIN脚，可自行尝试\n\n```python\nfrom fpioa_manager import fm\nfrom machine import UART\nfrom board import board_info\nfrom fpioa_manager import fm\n\n# maixduino board_info PIN10/PIN11/PIN12/PIN13 or other hardware IO 10/11/4/3\nfm.register(board_info.PIN10, fm.fpioa.UART1_TX, force=True)\nfm.register(board_info.PIN11, fm.fpioa.UART1_RX, force=True)\nfm.register(board_info.PIN3, fm.fpioa.UART2_TX, force=True)\nfm.register(board_info.PIN4, fm.fpioa.UART2_RX, force=True)\n\nuart_A = UART(UART.UART1, 115200, 8, 0, 0, timeout=1000, read_buf_len=4096)\nuart_B = UART(UART.UART2, 115200, 8, 0, 0, timeout=1000, read_buf_len=4096)\n\nwrite_str = 'hello world'\nfor i in range(20):\n    uart_A.write(write_str)\n\n    read_data = uart_B.read()\n    if read_data:\n        read_str = read_data.decode('utf-8')\n        print(\"string = \", read_str)\n        if read_str == write_str:\n            print(\"baudrate:115200 bits:8 parity:0 stop:0 ---check Successfully\")\n                \n\nuart_A.deinit()\nuart_B.deinit()\ndel uart_A\ndel uart_B\n\n```\n\n### 例程 2\n\nAT模块串口\n> 以下例程对于Bit开发是不能直接进行使用，需要修改对应可用的PIN脚，可自行尝试\n\n\n```python\nfm.register(board_info.WIFI_RX,fm.fpioa.UART2_TX)\nfm.register(board_info.WIFI_TX,fm.fpioa.UART2_RX)\nuart = machine.UART(machine.UART.UART2,115200,timeout=1000, read_buf_len=4096)\n```\n### 例程 3\n\n修改 REPL 串口波特率\n> 以下例程对于Bit开发是不能直接进行使用，需要修改对应可用的PIN脚，可自行尝试\n\n\n```python\nfrom machine import UART\nrepl = UART.repl_uart()\nrepl.init(1500000, 8, None, 1, read_buf_len=2048)\n```\n\n### 例程 3\n\n修改 REPL 串口\n> 以下例程对于Bit开发是不能直接进行使用，需要修改对应可用的PIN脚，可自行尝试\n\n\n```python\nfrom machine import UART\n\nfm.register(board_info.PIN15,fm.fpioa.UART1_TX)\nfm.register(board_info.PIN17,fm.fpioa.UART1_RX)\nuart = machine.UART(UART.UART1, 115200)\nUART.set_repl_uart(uart)\n```"}, "/soft/maixpy/zh/api_reference/machine/spi.html": {"title": "machine.SPI", "content": "---\ntitle: machine.SPI\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: machine.SPI\n---\n\n\nSPI（Serial Peripheral Interface） 是一个同步串行协议，由主机和从机组成。\n\n标准4线模式由 SCK（SCLK）， CS（片选）， MOSI， MISO 4条线连接主从机\n\n在 K210 上， SPI 有一下特征：\n\n* 共有 4 个 SPI 设备， 其中 SPI0 、SPI1、 SPI3 只能工作在主机模式下， SPI2 只能工作在从机模式时下， 在 MaixPy 上， SPI3 已经用来连接了 SPI Flash 作为保留硬件资源。\n* 支持 1/2/4/8 线全双工模式， 在 MaixPy 中， 目前只支持标准（摩托罗拉）4线全双工模式（即 SCK， MOSI， MISO， CS 四个引脚）\n* 最高传输速率 45M：1/2主频，约 200Mbps\n* 支持 DMA\n* 4个可配置任意引脚的硬件片选\n\n\n\n## 构造函数\n\n```python\nspi = machine.SPI(id, mode=SPI.MODE_MASTER, baudrate=500000, polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck, mosi, miso, cs0, cs1, cs2, cs3)\n```\n\n通过指定的参数新建一个 SPI 对象\n\n### 参数\n\n* `id`： SPI ID， 取值范围[0,4]， 目前只支持 0 和 1 、4 ， 并且只能是主机模式， 2 只能作为从机，目前未实现， 3 保留, 4 使用软模拟 SPI（.SPI_SOFT）\n* `mode`： SPI  模式， `MODE_MASTER` 或者`MODE_MASTER_2`或者`MODE_MASTER_4`或者`MODE_MASTER_8`或者`MODE_SLAVE`， 目前只支持`MODE_MASTER`\n* `baudrate`： SPI 波特率（频率）\n* `polarity`： 极性， 取值为 0 或 1， 表示 SPI 在空闲时的极性， 0 代表低电平， 1 代表高电平\n* `phase`： 相， 取值位 0 或 1， 表示在时钟的第一个还是第二个跳变沿采集数据， 0 表示第一个， 1 表示第二个\n* `bits`： 数据宽度， 默认值为8， 取值范围[4,32]\n* `firstbit`： 指定传输采用 MSB 还是 LSB 顺序传输， 默认 `SPI.MSB`\n* `sck`: SCK（时钟）引脚， 可直接传引脚数值，取值范围：[0,47]。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n* `mosi`: MOSI（主机输出） 引脚， 可直接传引脚数值，取值范围：[0,47]。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n* `miso`: MISO（主机输入） 引脚， 可直接传引脚数值，取值范围：[0,47]。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n* `cs0`: CS0（片选） 引脚， 可直接传引脚数值，取值范围：[0,47]。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n* `cs1`: CS1（片选） 引脚， 可直接传引脚数值，取值范围：[0,47]。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n* `cs2`: CS2（片选） 引脚， 可直接传引脚数值，取值范围：[0,47]。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n* `cs3`: CS3（片选） 引脚， 可直接传引脚数值，取值范围：[0,47]。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n* `d0~d7`： 数据引脚， 在非标准4线模式中使用，目前保留。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n\n## 方法\n\n### init\n\n类似构造函数\n\n```python\nspi.init(id, mode=SPI.MODE_MASTER, baudrate=500000, polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck, mosi, miso, cs0)\n```\n\n#### 参数\n\n与构造函数相同\n\n\n#### 返回值\n\n无\n\n\n### read\n\n读取数据\n\n```python\nspi.read(nbytes, write=0x00, cs=SPI.CS0)\n```\n\n#### 参数\n\n* `nbytes`： 需要读取的长度\n* `cs`： 选择片选引脚， 在初始化时已经为`cs0`~`cs3`设置了引脚，这里只需要选择`SPI.CS0`~`SPI.CS3`即可，默认为`SPI.CS0`\n* `write`： 因为是全双工，设置在读取时`MOSI`引脚的值，默认为`0x00`，即始终为低电平\n\n\n#### 返回值\n\n`bytes`类型的数据\n\n\n### readinto\n\n读取数据，并放到指定变量中\n\n```python\nspi.readinto(buf, write=0x00, cs=SPI.CS0)\n```\n\n#### 参数\n\n\n* `buf`： `bytearray` 类型， 定义了长度，读取完成后数据保存在此\n* `cs`： 选择片选引脚， 在初始化时已经为`cs0`~`cs3`设置了引脚，这里只需要选择`SPI.CS0`~`SPI.CS3`即可，默认为`SPI.CS0`\n* `write`： 因为是全双工，设置在读取时`MOSI`引脚的值，默认为`0x00`，即始终为低电平\n\n\n#### 返回值\n\n无\n\n### write\n\n发送数据\n\n```python\nspi.write(buf, cs=SPI.CS0)\n```\n\n#### 参数\n\n* `buf`： `bytearray` 类型， 定义了数据及长度\n* `cs`： 选择片选引脚， 在初始化时已经为`cs0`~`cs3`设置了引脚，这里只需要选择`SPI.CS0`~`SPI.CS3`即可，默认为`SPI.CS0`\n\n#### 返回值\n\n无\n\n### write_readinto\n\n发送数据，同时读取数据到变量，即全双工\n\n```python\nspi.write(write_buf, read_buf, cs=SPI.CS0)\n```\n\n#### 参数\n\n* `write_buf`： `bytearray` 类型， 定义了需要发送的数据及长度\n* `read_buf`： `bytearray` 类型， 定义了接收数据存放的位置\n* `cs`： 选择片选引脚， 在初始化时已经为`cs0`~`cs3`设置了引脚，这里只需要选择`SPI.CS0`~`SPI.CS3`即可，默认为`SPI.CS0`\n\n#### 返回值\n\n无\n\n### deinit/\\__del\\__\n\n注销 SPI，释放硬件，关闭 SPI 时钟\n\n```python\nspi.deinit()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n#### 例子\n\n```python\nspi.deinit()\n```\n或者\n```\ndel spi\n```\n\n## 常量\n\n* `SPI0`: SPI 0\n* `SPI1`: SPI 1\n* `SPI2`: SPI 2\n* `MODE_MASTER`: 作为主机模式\n* `MODE_MASTER_2`: 作为主机模式\n* `MODE_MASTER_4`: 作为主机模式\n* `MODE_MASTER_8`: 作为主机模式\n* `MODE_SLAVE`: 作为从机模式\n* `MSB`： MSB， 即先发送高位或高字节\n* `LSB`： LSB， 即先发送低位或者低字节\n* `CS0`： 片选0\n* `CS1`： 片选1\n* `CS2`： 片选2\n* `CS3`： 片选3\n\n\n## 例程\n\n### 例程 1： 基本读写\n\n```python\nfrom machine import SPI\n\nspi = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=10000000, polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=28, mosi=29, miso=30, cs0=27)\nw = b'1234'\nr = bytearray(4)\nspi.write(w)\nspi.write(w, cs=SPI.CS0)\nspi.write_readinto(w, r)\nspi.read(5, write=0x00)\nspi.readinto(r, write=0x00)\n```"}, "/soft/maixpy/zh/api_reference/machine/wdt.html": {"title": "machine.WDT", "content": "---\ntitle: machine.WDT\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: machine.WDT\n---\n\n\nMaixPy 的 WDT 看门狗模块，用于在应用程序崩溃且最终进入不可恢复状态时重启系统。一旦开始，当硬件运行期间没有定期进行喂狗（feed）就会在超时后自动复位。\n\n## 构造函数\n\n```python\nfrom machine import WDT\nwdt0 = WDT(id=1, timeout=4000, callback=on_wdt, context={})\n```\n\n通过指定的参数新建一个 WDT 对象\n\n### 参数\n\n* `id`: 这个看门狗对象必须初始化时必须指定 ID （0 ~ 2） 用于区分使用的看门狗。\n* `timeout`： 看门狗超时时间，单位为毫秒（ms）。\n* `callback`: （可选）可以在超时后执行的回调函数。\n* `context`： （可选）为回调函数传递的参数。\n\n## 方法\n\n### feed\n\n“喂养”看门狗，以防止其重置系统。该应用应将该调用用于合适位置，并确保只在验证一切正常运行后才“喂养”看门狗。\n\n```python\nwdt0.feed()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n### stop\n\n停止当前看门狗对象\n\n```python\nwdt0.stop()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n## 例程\n\n\n### 例程 1 （基础使用）\n\n喂一次狗后便不再喂狗使得系统复位\n\n```python\nimport time\nfrom machine import WDT\n\n# '''\n# test default wdt\nwdt0 = WDT(id=0, timeout=3000)\nprint('into', wdt0)\ntime.sleep(2)\nprint(time.ticks_ms())\n# 1.test wdt feed\nwdt0.feed()\ntime.sleep(2)\nprint(time.ticks_ms())\n# 2.test wdt stop\n# wdt0.stop()\n```\n\n### 例程 2 （进阶使用）\n\n在回调函数中喂狗，系统正常运行\n\n```python\nimport time\nfrom machine import WDT\ndef on_wdt(self):\n    print(self.context(), self)\n    self.feed()\n    ## release WDT\n    #self.stop()\n\n# test callback wdt\nwdt1 = WDT(id=1, timeout=4000, callback=on_wdt, context={})\nprint('into', wdt1)\ntime.sleep(2)\nprint(time.ticks_ms())\n# 1.test wdt feed\nwdt1.feed()\ntime.sleep(2)\nprint(time.ticks_ms())\n# 2.test wdt stop\n# wdt1.stop()\n# print('stop', wdt1)\n# 3.wait wdt work\nwhile True:\n    print('idle', time.ticks_ms())\n    time.sleep(1)\n```"}, "/soft/maixpy/zh/api_reference/machine/network.html": {"title": "network", "content": "---\ntitle: network\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: network\n---\n\n\n该模块用于初始化各种网卡驱动，网卡具有连接路由，断开路由，查看网卡连接信息，检查是否连接等功能。\n\n使用`WiFi`请确保已经接上了天线\n\n**esp8285**\n在部分开发板上带了 一个 使用`AT`方式交互的网卡模块，比如`esp8285`，与`k210`通过串口连接\n\n引脚`8`是使能脚，可以创建一个`GPIO`对象来控制它的高低电平来实现使能和失能，也可以用它复位（先低后高），复位后需要等待一小段时间才能操作，可以查看例程[network_espat.py](https://github.com/sipeed/MaixPy_scripts/blob/79a5485ec983e67bb8861305a52418b29e0dc205/network/network_espat.py)\n\n **esp32**\n目前在`MaixDuino`开发板中有一个 `esp32` 模块通过 `spi` 与`k210`相连，同时也有单独的`TF`插卡式模块\n\n\n## network.ESP8285(uart)\n\n构造一个`ESP8285`网卡对象，使用该方法需要传入一个`uart`对象，在`MaixPy`目前支持的`dock`和`GO`上，是使用AT指令模块作为`WiFi`。所以该`uart`对象是与`AT`模块通信的对象，可以查看`uart`模块例程\n\n调用此方法会初始化`ESP8285`， 如果失败会抛出异常\n\n\n### 参数\n\n* `uart`: 与AT模块通信的UART对象\n\n### 返回值\n\n* `ESP8285`: 网卡对象\n\n## ESP8285\n\n### connect(ssid, key)\n\n连接热点（AP/路由器）\n\n#### 参数\n\n* `ssid`: 热点的`SSID`\n* `key`: 热点的密码\n\n#### 返回值\n\n无， 如果发生错误会抛出异常\n\n### 2.2. ifconfig()\n\n查看wifi连接信息，目前network不支持设置网卡配置\n\n```\nnic.ifconfig()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n`tuple` 类型， 元素都是字符串：`(ip, netmask, gateway, dns_server, dhcp_server, mac, ssid)`， 如果没有查询到或者无效，值为`\"0\"`\n\n\n### isconnected()\n\n查看wifi是否连接\n\n```\nnic.isconnected()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n`True`: 已经连接\n`False`: 断开连接\n\n### disconnect()\n\n断开 wifi 连接\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n### scan()\n\n扫描周围的热点信息\n\n#### 参数\n\n无\n\n#### 返回值\n\n一个 `list`对象， 每个元素包含了一个字符串， 字符串来自`AT`模块的响应，内容和`esp8285`的`AT指令文档`所描述的相同，如下：\n`ecn, ssid, rssi,mac, channel, freq\toffset, freq cali, pairwise_cipher, group_cipher, bgn, wps`\n\n* `ecn`：加密⽅式\n  * 0：OPEN\n  * 1：WEP\n  * 2：WPA_PSK\n  * 3：WPA2_PSK\n  * 4：WPA_WPA2_PSK\n  * 5：WPA2_Enterprise（⽬前 AT 不⽀持连接这种加密 AP）\n* `ssid`：字符串参数，AP 的 SSID\n* `rssi`：信号强度\n* `mac`：字符串参数，AP 的 MAC 地址\n* `channel`：信道号\n* `freq offset`：AP 频偏，单位：kHz。此数值除以 2.4，可得到 ppm 值\n* `freq\tcali`：频偏校准值\n* `pairwise_cipher`:\n  * 0：CIPHER_NONE\n  * 1：CIPHER_WEP40\n  * 2：CIPHER_WEP104\n  * 3：CIPHER_TKIP\n  * 4：CIPHER_CCMP\n  * 5：CIPHER_TKIP_CCMP\n  * 6：CIPHER_UNKNOWN\n* `group_cipher`: 定义与 `pairwise_cipher` 相同\n* `bgn`: bit0 代表 b 模式; bit1 代表 g 模式; bit2 代表 n 模式\n         若对应 bit 为 1，表示该模式使能；若对应 bit 为 0，则该模式未使能。\n* `wps`：0，WPS 未使能；1，WPS 使能\n\n比如： \n```\ninfo_strs = ['4,\"ChinaNet-lot0\",-79,\"c8:50:e9:e8:21:3e\",1,-42,0,4,3,7,1', '4,\"TOPSTEP2G4\",-7\n0,\"f8:e7:1e:0d:0d:f8\",1,-57,0,4,4,7,0']\n```\n这看起来可能会比较奇怪，因为每个AP的信息都是一串字符，信息里面还有整型和字符串，字符串用双引号括起来的，所以拿到这个字符串后需要再次处理后再使用，比如：\n```python\ndef wifi_deal_ap_info(info):\n    res = []\n    for ap_str in info:\n        ap_str = ap_str.split(\",\")\n        info_one = []\n        for node in ap_str:\n            if node.startswith('\"'):\n                info_one.append(node[1:-1])\n            else:\n                info_one.append(int(node))\n        res.append(info_one)\n    return res\n\ninfo_strs = ['4,\"ChinaNet-lot0\",-79,\"c8:50:e9:e8:21:3e\",1,-42,0,4,3,7,1', '4,\"TOPSTEP2G4\",-70,\"f8:e7:1e:0d:0d:f8\",1,-57,0,4,4,7,0']\n\ninfo = wifi_deal_ap_info(info_strs)\nprint(info)\n```\n\n输出是：\n\n```\n[[4, 'ChinaNet-lot0', -79, 'c8:50:e9:e8:21:3e', 1, -42, 0, 4, 3, 7, 1], [4, 'TOPSTEP2G4', -70, 'f8:e7:1e:0d:0d:f8', 1, -57, 0, 4, 4, 7, 0]] \n```\n\n然后比如我们需要获得所有`AP`的`SSID`只需要使用\n```\nfor ap_info in info:\n    print(ap_info[1])\n```\n\n### enable_ap(ssid, key, chl=5, ecn=3)\n\n* **警告：截止 2020年11月26日前， MaixPy 的 socket 还未实现 listen / bind / accpet 等函数操作。**\n\n打开热点\n\n#### 参数\n\n* `ssid`: SSID\n* `key`： 密码\n* `chl`： WiFi信号的通道号\n* `ecn`： 加密方法， 有`OPEN``WPA2_PSK`等，参考本页`ESP8285`的常量部分， 默认值是`3`， 也就是`ESP8285.WPA2_PSK`，比如\n```python\nnic = network.ESP8285(uart)\nnic.enable_ap(\"maixpy\", \"12345678\", 5, nic.OPEN)\n```\n或者\n```\nnic.enable_ap(\"maixpy\", \"12345678\", 5, network.ESP8285.OPEN)\n```\n\n\n\n### disable_ap()\n\n关闭热点\n\n\n### 常量\n\n#### OPEN\n\n热点的加密方式为不需要密码\n\n#### WPA_PSK\n\n热点的加密方式为 `WPA_PSK`\n\n#### WPA2_PSK\n\n热点的加密方式为 `WPA2_PSK`\n\n#### WPA_WPA2_PSK\n\n热点的加密方式为 `WPA_WPA2_PSK`\n\n## 例程\n\n\n参考[network目录下的例程](https://github.com/sipeed/MaixPy_scripts/tree/master/network)\n\n\n## network.ESP32_SPI(cs,rst,rdy,mosi,miso,sclk)\n\n构造一个`ESP32_SPI`网卡对象，需要传入对应的`GPIOHS FUNC`\n\n如果传入参数数量不对，会返回错误\n\n**注意** 想要在 maixduino 上 SPI 和 SD 不冲突，需要设置 ESP32_SPI 为硬件 SPI 配置。\n\n### 参数\n\n* 对应引脚功能的 `fpioa_func`\n\n### 返回值\n\n* `ESP32_SPI` 网卡对象\n\n\n## ESP32_SPI\n\n### adc\n\n读取`esp32`模块的`adc`值\n\n#### 参数\n\n无\n\n#### 返回值\n\n`tunple`，5个通道的`adc`值<br>顺序是`\"PIN36\", \"PIN39\", \"PIN34\", \"PIN35\", \"PIN32\"`\n\n#### 例程\n\n[demo_esp32_read_adc.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/demo_esp32_read_adc.py)\n\n\n## network.WIZNET5K(spi, cs)\n\n构造一个`WIZNET5K`网卡对象，使用该方法需要传入一个`spi`对象， 一个`cs` pin 脚.\n\n调用此方法会初始化`WIZNET5K`， 如果失败会抛出异常\n\n\n### 参数\n\n* `spi`: 负责与 WIZNET5K 模块通信\n* `cs`: spi 通信片选脚\n\n### 返回值\n\n* `WIZNET5K`: 网卡对象\n\n## WIZNET5K\n\n### dhclient\n\nDHCP 动态获取 IP\n\n```\nnic.dhclient()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n* `True`: 获取成功\n* `False`: 获取失败\n\n### ifconfig\n\n```\nnic.ifconfig()\n```\n\n#### 参数\n\n* 不传参: 查询网卡信息\n* 传入`(ip, netmask, gateway, dns_server)`字符串元组: 配置网卡, `ip` ip 地址, `netmask`子网掩码, `gateway`网关 IP 地址, `dns_server` DNS 服务 IP 地址.\n\n#### 返回值\n\n* 不传参: 返回`tuple`，元素都是字符串, `(ip, netmask, gateway, dns_server)`， 如果没有查询到或者无效，值为`\"0\"`\n* 传参: 返回`None`\n\n### isconnected\n\n查看网络是否连接\n\n```\nnic.isconnected()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n* `True`: 已经连接\n* `False`: 断开连接\n\n#### 例程\n\n[network_wiznet5k.py](https://github.com/sipeed/MaixPy_scripts/blob/master/network/network_wiznet5k.py)"}, "/soft/maixpy/zh/api_reference/machine/index.html": {"title": "machine", "content": "---\ntitle: machine\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: machine\n---\n\n\nmachine 库主要包含了与硬件相关的各种接口，如下：\n\n* [I2C](./i2c.html)\n* [SPI](./spi.html)\n* [Timer](./timer.html)\n* [PWM](./pwm.html)\n* [UART](./uart.html)\n\n\n## 方法 machine.unique_id()\n\n获取唯一 ID\n\n\n### 返回值\n\n32 字节的唯一ID\n\n## 方法 machine.reset()\n\n重启"}, "/soft/maixpy/zh/api_reference/machine/machine.html": {"title": "machine", "content": "---\ntitle: machine\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: machine\n---\n\n\n\n\n## unique_id"}, "/soft/maixpy/zh/api_reference/machine/timer.html": {"title": "machine.Timer", "content": "---\ntitle: machine.Timer\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: machine.Timer\n---\n\n\n硬件定时器，可以用来定时触发任务或者处理任务，设定时间到了后可以触发中断（调用回调函数），精度比软件定时器高。\n需要注意的是，定时器在不同的硬件中可能会有不同的表现。MicroPython 的 Timer 类定义了在给定时间段内（或在一段延迟后执行一次回调）执行回调的基本操作，并允许特定的硬件上定义更多的非标准行为（因此不能移植到其他板）。\n\n共有 3 个定时器， 每个定时器有 4 个通道可以使用\n\n## 构造函数\n\n```python\ntim = machine.Timer(id, channel, mode=Timer.MODE_ONE_SHOT, period=1000, unit=Timer.UNIT_MS, callback=None, arg=None, start=True, priority=1, div=0)\n```\n\n通过指定的参数新建一个 Timer 对象\n\n### 参数\n\n* `id`: Timer ID, [0~2] \\(Timer.TIMER0~TIMER2\\)\n* `channel`: Timer 通道, [Timer.CHANNEL0~Timer.CHANNEL3]\n* `mode`: Timer 模式, `MODE_ONE_SHOT` 或者 `MODE_PERIODIC` 或者 `MODE_PWM`\n* `period`: Timer 周期, 在启动定时器后 `period` 时间， 回调函数将会被调用，(0,~)\n* `unit`: 设置周期的单位，默认位毫秒（`ms`），`Timer.UNIT_S` 或者 `Timer.UNIT_MS` 或者 `Timer.UNIT_US` 或者`Timer.UNIT_NS`\n* `callback`: 定时器回调函数， 定义了两个参数， 一个是定时器对象`Timer`， 第二个是在定义对象是希望传的参数`arg`，更多请看`arg`参数解释\n> 注意：回调函数是在中断中调用的，所以在回调函数中请不要占用太长时间以及做动态分配开关中断等动作\n* `arg`: 希望传给回调函数的参数，作为回调函数的第二个参数\n* `start`: 是否在对象构建成功后立即开始定时器， `True`：立即开始， `False`:不立即开启，需要调用`start()`函数来启动定时器\n* `priority`: 硬件定时器中断优先级， 与特定的CPU相关， 在K210中，取值范围是[1,7]， 值越小优先级越高\n* `div`: 硬件定时器分频器，取值范围[0,255]， 默认为0， clk_timer（定时器时钟频率） = clk_pll0（锁相环0频率）/2^(div+1)\n> clk_timer*period(unit:s) 应该 < 2^32 并且 >=1\n\n\n## 方法\n\n### init\n\n类似构造函数\n\n```python\ntim.init(id, channel, mode=Timer.MODE_ONE_SHOT, period=1000, unit=Timer.UNIT_MS, callback=None, arg=None, start=True, priority=1, div=0)\n```\n\n#### 参数\n\n类似构造函数\n\n#### 返回值\n\n无\n\n\n### callback_arg\n\n获取设置的传给回调函数的参数，只能是 `Timer` 对象调用， 类 `Timer` 不能调用\n\n\n### callback\n\n获取或者设置回调函数\n\n```python\ntim.callback(callback)\n```\n\n#### 参数\n\n* `callback`： 设置的回调函数，可选参数， 如果不传参数，则只返回先有的回调函数\n\n#### 返回值\n\n当前的回调函数\n\n#### 例子\n\n```python\ndef on_timer(timer):\n    print(\"time up:\",timer)\n    print(\"param:\",timer.callback_arg())\n\ntim.callback(on_timer)\nprint(on_timer, tim.callback())\n```\n\n### period\n\n获取或者设置定时周期\n\n```python\ntim.period(period)\n```\n\n#### 参数\n\n* `period`： 可选参数，配置周期， 如果不传参数， 则只返回当前周期值\n\n#### 返回值\n\n当前周期值\n\n#### 例子\n\n```python\ntim.period(2000)\nprint( tim.period() )\n```\n\n### start\n\n启动定时器\n\n```python\ntim.start()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n#### 例子\n\n```python\ntim.start()\n```\n\n### stop\n\n停止定时器\n\n```python\ntim.stop()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n### restart\n\n重新开启定时器\n\n```python\ntim.restart()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n### deinit/\\__del\\__\n\n注销定时器，并且注销硬件的占用，关闭硬件的时钟\n\n```python\ntim.deinit()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n#### 例子\n\n```python\ntim.deinit()\n```\n或者\n```python\ndel tim\n```\n\n## 常量\n\n* `TIMER0`: Timer0 id\n* `TIMER1`: Timer1 id\n* `TIMER2`: Timer2 id\n* `CHANNEL0`: Timer 通道 0\n* `CHANNEL1`: Timer 通道 1\n* `CHANNEL2`: Timer 通道 2\n* `CHANNEL3`: Timer 通道 3\n* `MODE_ONE_SHOT`: Timer 只运行一次（回调一次）\n* `MODE_PERIODIC`: Timer 始终运行（连续回调）\n* `MODE_PWM`: 定时器不用来回调函数，用以产生PWM\n* `UNIT_S`:  单位秒 (s)\n* `UNIT_MS`: 单位毫秒 (ms)\n* `UNIT_US`: 单位微秒 (us)\n* `UNIT_NS`: 单位纳秒 (ns)\n\n\n## 例程\n\n### 例程 1\n\n定时3秒后打印信息\n\n```python\nfrom machine import Timer\n\ndef on_timer(timer):\n    print(\"time up:\",timer)\n    print(\"param:\",timer.callback_arg())\n\ntim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_ONE_SHOT, period=3000, callback=on_timer, arg=on_timer)\nprint(\"period:\",tim.period())\n```\n\n### 例程 2\n\n每隔 1 秒打印消息， 停止 5 秒后再重启， 5 秒后关闭并注销定时器\n\n```python\nimport time\nfrom machine import Timer\n\ndef on_timer(timer):\n    print(\"time up:\",timer)\n    print(\"param:\",timer.callback_arg())\n\ntim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PERIODIC, period=1, unit=Timer.UNIT_S, callback=on_timer, arg=on_timer, start=False, priority=1, div=0)\nprint(\"period:\",tim.period())\ntim.start()\ntime.sleep(5)\ntim.stop()\ntime.sleep(5)\ntim.restart()\ntime.sleep(5)\ntim.stop()\ndel tim\n```"}, "/soft/maixpy/zh/api_reference/machine/i2c.html": {"title": "machine.I2C", "content": "---\ntitle: machine.I2C\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: machine.I2C\n---\n\n\n\nI2C 总线协议，简单地使用两条线（SCL，SDA）可以控制多个从机（主机模式）。\n\n* 支持主机模式和从机模式\n* 7 位/10 位寻址模式\n* 标准模式 <=100Kb/s\n* 快速模式 <=400Kb/s\n* 超快速模式 <=1000Kb/s\n* 高速模式 3.4Mb/s\n\n## 构造函数\n\n```python\nclass machine.I2C(id, mode=I2C.MODE_MASTER, scl=None, sda=None, gscl=None, gsda=None, freq=400000, timeout=1000, addr=0, addr_size=7, on_recieve=None, on_transmit=None, on_event=None)\n```\n\n通过指定的参数新建一个 I2C 对象\n\n### 参数\n\n* `id`： I2C ID, [0~2] \\(I2C.I2C0~I2C.I2C2\\) [3~5] \\(I2C.I2C3~I2C.I2C5, I2C_SOFT\\) 是软模拟 I2C 的编号\n* `mode`： 模式， 主机(`I2C.MODE_MASTER`)和从机（`I2C.MODE_SLAVE`)模式\n* `scl`： SCL 引脚，直接传引脚编号即可，取值范围： [0,47]。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n* `sda`： SDA 引脚，直接传引脚编号即可，取值范围： [0,47]。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n* `gscl`: SCL 对应的 GPIOHS，使用软件模拟 I2C 时才需要传入，默认与 `scl` 相同。\n* `gsda`: SDA 对应的 GPIOHS，使用软件模拟 I2C 时才需要传入，默认与 `sda` 相同 。\n* `freq`： I2C通信频率， 支持标准100Kb/s, 快速400Kb/s， 以及更高速率（硬件支持超快速模式1000Kb/s，以及高速模式3.4Mb/s）\n* `timeout`： 超时时间，目前这个参数保留，设置无效\n* `addr`： 从机地址，如果是主机模式不用设置， 从机模式则代表从机（本机）地址\n* `addr_size`： 地址长度， 支持 7 位寻址和 10 位寻址， 取值`7`或者`10`\n* `on_recieve`： 从机模式的接收回调函数\n* `on_transmit`： 从机模式的发送回调函数\n* `on_event`： 从机模式的事件函数（开始事件和结束事件）\n\n## 方法\n\n### init\n\n类似构造函数\n\n```python\ni2c = I2C.init(id, mode=Timer.MODE_MASTER, scl, sda, gscl, gsda, freq=400000, timeout=1000, addr=0, addr_size=7, on_recieve=None, on_transmit=None, on_event=None)\n```\n\n#### 参数\n\n与构造函数相同\n\n\n\n#### 返回值\n\n无\n\n\n### scan\n\n扫描I2C总线上的从机\n\n```python\ni2c.scan()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\nlist 对象， 包含了所有扫描到的从机地址\n\n\n### readfrom\n\n从总线读取数据\n\n```python\ni2c.readfrom(addr, len, stop=True)\n```\n\n#### 参数\n\n* `addr`: 从机地址\n* `len`： 数据长度\n* `stop`： 是否产生停止信号，保留，目前只能使用默认值Ture\n\n#### 返回值\n\n读取到的数据，`bytes` 类型\n\n### readfrom_into\n\n读取数据并放到制定变量中\n\n```python\ni2c.readfrom_into(addr, buf, stop=True)\n```\n\n#### 参数\n\n* `addr`: 从机地址\n* `buf`： `bytearray`类型， 定义了长度，读取到的数据存放在此\n* `stop`： 是否产生停止信号，保留，目前只能使用默认值Ture\n\n#### 返回值\n\n无\n\n### writeto\n\n发送数据到从机\n\n```python\ni2c.writeto(addr, buf, stop=True)\n```\n\n#### 参数\n\n\n* `addr`: 从机地址\n* `buf`： 需要发送的数据\n* `stop`： 是否产生停止信号，保留，目前只能使用默认值Ture\n\n#### 返回值\n\n成功发送的字节数\n\n### readfrom_mem\n\n读取从机寄存器\n\n```python\ni2c.readfrom_mem(addr, memaddr, nbytes, mem_size=8)\n```\n\n#### 参数\n\n* `addr`: 从机地址\n* `memaddr`： 从机寄存器地址\n* `nbytes`： 需要读取的长度\n* `mem_size`： 寄存器宽度， 默认为8位\n\n#### 返回值\n\n返回`bytes`类型的读取到的数据\n\n\n### readfrom_mem_into\n\n读取从机寄存器值到指定变量中\n\n```python\ni2c.readfrom_mem_into(addr, memaddr, buf, mem_size=8)\n```\n\n#### 参数\n\n* `addr`: 从机地址\n* `memaddr`： 从机寄存器地址\n* `buf`：  `bytearray`类型， 定义了长度，读取到的数据存放在此\n* `mem_size`： 寄存器宽度， 默认为8位\n\n#### 返回值\n\n无\n\n\n### writeto_mem\n\n写数据到从机寄存器\n\n```python\ni2c.writeto_mem(addr, memaddr, buf, mem_size=8)\n```\n\n#### 参数\n\n\n* `addr`: 从机地址\n* `memaddr`： 从机寄存器地址\n* `buf`： 需要写的数据\n* `mem_size`： 寄存器宽度， 默认为8位\n\n#### 返回值\n\n无\n\n### deinit/\\__del\\__\n\n注销I2C硬件，释放占用的资源，关闭I2C时钟\n\n```python\ni2c.deinit()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n#### 例子\n\n```python\ni2c.deinit()\n```\n或者\n```python\ndel i2c\n```\n\n\n## 常量\n\n* `I2C0`: I2C 0\n* `I2C1`: I2C 1\n* `I2C2`: I2C 2\n* `MODE_MASTER`: 作为主机模式\n* `MODE_SLAVE`: 作为从机模式\n* `I2C_EV_START`: 事件类型，开始信号\n* `I2C_EV_RESTART`: 事件类型，重新开始信号\n* `I2C_EV_STOP`: 事件类型，结束信号\n\n\n## 例程\n\n### 例程 1： 扫描从机设备\n\n```python\nfrom machine import I2C\n\ni2c = I2C(I2C.I2C0, freq=100000, scl=28, sda=29)\ndevices = i2c.scan()\nprint(devices)\n```\n\n### 例程 2： 读写\n\n```python\nimport time\nfrom machine import I2C\n\ni2c = I2C(I2C.I2C0, freq=100000, scl=28, sda=29)\ni2c.writeto(0x24,b'123')\ni2c.readfrom(0x24,5)\n```\n\n### 例程 3： 从机模式\n\n```python\nfrom machine import I2C\n\ncount = 0\n\ndef on_receive(data):\n    print(\"on_receive:\",data)\n\ndef on_transmit():\n    count = count+1\n    print(\"on_transmit, send:\",count)\n    return count\n\ndef on_event(event):\n    print(\"on_event:\",event)\n\ni2c = I2C(I2C.I2C0, mode=I2C.MODE_SLAVE, scl=28, sda=29, addr=0x24, addr_size=7, on_receive=on_receive, on_transmit=on_transmit, on_event=on_event)\n```\n\n### 例程 4： OLED(ssd1306 128x64)\n\n```python\nimport time\nfrom machine import I2C\n\nSSD1306_CMD  = 0\nSSD1306_DATA = 1\nSSD1306_ADDR = 0x3c\n\ndef oled_init(i2c):\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xAE, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x20, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x10, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xb0, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xc8, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x00, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x10, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x40, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x81, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xff, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xa1, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xa6, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xa8, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x3F, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xa4, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xd3, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x00, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xd5, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xf0, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xd9, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x22, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xda, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x12, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xdb, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x20, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x8d, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x14, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xaf, mem_size=8)\n\n\n\ndef oled_on(i2c):\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0X8D, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0X14, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0XAF, mem_size=8)\n\ndef oled_off(i2c):\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0X8D, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0X10, mem_size=8)\n    i2c.writeto_mem(SSD1306_ADDR, 0x00, 0XAE, mem_size=8)\n\ndef oled_fill(i2c, data):\n    for i in range(0,8):\n        i2c.writeto_mem(SSD1306_ADDR, 0x00, 0xb0+i, mem_size=8)\n        i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x10, mem_size=8)\n        i2c.writeto_mem(SSD1306_ADDR, 0x00, 0x01, mem_size=8)\n        for j in range(0,128):\n            i2c.writeto_mem(SSD1306_ADDR, 0x40, data, mem_size=8)\n\ni2c = I2C(I2C.I2C0, mode=I2C.MODE_MASTER, freq=400000, scl=28, sda=29, addr_size=7)\n\ntime.sleep(1)\noled_init(i2c)\noled_fill(i2c, 0xff)\n\n```"}, "/soft/maixpy/zh/api_reference/machine/pwm.html": {"title": "machine.PWM", "content": "---\ntitle: machine.PWM\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: machine.PWM\n---\n\n\nPWM： 脉宽调制模块， 硬件支持的PWM， 可以指定任意引脚（0到47引脚）\n\n每个 PWM 依赖于一个定时器， 即当定时器与 PWM 功能绑定后， 不能作为普通定时器使用了。 因为有 3 个定时器， 每个定时器有 4 个通道， 即最大可以同时产生 12 路 PWM 波形\n\n## 构造函数\n\n```python\npwm = machine.PWM(tim, freq, duty, pin, enable=True)\n```\n\n通过指定的参数新建一个 PWM 对象\n\n### 参数\n\n* `tim`: 每个PWM依赖一个定时器来产生波形， 所以这里需要传一个定时器对象，这个定时器对象必须初始化时必须指定定时器 ID 和通道号\n* `freq`： PWM 波形频率\n* `duty`： PWM 占空比， 指高电平占整个周期的百分比，取值：[0,100]\n* `[pin]`： PWM 输出引脚。 可以不设置，而是使用 [fm](../builtin_py/fm.html) 统一管理引脚映射。\n* `enable`： 是否立即开始产生波形，默认位`True`，及对象生成后立即开始在指定的引脚上产生 PWM 波形\n\n## 方法\n\n### init\n\n类似构造函数\n\n```python\npwm.init(tim, freq, duty, pin, enable=True)\n```\n\n#### 参数\n\n与构造函数相同\n\n#### 返回值\n\n无\n\n\n### freq\n\n获取或者设置 PWM 频率\n\n```python\npwm.freq(freq)\n```\n\n#### 参数\n\n* `freq`： PWM 频率， 可选参数， 如果不传参数则步设置只返回当前频率值\n\n#### 返回值\n\n当前设置的实际的 PWM 频率\n\n\n### duty\n\n获取或者设置 PWM 占空比\n\n```python\npwm.duty(duty)\n```\n\n#### 参数\n\n* `duty`： PWM 占空比 可选， 如果不传参数则步设置只返回当前占空比值\n\n#### 返回值\n\n当前设置的 PWM 占空比值\n\n\n### enable\n\n使能 PWM 输出， 使指定的引脚上立即产生波形\n\n```python\npwm.enable()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n### disable\n\n失能 PWM 输出， 指定的引脚不再产生波形\n\n```python\npwm.disable()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n### deinit/\\__del\\__\n\n注销 PWM 硬件，释放占用的资源，关闭 PWM 时钟\n\n```python\npwm.deinit()\n```\n\n#### 参数\n\n无\n\n#### 返回值\n\n无\n\n#### 例子\n\n```python\npwm.deinit()\n```\n或者\n```python\ndel pwm\n```\n\n## 常量\n\n无\n\n\n## 例程\n\n\n### 例程 1 （呼吸灯）\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](../builtin_py/board_info.html)。\n\n```python\nfrom machine import Timer,PWM\nimport time\nfrom board import board_info\n\ntim = Timer(Timer.TIMER0, Timer.CHANNEL0, mode=Timer.MODE_PWM)\nch = PWM(tim, freq=500000, duty=50, pin=board_info.LED_G)\nduty=0\ndir = True\nwhile True:\n    if dir:\n        duty += 10\n    else:\n        duty -= 10\n    if duty>100:\n        duty = 100\n        dir = False\n    elif duty<0:\n        duty = 0\n        dir = True\n    time.sleep(0.05)\n    ch.duty(duty)\n```\n\n### 例程 2\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](../builtin_py/board_info.html)。\n\n```python\nimport time\nimport machine\nfrom board import board_info\n\ntim = machine.Timer(machine.Timer.TIMER0, machine.Timer.CHANNEL0, mode=machine.Timer.MODE_PWM)\nch0 = machine.PWM(tim, freq=3000000, duty=20, pin=board_info.LED_G, enable=False)\nch0.enable()\ntime.sleep(3)\nch0.freq(2000000)\nprint(\"freq:\",ch0.freq())\nch0.duty(60)\ntime.sleep(3)\nch0.disable()\n```"}, "/soft/maixpy/zh/api_reference/builtin_py/pye.html": {"title": "Micropython Editor", "content": "---\ntitle: Micropython Editor\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: Micropython Editor\n---\n\n\nMaixPy 固件中集成了文件编辑器 —— [`pye`](https://github.com/robert-hh/Micropython-Editor), 用户可以直接通过串口终端修改板子里面的文件\n\n使用方法：\n\n```python\n\nfrom pye_mp import pye\n\npye(\"/sd/boot.py\")\n\n```"}, "/soft/maixpy/zh/api_reference/builtin_py/fm.html": {"title": "fpioa_manager", "content": "---\ntitle: fpioa_manager\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: fpioa_manager\n---\n\n\n> **本文档在 MaixPy 0.5.1-128 版本测试通过。**\n\nfpioa_manager：简称`fm`，该模块用于注册芯片内部功能和引脚，帮助用户管理内部功能和引脚映射关系的功能模块。\n\n## 如何理解【引脚]映射[内部功能]？\n\nK210 芯片上的 外部引脚 和 内部功能 是彼此独立的，引脚是指从芯片上引出的许多金属触点，也就是我们俗称的功能引脚，它可以是 GPIO / PWM / ADC / I2C 等内部功能引脚，传统的认知是引脚对应的内部功能是不可改变的，但可以复用的，而 K210 是可以通过映射来改变引脚功能的，看如下示意图理解具体的映射功能。\n\n首先可以将 I2C 的 SCL/SDA 映射（MAP）到 IO6/IO7 引脚，从而在此引脚上进行 I2C 的读写操作。\n\n```\n    +------------------------------+\n    |                              |\n    |           +---+              |\n<-----+ <-----+ |I2C|              |\n IO6|           +---+              |\n    |           |                  |\n    |           |   +----+         |\n<-----+ <-------+   |UART|         |\n IO7|               +----+         |\n    |                              |\n    |           +---+              |\n<-----+         |SPI|              |\n IO8|           +---+              |\n    |                              |\n    |             +---+            |\n<-----+           |I2S|            |\n IO9|             +---+            |\n    |                              |\n    |                              |\n    +------------------------------+\n```\n\n接着还可以将 SPI 的 SCLK/MOSI/MISO/CS 映射（MAP）到 IO6/IO7/IO8/IO9 引脚，也就可以在此引脚上进行 SPI 的读写操作。\n\n```\n    +------------------------------+\n    |                              |\n    |               +---+          |\n<------<-------<--  |I2C|          |\n IO6|            |  +---+          |\n    |            |                 |\n    |            |       +----+    |\n<------<------+  |       |UART|    |\n IO7|         |  |       +----+    |\n    |         +--+-+               |\n    |          |SPI|               |\n<------<--------+--+               |\n IO8|           |                  |\n    |           |                  |\n    |           |    +---+         |\n<------<--------+    |I2S|         |\n IO9|                +---+         |\n    |                              |\n    |                              |\n    +------------------------------+\n```\n\n## 使用方法\n\n调用 register 函数将 pin 引脚与具体的硬件功能(GPIO/I2C/UART/I2S/SPI)绑定起来，在不使用的时候调用 unregister 释放引脚所绑定的硬件功能（或称 **function** ），这不同于传统单片机的理解， K210 可以将一定范围内的引脚映射到具体的硬件功能。\n\n如下代码所示：\n\n```python\nfrom fpioa_manager import fm\n\nfm.register(11, fm.fpioa.GPIO0, force=True)\nfm.register(12, fm.fpioa.GPIOHS0, force=True)\nfm.register(13, fm.fpioa.UART2_TX)\nfm.register(14, fm.fpioa.UART2_RX)\n\n# other code\n\nfm.unregister(11)\nfm.unregister(12)\nfm.unregister(13)\nfm.unregister(14)\n```\n\n**注意事项**:\n\n以下 GPIOHS 已经在 MaixPy 中默认使用，程序中如非必要请不要使用。\n\n| GPIOHS | 功能| 描述 |\n| ------ | --- | --- |\n| GPIOHS31 | LCD_DC      | LCD 控制信号引脚 |\n| GPIOHS30 | LCD_RST     | LCD 复位芯片脚 |\n| GPIOHS29 | SD_CS       | SD 卡 SPI 片选 |\n| GPIOHS28 | MIC_LED_CLK | SK9822_DAT |\n| GPIOHS27 | MIC_LED_DATA | SK9822_CLK |\n\n另外以下引脚已经在 MaxiPy 开机启动时注册，请注意。\n\n### SD卡\n* `功能`：SPI1_SCLK/SPI1_D0/SPI1_D1/GPIOHS29/SPI0_SS1\n* `引脚`：PIN25/PIN26/PIN27/PIN28/PIN29\n\n### LCD\n* `功能`：SPI0_SS3/SPI0_SCLK/GPIOHS30/GPIOHS31\n* `引脚`：PIN36/PIN37/PIN38/PIN39\n\n### sensor\n* `功能`：SCCB_SDA/SCCB_SCLK/CMOS_RST/CMOS_VSYNC/CMOS_PWDN/CMOS_HREF/CMOS_XCLK/CMOS_PCLK\n* `引脚`：PIN40/PIN41/PIN42/PIN43/PIN44/PIN45/PIN46/PIN47\n\n### REPL\n* `功能`：UARTHS_RX/UARTHS_TX\n* `引脚`：PIN4/PIN5\n\n## class `fm`\n\n### register(pin, func, force=True)\n\n* `pin`: 功能映射引脚\n* `function` : 芯片功能\n* `force`: 强制分配，如果为`True`，则可以多次对同一个引脚注册;`False`则不允许同一引脚多次注册。默认为`True`是为了方便`IDE`多次运行程序使用\n\n设置引脚（pin）对应的外设功能（func），默认启用强制绑定参数（force=True），它将强制更换指定的引脚功能，如果发现存在上一个绑定的引脚，则会发出一个警告，但不影响代码继续执行。 \n\n如果设置 force=False ，则会在 register 发现硬件功能已经被使用了，此时就会弹出异常，方便深度开发的时候不清楚 GPIO/HS 的分配情况，常见于运行某个代码的按键在访问某些功能的时候不能使用了的场合。\n\n#### 使用方法\n\n```python\nfrom fpioa_manager import fm\nfm.register(16, fm.fpioa.GPIO2)\nfm.register(13, fm.fpioa.GPIO2)\nfm.register(12, fm.fpioa.GPIO2, force=False)\n```\n\n可见提示了 fm.fpioa.GPIO2(pin:16) 和 fm.fpioa.GPIO2(pin:13) 的占用情况。\n\n```shell\n[Warning] function is used by fm.fpioa.GPIO2(pin:16)\nTraceback (most recent call last):\n  File \"<stdin>\", line 5, in <module>\n  File \"fpioa_manager.py\", line 20, in register\nException: [Warning] function is used by fm.fpioa.GPIO2(pin:13)\n```\n\n### unregister(pin)\n\n释放引脚（pin）上的硬件功能（GPIO/I2C/SPI/I2S/UART）。\n\n### get_pin_by_function(pin)\n\n获取引脚（pin）上绑定的硬件功能。\n\n### get_gpio_used()\n\n获取所有 gpio 的使用情况，它只查询 GPIOHS / GPIO 的引脚分配情况, None 表示该硬件功能未被使用。\n\n#### 使用方法\n\n```python\nfrom fpioa_manager import fm\nfor item in fm.get_gpio_used():\n    print(item)\n```\n\n> 注意：每个引脚都会有默认状态\n\n```shell\n('fm.fpioa.GPIOHS0', 16)\n('fm.fpioa.GPIOHS1', 17)\n('fm.fpioa.GPIOHS2', 18)\n('fm.fpioa.GPIOHS3', 19)\n('fm.fpioa.GPIOHS4', 37)\n('fm.fpioa.GPIOHS5', 38)\n('fm.fpioa.GPIOHS6', 22)\n('fm.fpioa.GPIOHS7', 23)\n('fm.fpioa.GPIOHS8', 24)\n('fm.fpioa.GPIOHS9', 25)\n('fm.fpioa.GPIOHS10', None)\n('fm.fpioa.GPIOHS11', 27)\n('fm.fpioa.GPIOHS12', 28)\n('fm.fpioa.GPIOHS13', 29)\n('fm.fpioa.GPIOHS14', 30)\n('fm.fpioa.GPIOHS15', 31)\n('fm.fpioa.GPIOHS16', 32)\n('fm.fpioa.GPIOHS17', 33)\n('fm.fpioa.GPIOHS18', 34)\n('fm.fpioa.GPIOHS19', 35)\n('fm.fpioa.GPIOHS20', None)\n('fm.fpioa.GPIOHS21', None)\n('fm.fpioa.GPIOHS22', None)\n('fm.fpioa.GPIOHS23', None)\n('fm.fpioa.GPIOHS24', 40)\n('fm.fpioa.GPIOHS25', 41)\n('fm.fpioa.GPIOHS26', 42)\n('fm.fpioa.GPIOHS27', 43)\n('fm.fpioa.GPIOHS28', 44)\n('fm.fpioa.GPIOHS29', 26)\n('fm.fpioa.GPIOHS30', 46)\n('fm.fpioa.GPIOHS31', 47)\n('fm.fpioa.GPIO0', 8)\n('fm.fpioa.GPIO1', 9)\n('fm.fpioa.GPIO2', None)\n('fm.fpioa.GPIO3', None)\n('fm.fpioa.GPIO4', 12)\n('fm.fpioa.GPIO5', 13)\n('fm.fpioa.GPIO6', 14)\n('fm.fpioa.GPIO7', 15)\n```\n\n### help()\n\n调用它会打印出如下『附录： 外设表』帮助说明。\n\n详细看 [FPIOA](../Maix/fpioa.html) 。"}, "/soft/maixpy/zh/api_reference/builtin_py/index.html": {"title": "内置类（builtin_py）", "content": "---\ntitle: 内置类（builtin_py）\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: 内置类（builtin_py）\n---\n\n\n`内置类` 库（builtin_py）是对 MaixPy 底层的类进行封装的用户层接口，方便用户使用 MaixPy 它包括以下：\n\n* [fpioa_manager](./fm.html)\n* [board_info](./board_info.html)\n* [pye](./pye.html)\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](../builtin_py/board_info.html)。\n\n```python\nfrom board import board_info\nfrom fpioa_manager import fm\n```"}, "/soft/maixpy/zh/api_reference/builtin_py/board_info.html": {"title": "Board", "content": "---\ntitle: Board\nkeywords: maixpy, k210, AIOT, 边缘计算, 深度学习, 人工智能\ndesc: maixpy doc: Board\n---\n\n\n> **本文档在 MaixPy 0.5.1-128 版本测试通过。**\n\n这是一个 MaixPy 板级配置模块，它可以在用户层统一 Python 代码，从而屏蔽许多硬件的引脚差异。\n\n效果如下：\n\n```python\nfrom Maix import GPIO\nfrom fpioa_manager import fm\nfrom board import board_info\nprint(board_info.LED_R)\nfm.register(board_info.LED_R, fm.fpioa.GPIO0, force=True)\nled_r = GPIO(GPIO.GPIO0, GPIO.OUT)\nled_r.value(0)\n```\n\n而这份代码同时支持 MaixPy 所有硬件运行，并且打印的 board_info.LED_R 都不尽相同，通过它保证示例代码的一致性。\n\n### board 的配置方法\n\n将以下链接对应的 python 代码复制出来（如 config_maix_bit.py），放到 IDE 编辑框中运行，即可完成对『你的硬件』配置项（config.json）的导入，它会在 flash 上存储该配置文件。\n\n运行配置代码后会自动重启，此时代码中才可以调用 board_info.BOOT_KEY , 实际上 board_info.BOOT_KEY 就是指 IO 16 ，对应的定义在 config.json 中可以得知，如果不存在的资源将会报错，如没有 LED 定义的硬件，运行 LED 点亮的时候就会报错。\n\n```python\nfrom board import board_info\n# see board/readme.md to config your sipeed's hardware.\nprint(board_info.BOOT_KEY, board_info.BOOT_KEY == 16)\n```\n\n### Maix Bit\n\n[config_maix_bit.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_bit.py)\n\n### Maix Dock\n\n[config_maix_dock.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_dock.py)\n\n### Maix Go\n\n[config_maix_go.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_go.py)\n\n### Maix Duino\n\n[config_maix_duino.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_duino.py)\n\n### Maix Cube\n\n[config_maix_cube.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_cube.py)\n\n### Maix Amigo\n\n[config_maix_amigo.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_amigo.py)\n\n### Maix Nano\n\n> 这个没有硬件外设.....所以不要问为什么没有它的配置代码了。\n\n### 创建你的专属硬件\n\n你可以借助该接口代码适配你的硬件，配置方法参考 [MaixPy_scripts/board](https://github.com/sipeed/MaixPy_scripts/tree/master/board) 里面有供你参考的配置文件。\n\n### board 的使用方法\n\n导入配置：\n\n```python\nfrom board import board_info\nboard_info.load({\n    'PIN10': 10,\n    'BOOT_KEY': 16,\n    'WIFI_TX': 6,\n    'WIFI_RX': 7,\n    'WIFI_EN': 8,\n})\nprint('PIN10:', board_info.PIN10)\nprint('BOOT_KEY:', board_info.BOOT_KEY)\nprint('WIFI_TX:', board_info.WIFI_TX)\nprint('WIFI_RX:', board_info.WIFI_RX)\nprint('WIFI_EN:', board_info.WIFI_EN)\n```\n\n调用结果：\n\n```shell\nPIN10: 10\nBOOT_KEY: 16\nWIFI_TX: 6\nWIFI_RX: 7\nWIFI_EN: 8\n```\n\n> 就这样。"}, "/soft/maixpy/zh/get_started/get_started_power_on.html": {"title": " MaixPy 开发板上电", "content": "---\ntitle:  MaixPy 开发板上电\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门, 人工智能\ndesc: maixpy doc: MaixPy 开发板上电\n---\n\n\n当我们拿到 MaixPy 开发板之后\n\n## 检查硬件\n\n检查硬件是否有损坏， 以及摄像头和屏幕是否接好，排线千万不要接反了。\n\n\n## 连接硬件\n\n连接 Type C 线， 一端电脑一端开发板\n\n查看设备是否已经正确识别：\n\n在 Windows 下可以打开设备管理器来查看\n\n在 Linux 下可以通过 `ls /dev/ttyUSB*` 或者 `ls /dev/ttyACM*` 来查看， 如果没有可以 `ls /dev` 来找找，具体的设备名跟串口芯片和驱动有关\n\n\n如果没有发现设备， 需要确认有没有装驱动以及接触是否良好\n\n上电后， 如果是新出厂的开发板， 可能会显示红色背景，前景是简单的 MaixPy 介绍，包括官网地址，画面是静止的，需要通过接下来的编程让它改变。\n![](./../../assets/maixpy/welcome_maixpy.png)\n\n\n## 检查固件版本\n\n使用**串口终端**打开串口，然后复位，看输出的版本信息，与[github](https://github.com/sipeed/MaixPy/releases) 或者 [master 分支](http://dl.sipeed.com/MAIX/MaixPy/release/master/) 的固件版本对比，根据当前版本情况考虑升级到最新版本\n\n比如：\n\n```python\n[MaixPy] init end\n\n __  __              _____  __   __  _____   __     __\n|  \\/  |     /\\     |_   _| \\ \\ / / |  __ \\  \\ \\   / /\n| \\  / |    /  \\      | |    \\ V /  | |__) |  \\ \\_/ /\n| |\\/| |   / /\\ \\     | |     > <   |  ___/    \\   /\n| |  | |  / ____ \\   _| |_   / . \\  | |         | |\n|_|  |_| /_/    \\_\\ |_____| /_/ \\_\\ |_|         |_|\n\nOfficial Site : https://www.sipeed.com\nWiki          : https://maixpy.sipeed.com\n\nMicroPython v0.5.0-12-g284ce83 on 2019-12-31; Sipeed_M1 with kendryte-k210\nType \"help()\" for more information.\n```\n\n**查看版本号：**\n\n  这里版本是 `v0.5.0-12-g284ce83`， 也可以使用下面的代码查看版本\n\n> **注：** 固件可以从下载站 [dl.sipeed.com](http://dl.sipeed.com/MAIX/MaixPy/release/master/) 中获取\n\n```python\nimport sys\nprint(sys.implementation.version)\n```\n\n如果你在开发过程中遇到了问题， 也可以先尝试更新固件到最新版本\n\n## 执行代码\n\n* 打开串口终端后，按开发板的复位按钮就可以看到打印的开机信息了，会输出\n\n```shell\n>>>\n```\n即在等待我们输入代码，如果没有这个符号，可能是有开机自动运行的程序正在运行，可以按`Ctrl+C`来取消正在运行的程序\n\n* 然后输入程序执行\n\n```python\n>>> print(\"hello world\")\nhello world\n>>>\n```\n\n## 粘贴执行多行代码\n\n当我们有多行代码是从其它地方复制过来的，比如\n```python\nimport os\nf = os.listdir()\nprint(f)\n```\n\n* 先复制好代码\n* 串口终端按 `Ctrl+E`\n* 粘贴代码\n* 按 `Ctrl+D`（注意如果之前没有按 `Ctrl+E` 则是软件复位命令，MaixPy 会软复位），然后就可以看到所有代码执行了\n\n```python\n>>>\n['boot.py','main.py', 'freq.conf']\n>>>\n\n```\n\n> 如果数据量比较大，串口可能丢失数据，会导致提示语法错误，可以多试几次"}, "/soft/maixpy/zh/get_started/knowledge_micropython.html": {"title": "MicroPython 背景知识", "content": "---\ntitle: MicroPython 背景知识\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门, 人工智能\ndesc: maixpy doc: MicroPython 背景知识\n---\n\n\n由于 **MaixPy** 是基于 **MicroPython** 之上进行开发构建的,\n提供给用户最终的接口是 **Micropython** ，所以在使用 MaixPy 开发之初我们需要熟悉下 `MicroPython` 的基础知识与语法\n\n\n## 关于 MicroPython:\n\nMicroPython 是编程语言 Python3 的精简高效实现，语法和 Python3 保持一致，但只实现了 Python 标准库的一小部分，并且经过优化，可以在 MCU ， WIFI SOC 上等资源受限的环境中使用，所以我们在使用 MicroPython 需要了解其语法。\n\n如果之前有 **C/C++/Java** (或任何其他语言)的编程经验，推荐\n[《廖雪峰的 Python 教程》](https://www.liaoxuefeng.com/wiki/1016959663602400)\n\n如果之前没有任何编程经验，推荐\n[《笨方法学 Python》](https://wizardforcel.gitbooks.io/lpthw/content/)\n\n## REPL 和 串口\n\n首先，断开开发板与 MaixPy IDE 的连接，否则串口会冲突！\n\n打开 MaixPy IDE 中的终端窗口\n\nprint('The quick brown fox', 'jumps over', 'the lazy dog')\n\n输出:\n\n```\nThe quick brown fox jumps over the lazy dog\n```\n\nprint() 会依次打印每个字符串，遇到逗号“,”会输出一个空格，因此，输出的字符串是这样拼起来的：\n\n> The quick brown fox jumps over the lazy dog\n\nprint() 也可以打印整数，或者计算结果：\n\n```python\nprint(300)\n300\nprint(100 + 200)\n300\n```\n\n因此, 我们可以把计算100 + 200的结果打印得更漂亮一点:\n\n```python\nprint('100 + 200 =', 100 + 200)\n100 + 200 = 300\n```\n\n注意, 对于 100 + 200, Python 解释器自动计算出结果 300，但是 '100 + 200 =' 是字符串而非数学公式，Python 把它视为字符串。\n\n## MicroPython 基本语法\n### 变量\n\n在 Python 中，等号 `=` 是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：\n\n```python\na = 123 # a是整数\nprint(a)\na = 'ABC' # a变为字符串\nprint(a)\n```\n\n这种变量本身类型不固定的语言称之为**动态语言**，与之对应的是 **静态语言**。\n静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如 Java 是静态语言，赋值语句如下(// 表示注释)：\n\n```java\nint a = 123; // a是整数类型变量\na = \"ABC\";// 错误:不能把字符串赋给整型变量\n```\n\n和静态语言相比，动态语言更灵活，就是这个原因。\n\n### list 列表\n\nPython 内置的一种数据类型是**列表**：**list**.<br/>\n**list** 是一种有序的集合, 可以随时添加和删除其中的元素.\n比如, 列出班里所有同学的名字, 就可以用一个 **list** 表示:\n\n```python\nclassmates = ['Michael', 'Bob', 'Tracy']\nclassmates\n['Michael', 'Bob', 'Tracy']\n```\n\n变量 classmates 就是一个 `list`.<br/>\n用 `len()` 函数可以获得 list 元素的个数:\n\n```python\nlen(classmates)\n3\n```\n\n用索引来访问 list 中每一个位置的元素, 索引是从 0 开始的:\n\n```python\nclassmates[0]\n'Michael'\nclassmates[1]\n'Bob'\nclassmates[2]\n'Tracy'\nclassmates[3]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n```\n\n当索引超出了范围时，Python 会报一个 IndexError 错误，所以，要确保索引不要越界，记得最后一个元素的索引是 len(classmates) - 1。\n\n如果要取最后一个元素，除了计算索引位置外，还可以用 -1 做索引，直接获取最后一个元素：\n\n```python\nclassmates[-1]\n'Tracy'\n```\n\n以此类推，可以获取倒数第2个、倒数第3个：\n\n```python\nclassmates[-2]\n'Bob'\nclassmates[-3]\n'Michael'\nclassmates[-4]\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n  IndexError: list index out of range\n```\n\n当然，倒数第 4 个就越界了。\n\nlist 是一个**可变**的**有序表**，所以可以往 list 中追加元素到末尾：\n\n```python\nclassmates.append('Adam')\nclassmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n```\n\n也可以把元素插入到指定的位置，比如索引号为1的位置：\n\n```python\nclassmates.insert(1, 'Jack')\nclassmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n```\n\n要删除 list 末尾的元素, 用 pop() 方法：\n\n```python\nclassmates.pop()\n'Adam'\nclassmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n```\n\n要把某个元素替换成别的元素, 可以直接赋值给对应的索引位置:\n\n```python\nclassmates[1] = 'Sarah'\nclassmates\n['Michael', 'Sarah', 'Tracy']\n```\n\nlist 里面的元素的数据类型也可以不同, 比如:\n\n```python\nL = ['Apple', 123, True]\n```\n\n如果一个 list 中一个元素也没有，就是一个空的 list，它的长度为 0：\n\n```python\nL = []\nlen(L)\n0\n```\n\n### tuple 元组\n\n另一种有序列表叫元组: **tuple**.<br/>\ntuple 和 list 非常类似，但是 `tuple` 一旦初始化就不能修改，比如同样是列出同学的名字：\n\n```python\nclassmates = ('Michael', 'Bob', 'Tracy')\n```\n\n现在，classmates 这个 **tuple** 不能变了，它也没有 append(), insert() 这样的方法.其他获取元素的方法和 list 是一样的, 你可以正常地使用 classmates[0], classmates[-1], 但不能赋值成另外的元素.\n\n不可变的 tuple 有什么意义？因为 tuple 不可变, 所以代码更安全。\n如果可能，能用 tuple 代替 list 就尽量用 tuple。\n\ntuple 的陷阱:当你定义一个 tuple 时, 在定义的时候, tuple 的元素就必须被确定下来, 比如:\n\n```python\nt = (1, 2)\nt\n(1, 2)\n```\n\n但是, 要定义一个\n只有1个元素的 tuple, 如果你这么定义:\n\n```python\nt = (1)\nt\n1\n```\n\n但此时,定义的不是 tuple, t 是整型变量, 变量 t 的值为1! <br/>\n这是因为括号()既可以表示tuple, 又可以表示数学公式中的小括号, 这就产生了歧义, 因此, Python规定, 这种情况下, 按小括号进行计算, 计算结果自然是1.\n\n所以, 只有 1 个元素的 **tuple** 定义时必须加一个逗号`,`, 来消除歧义:\n\n```python\nt = (1,)\nt\n(1,)\n```\n\nPython在显示只有 1 个元素的 tuple 时, 也会加一个逗号`,`, 以免你误解成数学计算意义上的括号.\n\n### 条件判断\n\nif 语句的完整形式是:\n\n```\nif <条件判断1>:\n    <执行1>\nelif <条件判断2>:\n    <执行2>\nelif <条件判断3>:\n    <执行3>\nelse:\n    <执行4>\n```\n\n比如:\n\n```python\nage = 20\nif age >= 6:\n    print('teenager')\nelif age >= 18:\n    print('adult')\nelse:\n    print('kid')\n```\n\n### 循环\n\nPython 的循环有两种, 一种是 `for...in` 循环, 依次把 list 或 tuple 中的每个元素迭代出来, 看例子:\n\n```python\nnames = ['Michael', 'Bob', 'Tracy']\nfor name in names:\n    print(name)\n```\n\n执行这段代码, 会依次打印 names 的每一个元素:\n\n```python\nMichael\nBob\nTracy\n```\n\n所以 `for x in ...` 循环就是把每个元素代入变量x, 然后执行缩进块的语句.\n\n如果要计算 1-100 的整数之和, 从 1 写到 100 有点困难, 幸好 Python提供一个 range() 函数, 可以生成一个整数序列, 再通过 list() 函数可以转换为 list.<br/>\n比如 range(5) 生成的序列是从 0 开始小于 5 的整数:\n\n```python\nlist(range(5))\n[0, 1, 2, 3, 4]\n```\n\nrange(101) 就可以生成 0-100 的整数序列, 计算如下:\n\n```python\nsum = 0\nfor x in range(101):\n    sum = sum + x\nprint(sum)\n```\n\n第二种循环是 `while 循环`, 比如我们要计算 100 以内所有奇数之和, 可以用 while 循环实现:\n\n```python\nsum = 0\nn = 99\nwhile n > 0:\n    sum = sum + n\n    n = n - 2\nprint(sum)\n```\n\n-----\n\n### 数据类型转换\n\nPython 内置的常用函数还包括数据类型转换函数, 比如 int() 函数可以把其他数据类型转换为整数:\n\n```python\n>>> int('123')\n123\n>>> int(12.34)\n12\n>>> float('12.34')\n12.34\n>>> str(1.23)\n'1.23'\n>>> str(100)\n'100'\n>>> bool(1)\nTrue\nfrom machine import GPIO\n```\n### 函数\n\n在 Python 中, 定义一个函数要使用 `def` 语句, 依次写出函数名、括号、括号中的参数和冒号`:`, 然后在缩进块中编写函数体, 函数的返回值用 `return` 语句返回.\n\n我们先写一个计算 x2 的函数:\n\n```python\ndef power(x):\n    return x * x\n```\n\n对于 power(x) 函数, 参数 x 就是一个位置参数.\n\n当我们调用 power 函数时, 必须传入有且仅有的一个参数x:\n\n```python\npower(5)\n25\npower(15)\n225\n```\n\n现在, 如果我们要计算 x3 怎么办?可以再定义一个 power3 函数, 但是如果要计算x4、x5……怎么办?我们不可能定义无限多个函数.\n\n你也许想到了, 可以把 power(x) 修改为 power(x, n), 用来计算 xn , 说干就干:\n\n```python\ndef power(x, n):\n    s = 1\n    while n > 0:\n        n = n\n         - 1\n        s = s\n         * x\n    return s\n```\n\n对于这个修改后的power(x, n)函数, 可以计算任意n次方:\n\n```python\npower(5, 2)\n25\npower(5, 3)\n125\n```\n\n修改后的 power(x, n) 函数有两个参数: x 和 n, 这两个参数都是位置参数, 调用函数时, 传入的两个值按照位置顺序依次赋给参数x和n.\n\n### 切片\n\n取一个 `list` 或 `tuple` 的部分元素是非常常见的操作.比如, 一个list 如下:\n\n```python\nL = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']\n```\n\n取前3个元素, 用一行代码就可以完成切片:\n\n```python\nL[0:3]\n['Michael', 'Sarah', 'Tracy']\n```\n\nL[0:3] 表示, 从索引 0 开始取, 直到索引 3 为止, 但不包括索引3.即索引0, 1, 2, 正好是3个元素.\n\n如果第一个索引是0, 还可以省略:\n\n```python\nL[:3]\n['Michael', 'Sarah', 'Tracy']\n```\n\n也可以从索引1开始, 取出2个元素出来:\n\n```python\nL[1:3]\n['Sarah', 'Tracy']\n```\n\n`tuple` 也是一种 list, 唯一区别是 `tuple` 不可变.因此, `tuple` 也可以用切片操作, 只是操作的结果仍是 `tuple`:\n\n```python\n(0, 1, 2, 3, 4, 5)[:3]\n(0, 1, 2)\n```\n\n`字符串` 'xxx' 也可以看成是一种 `list`, 每个元素就是一个字符.因此, 字符串也可以用切片操作, 只是操作结果仍是字符串:\n\n```python\n'ABCDEFG'[:3]\n'ABC'\n```\n\n### 对象\n\nPython 是**面向对象**编程的, 比如一个 LED 灯\n\n```python\nfrom pyb import LED\n\nred_led = LED(1)\nred_led.on()\n```\n\nLED 是一个**类**, red_led 就是一个**对象**, 可以对这个对象进行操作, 比如点亮 on, 关掉 off, 查看 value.\n\n### 模块\n\n### 什么是模块?\n\n随着代码的增多，在一个文件里的代码会越来越长，越来越难看懂。\n\n为了编写可维护的代码，我们把很多函数分组，放到不同的文件里。在Python 中，一个 `.py` 文件就称之为一个**模块(Module)**.\n\n模块有什么好处?\n\n复用代码方便！如果我写了一个模块，你也写了一个模块，我们就有了两个模块。我们把这些模块都组织起来，大家就可以少写很多代码了！\n\n#### 如何使用模块?\n\n```python\nimport time\n\ntime.sleep_ms(500)\n```\n\n`import time` 就是引入 `time` 这个模块。通过 `import` 语句，就可以引入模块。\n\n### 更多\n\n更多 MicroPython 基础语法教程请自行搜索。"}, "/soft/maixpy/zh/get_started/uart.html": {"title": "什么是串口", "content": "# 什么是串口\n\n## 串口\n\nCOM口( cluster communication port )即串行通讯端口，简称串口。微机上的串口通常是9针，也有25针的接口，最大速率115200bps。\n\n![uart](./../../assets/get_started/uart.jpg)\n\n1. 通常用于连接鼠标（串口）及通讯设备（如连接外置式调制解调器进行数据通讯或一些工厂的数控机接口）等。\n\n1. 一般主板外部只有一个串口，机箱后面和并口一起的那个九孔输出端（梯形），就是COM1口，COM2口一般要从主板上插针引出。并口是最长的那个梯形口；\n\n1. 目前主流的主板一般都只带1个串口，甚至不带，慢慢会被USB 取代。\n\n## USB 串口\nUSB，是英文Universal Serial Bus（通用串行总线）的缩写，是一个外部总线标准，用于规范电脑与外部设备的连接和通讯。是应用在PC领域的接口技术。\n\n![](./../../assets/get_started/usb_uart.png)\n\n- USB 串口的特点\n\n    1. 可以热插拔。就是用户在使用外接设备时，不需要关机再开机等动作，而是在电脑工作时，直接将 USB 插上使用。\n\n    1. 携带方便。USB 设备大多以“小、轻、薄”见长，对用户来说，随身携带大量数据时，很方便。当然USB硬盘是首要之选了。\n\n    1. 标准统一。大家常见的是 IDE 接口的硬盘，串口的鼠标键盘，并口的打印机扫描仪，可是有了USB之后，这些应用外设统统可以用同样的标准与个人电脑连接，这时就有了 USB 硬盘、USB 鼠标、USB 打印机等等。\n\n    1. 可以连接多个设备。USB 在个人电脑上往往具有多个接口，可以同时连接几个设备，如果接上一个有四个端口的USB HUB时，就可以再连上；四个USB设备，以此类推，尽可以连下去，将你家的设备都同时连在一台个人电脑上而不会有任何问题(注：最高可连接至127个设备)。\n\n- 传送速度\n\n    1. USB 1.0是在1996年出现的，速度只有1.5Mb/s(位每秒)； 1998年升级为USB 1.1，速度也大大提升到12Mb/s ；\n\n    1. USB2.0规范是由USB1.1规范演变而来的。它的传输速率达到了480Mbps，折算为MB为60MB/s，足以满足大多数外设的速率要求。\n\n    1. USB 3.0的理论速度为5.0Gb/s，其实只能达到理论值的5成，那也是接近于USB 2.0的10倍了。\n\n    1. USB 3.1，传输速度为10Gbit/s，三段式电压5V/12V/20V，最大供电100W ，新型Type C插型不再分正反。\n\n\n## 串口和 USB 串口的区别\n\n![](./../../assets/get_started/usb_vs_uart.png)"}, "/soft/maixpy/zh/get_started/get_started_edit_file.html": {"title": "编辑并执行文件", "content": "---\ntitle: 编辑并执行文件\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门\ndesc: maixpy doc: 编辑并执行文件\n---\n\n\n\n## MaixPy 内置了文件系统\n\n前面说了， `MaixPy` 支持 `Flash` 使用的 `SPIFFS`（目前不支持创建目录）, 默认分配了 `3MB` 给 `SPIFF`（从`flash` `0xD00000`地址开始 `3M`）, 开机自动挂载到 `/flash` 目录下\n\n也支持 `FAT32` 格式`MBR`分区的 `Micro SD （TF）`卡 ,开机自动挂在到 `/sd` 目录下\n\n需要注意的是, 根目录只是用来挂载 Flash 或者 SD 卡, 具体的文件在 `/flash` 或者 `/sd` 目录下\n\n## 为什么需要编辑并执行文件\n\n在前面的实验中,我们直接在终端里面敲代码来一句一句执行,这样也简单方便,我们输入命令后会立即执行并及时得到返回的结果,这种交互方式称为 **`REPL（Read Eval Print Loop：交互式解释器）`**,\n这种方式的好处就是简单方便,使用起来和 Linux 终端十分相似,只是使用的语法换成了 MaixPy(Micropython)的语法。\n\n但是在实际运行的时候，我们希望代码保存在文件系统， 需要运行是直接运行文件，这样我们不用每次都敲代码,减少了很多麻烦\n\n\n## 编辑并保存文件\n\n### 方法一： 使用内置编辑器 [Micropython Editor(pye)](https://github.com/robert-hh/Micropython-Editor)\n\n在 MaixPy 中, 我们内置了一款编开源编辑器 [Micropython Editor(pye)](https://github.com/robert-hh/Micropython-Editor)\n\n使用 `os.listdir()` 可以查看当前目录下的文件,\n\n使用 `pye(\"hello.py\")` 可以创建文件并进入编辑模式, 快捷键等使用说明可以在[这里查看](https://github.com/robert-hh/Micropython-Editor/blob/master/Pyboard%20Editor.pdf)\n\n比如我们写入代码\n\n```python\nprint(\"hello maixpy\")\n```\n\n然后按 `Ctrl+S` 按 `Enter` 键保存, 按 `Ctrl+Q` 退出编辑\n\n**注意**： 使用这款编辑器对使用的串口工具有一定要求, 必须将 `BackSpace` 按键设置为 `DEL` 功能, 否则按 `BackSpace` 调用的是 `Ctrl+H` 一样的功能（即字符替换）。\n\nLinux 下推荐使用 `minicom`, 需要使用 `sudo minicom -s` 来设置,参考[前面的教程](env_serial_tools.md)\n\nWindows 下也一样, 根据自己使用的工具上网搜设置方法, 比如 `xshell` 搜 `xshell如何设置backspace为del` 得到结果：\n\n`文件` -> `属性` -> `终端` -> `键盘`,\n把 delete 和 backspace 序列改为 ASCII 127 即可.\n\n\n### 方法二： 使用 MaixPy IDE\n\n打开 `MaixPy IDE`, 连接开发板\n\n编辑文件,然后在顶端`Tool`（工具）菜单中, 使用顶端`Tool`(工具)菜单中的`发送文件`功能来发送文件,会保存到开发板并且文件名和电脑上的文件名相同\n\n当然也可以点击`将打开的文件保存为 boot.py` 来将代码保存到开发板的`boot.py`文件,中,下次开发板开机上电会自动执行这个文件\n\n\n\n![](../../assets/maixpy/maixpy_ide_tools.png)\n\n\n### 方法三： 使用工具 [uPyLoader](https://github.com/BetaRavener/uPyLoader) 读取到 PC（电脑)上编辑后再保存到开发板\n\n下载可执行文件:[release](https://github.com/BetaRavener/uPyLoader/releases)\n\n![uPyLoader](../../assets/other/uPyLoader.png)\n\n选择串口并点击 `Connect` 按钮来连接板子\n\n第一次运行该软件需要初始化, 点击 `File->Init transfer files` 来完成初始化,这会在板子里创建两个文件,分别是 `__upload.py` 和 `__download.py`。\n\n然后双击文件名即可打开文件并编辑,编辑完成后点击 `save` 来保存到开发板即可\n\n\n### 方法四： 使用工具 [rshell](https://github.com/dhylands/rshell) 读取到 PC（电脑)上编辑后再保存到开发板\n\n按照 `rshell` [项目主页](https://github.com/dhylands/rshell)的说明安装好 `rshell`\n\n```shell\nsudo apt-get install python3-pip\nsudo pip3 install rshell\nrshell -p /dev/ttyUSB1 # 这里根据实际情况选择串口\n```\n\n编辑文件\n\n```python\nls /flash\nedit /flash/boot.py\n# 编辑器使用方法和 vim 一样\n```\n\n## 执行文件\n\n使用 `os.chdir()` 切换当前目录到文件的目录,比如 `os.chdir(\"/flash\")`\n\n### 方法一： `import`\n\n然后执行 `import hello`\n\n即可看到输出 `hello maixpy`\n\n使用此方法简单易用,但是需要注意的是, 目前 `import` 只能使用一次, 如果第二次 `import`, 则文件不会再执行, 如果需要多次执行,建议使用下面的方法\n而且 `import` 也不会执行`if __name__ == \"__main__\":`条件下的代码，需要注意\n\n### 方法二： `exec()`\n\n使用 `exec()` 函数来执行\n\n```python\nwith open(\"hello.py\") as f:\n    exec(f.read())\n```\n\n### 方法三： 使用 **MaixPy IDE** 来执行\n\n打开文件, 然后点击执行按钮来执行，**注意**：这样执行代码和 `REPL`执行代码类似，只是将程序发送到开发板，并没有保存到文件系统，是一次性执行的\n\n![](../../assets/maixpy/maixpy_connect-success.png)\n\n### 方法四： 使用 uPyLoader 来执行\n\n连接好后选中文件, 点击 `excute` 按钮来执行文件\n\n\n### 方法五： 使用 ampy 来直接运行电脑上的文件\n\n[ampy](https://github.com/pycampers/ampy)\n\n执行命令 `ampy run file_in_PC.py` 来执行位于电脑上的文件（文件不会保存到开发板）\n\n## MaixPy 支持挂载文件系统到电脑么\n\n不支持， 因为使用的芯片 k210 没有 USB 功能， 无法模拟 U 盘设备，所以不能像 Microbit 和 STM32 的 Micropython 一样虚拟一个 U 盘"}, "/soft/maixpy/zh/get_started/mpfshell-lite/mpfshell-lite.html": {"title": "&emsp;&emsp;&emsp;一款 Shell 型 MicroPython 文件资源管理器⛺", "content": "# &emsp;&emsp;&emsp;一款 Shell 型 MicroPython 文件资源管理器⛺\n\n [English Docs](English.md)\n\n[![MIT](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![PyPI version](https://badge.fury.io/py/mpfshell-lite.svg)](https://badge.fury.io/py/mpfshell-lite)\n\n这个 mpfshell 的 lite 版是开发十分激进的版本，稳定版请参见 [mpfshell](https://github.com/wendlers/mpfshell) 。\n\n## 特点：\n\n1. 体积迷你，功能齐全的 MicroPython 管理工具，如：put\\get\\cat\\rm\\execfile 等等。\n\n2. 修复 Windows 大量使用问题，路径、乱码等等，但还是存在一些问题在陆续解决。\n\n3. Windows 下绿色单文件，开箱即用，也可使用 Python 跨平台运行。\n\n## 系统要求\n\n- Python 3.5.4 +\n- requirements.txt\n\n## 使用方法\n\n### 1. 到 [releases](https://github.com/junhuanchen/mpfshell-lite/releases) 下载 mpfs.exe。\n\n寻找你所用的系统版本并下载，如果下载很慢，可以用[微云地址](https://share.weiyun.com/5qIHqWY)，下载后双击运行它。\n\n![](readme/00.png)\n\n### 2. 使用 PIP 安装\n\n使用 Python 的 PIP 工具下载并安装，在控制台中输入`pip install mpfshell-lite`，然后输入 `mpfs` 即可运行。\n\n```shell\npip install mpfshell-lite\n\nmpfs\n```\n\n![](readme/01.png)\n\n## 连接你的硬件\n\n连接你的硬件，此时会出现当前硬件的端口号。\n\n``` unix\nlooking for all port...\nserial name : USB-SERIAL CH340 (COM5)  :  COM5\ninput ' open COM5 ' and enter connect your board.\n```\n\n输入如图的 'open COM5' 即可连接。\n\n![](readme/05.png)\n\n可以看到 `Connected to esp32` 已经连接了。\n\n### 进入 REPL 模式\n\n``` unix\nmpfs [/]> open\nlooking for all port...\nConnected to esp32\nmpfs [/]> repl\n>\n*** Exit REPL with Ctrl+Q ***\n\nMicroPython v1.10-220-ged36cfd56-dirty on 2019-05-28; ESP32 module with ESP32\nType \"help()\" for more information.\n>>>\n```\n\n![](readme/06.png)\n\n## 运行 micropython 代码。\n\n### 1.直接运行代码\n\n``` unix\nmpfs [/]> view\nlooking for all port...\nserial name : USB-SERIAL CH340 (COM5)  :  COM5\ncurrent open_args ser:COM5\nmpfs [/]> open COM5\nConnected to esp32\nmpfs [/]> exec print('hello world!')\nhello world!\nmpfs [/]>\n```\n\n![](readme/07.png)\n\n### 2.运行代码文件\n\n在 桌面 准备一个 Python 代码文件（.py） \n\n```python\nprint('hello world!')\n```\n\n![](readme/09.png)\n\n- 使用 exe 版本\n\n![](readme/11.png)\n\n将 exe 与 .py 放在一起，按以下命令操作。\n\n``` unix\nlooking for all port...\nserial name : USB-SERIAL CH340 (COM5)  :  COM5\ninput ' open COM5 ' and enter connect your board.\n\n** Micropython File Shell v0.9.1, sw@kaltpost.de & juwan@banana-pi.com **\n-- Running on Python 3.5 using PySerial 3.3 --\n\nmpfs [/]> open com5\nConnected to esp32\nmpfs [/]> runfile ts.py\nhello world!\nConnected to esp32\nmpfs [/]>\n```\n\n![](readme/13.png)\n\n- 使用 PIP 版本\n\n在 CMD 的控制台模式下，需要使用以下命令，先定位文件夹路径（lcd），再运行文件（runfile）。\n\n可以使用 lcd 定位到运行文件的路径下，如 `lcd C:/Users/Juwan/Desktop` （注意是 / 不是 \\，这让人很烦）\n\n``` unix\nmpfs [/]> open com5\nConnected to esp32\nmpfs [/]> lcd Desktop\nmpfs [/]> lls\n\nLocal files:\n\n <dir> blog\n       desktop.ini\n       editor.exe\n       mpfs-0.9.1.exe\n       ts.py\n\nmpfs [/]> runfile ts.py\nhello world!\nConnected to esp32\nmpfs [/]>\n```\n\n![](readme/15.png)\n\n## 使用帮助\n\n在程序中，你也可以通过 help + 命令 的方式获取对应的命令说明或参数等细节。\n\n![](readme/17.png)\n\n例如：`help cd`， 返回的是 `cd <TARGET DIR>\n​        Change current remote directory to given target.`。\n\n可以得知 它是用来改变 目标板子里的当前文件目录起点，相当于设置板子的文件夹默认路径在什么位置。\n\n\n## 常见错误\n\n连接硬件的时候，要特别注意死循环，如果在连接过程中板子存在没有任何延时的死循环，则会影响软件连接板子的成功率，尤其是没有延时的 main.py 死循环，这会导致上电后将无法连接硬件，你可以在复位连接后 rm main.py，这点需要注意，不过，有线串口的连接不成功则会进行板子的复位（ Mac 例外）。\n\n## 详解工具\n\n### 0. 支持的系统版本\n\n| 系统类型 | 系统版本         | 运行情况 | 注意事项            |\n| -------- | ---------------- | -------- | ------------------- |\n| Windows  | WIN7 - WIN10     | 正常     | 原生 CMD 不支持 TAB |\n| Linux    | Lubuntu - Ubuntu | 正常     | 原生 Shell 支持 TAB |\n| Mac      | Darwin           | 正常     | 与 Unix 均一致      |\n\n### 1. 重要的功能操作\n\n| 操作方法                      | 不同系统工具支持情况              | 运行效果                                                     | 注意事项                                                     |\n| ----------------------------- | --------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 输入一些内容后通过 TAB 键补全 | 仅 shell、repl、powershell 支持。 | 如果想要打 import 只需要 输入 i 后在按下 TAB 键就可以自动补全了，比如 linux 下，输入 ttyUSB0，只需要 i + TAB 键就可以了。 | 前提是，该命令被系统提前输入过，否则它没办法补全，它只能补全历史输入的信息。 |\n| 左键复制选取，右键粘贴选取    | 仅 Windows的系统支持。            | 开启 **CMD控制台** 程序的属性里的 **快速编辑** 功能，可以让程序支持鼠标 点击暂停程序后点左键拖动复制文本内容。 | 如果选取的是多行代码或命令，不代表可以直接使用，所以一般都是选取一行的。 |\n| 上下左右按键及退格            | 均支持                            | 上下按键可以切换读取历史输入过的命令，左右方向键以及程序退格操作可以对自己输入过的内容进行修改。 | 仅针对windows做了修复。                                    |\n\n### 2. 所有命令的用法\n\n命令中的括号为简写，方便使用。\n\n| 命令类型     | 使用方法                                                     | 运行结果                                             | 注意事项                                                     |\n| ------------ | ------------------------------------------------------------ | ---------------------------------------------------- | ------------------------------------------------------------ |\n| open (o)      | 打开当前设备。格式有：有线串口 `open com3`，无线有 `ws:192.168.10.114,1234` | 连接成功后返回 `Connected to esp32`                  | 控制板子前，需要先打开连接。括号为简写。                     |\n| close        | 关闭当前设备。                                               |                                                      |                                                              |\n| quit (q)         | 输入                                                             | 退出程序                                                   |                                                              |\n| EOF          | 输入                                                         | 退出程序                                             | 无                                                           |\n| cat (c)          | 输入 文件名，例如 `cat boot.py`                              | 将板子的指定文件内容打印出来，以便快速查看。                   | 无                                                           |\n| put          | 把当前目录下的文件推送到板子，例如`put boot.py`              | 无                                                   | 失败会返回错误信息                                           |\n| get          | 获取板子当前目录下的文件，例如`get boot.py`                  | 在程序运行的目录（lpwd）下多了一个 boot.py 文件              |                                                              |\n| mput         | 与 put 相对，以板子为主，对程序的目录操作。                  |                                                      |                                                              |\n| mget         | 与 get 相对，以板子为主，对程序的目录操作。                  |                                                      |                                                              |\n| repl (e)      | 进入 python 的 repl 控制接口                                 | 可以直接执行python代码。                             |                                                              |\n| exec (e)     | 输入 Python 代码，例如`exec print('hello')`                  | 返回print('hello')的运行结果 hello                   | 只能执行一行 python 代码。括号为简写。                        |\n| execfile (ef) | 执行板子中存在的python文件，例如`execfile main.py`           | 执行 main.py 的效果                                  | 括号为简写。                                              |\n| lexecfile (lef) | 执行程序下存在的python文件，例如`lexecfile main.py`           | 执行 main.py 的效果                                  | 括号为简写，与 runfile 不同的是会进入repl模式，所以支持input操作。                                              |\n| runfile (rf)  | 结合了 put 和 execfile 命令                                  |                                                      | 括号为简写。                                                 |\n| cd           | 输入 指定板子里的目录，例如 `cd /` 或  `cd D:/Users`                           | 修改程序访问板子的所处目录                           | 以 `/` 分隔的linux路径。 |\n| md           | 输入 目录名称                                                | 在板子上新建一个目录                                 | 无                                                           |\n| lcd          | 输入 指定现在程序里的目录，例如 `cd /`                       | 修改程序访问板子的所处目录                           | 以 `/` 分隔的linux路径。 |\n| pwd          | 输入`pwd`                                                    | 返回当前板子所处的目录                               | 无                                                           |\n| lpwd         | 输入 `lpwd`                                                  | 返回当前程序所处的目录                               | 无                                                           |\n| mpyc         | 输入 当前目录下的 python 文件，例如 `mpyc main.py`           | 把 python 代码 pyc 化静态编译代码处理，生成 main.pyc | 需要系统里有 mpy-cross 命令                                                            |\n| mrm          | 输入指定的目录或文件名 `rm 目录或文件名`                                     | 移除系统里的该目录或文件名                                           |                                                              |\n| rm           | 输入指定的目录或文件名 `rm 目录或文件名`                                     | 移除板子里的该目录或文件名                                           |                                                              |\n| ls           | 输入` ls /`                                                  | 查看 板子 当前目录下的所有文件                       |                                                              |\n| lls          | 输入 `lls /`                                                 | 查看 程序 当前目录下的所有文件                       |                                                              |\n| view          | 输入 `view`                                                 | 查看 本机 可能的串口，和当前的 open 配置                       |                                                              |\n| help         | 查看命令的帮助，例如：`help lls`                             |                                                      |\n\n# pyinstaller\n\n1. create mpfs.exe\n\npyinstaller -F mpfs -i logo.ico\n\n# uplaod pypi\n\n```shell\npython setup.py sdist build\n```\n\n```shell\n# pip install twine\ntwine upload dist/* --verbose\n```"}, "/soft/maixpy/zh/get_started/mpfshell-lite/mpfshell-lite-help.html": {"title": "Document", "content": "# Document\n\n### Mpfshell 使用手册\n\n由于本章涉及的内容不适合图示说明，所以均已表格或文字说明。\n\n在 python3.5 以上使用命令 `pip install mpfshell-lite` 即可安装，接着输入 `mpfshell-lite` 即可打开运行。\n\n\n\n##### 0. 了解不同的支持版本\n\n| 系统类型 | 系统版本         | 运行情况 | 注意事项            |\n| -------- | ---------------- | -------- | ------------------- |\n| Windows  | WIN7 - WIN10     | 正常     | 原生 CMD 不支持 TAB |\n| Linux    | Lubuntu - Ubuntu | 正常     | 原生 Shell 支持 TAB |\n| Mac      | Darwin           | 正常     | 与 Unix 均一致      |\n\n\n\n##### 1. 了解重要的功能操作\n\n| 操作方法                      | 不同系统工具支持情况              | 运行效果                                                     | 注意事项                                                     |\n| ----------------------------- | --------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 输入一些内容后通过 TAB 键补全 | 仅 shell、repl、powershell 支持。 | 如果想要打 import 只需要 输入 i 后在按下 TAB 键就可以自动补全了，比如 linux 下，输入 ttyUSB0，只需要 i + TAB 键就可以了。 | 前提是，该命令被系统提前输入过，否则它没办法补全，它只能补全历史输入的信息。 |\n| 左键复制选取，右键粘贴选取    | 仅 Windows的系统支持。            | 开启 **CMD控制台** 程序的属性里的 **快速编辑** 功能，可以让程序支持鼠标 点击暂停程序后点左键拖动复制文本内容。 | 如果选取的是多行代码或命令，不代表可以直接使用，所以一般都是选取一行的。 |\n| 上下左右按键及退格            | 均支持                            | 上下按键可以切换读取历史输入过的命令，左右方向键以及程序退格操作可以对自己输入过的内容进行修改。 | 仅针对windows做了修复。                                    |\n\n##### 2. 了解所有功能的命令\n\n| 命令类型     | 使用方法                                                     | 运行结果                                             | 注意事项                                                     |\n| ------------ | ------------------------------------------------------------ | ---------------------------------------------------- | ------------------------------------------------------------ |\n| open(o)      | 打开当前设备。格式有：有线串口 `open com3`，无线有 `ws:192.168.10.114,1234` | 连接成功后返回 `Connected to esp32`                  | 控制板子前，需要先打开连接。括号为简写。                     |\n| close        | 关闭当前设备。                                               |                                                      |                                                              |\n| quit         | 输入                                                             | 退出程序                                                   |                                                              |\n| EOF          | 输入                                                         | 退出程序                                             | 无                                                           |\n| cat          | 输入 文件名，例如 `cat boot.py`                              | 将板子的指定文件打印出来快速查看。                   | 无                                                           |\n| put          | 把当前目录下的文件推送到板子，例如`put boot.py`              | 无                                                   | 失败会返回错误信息                                           |\n| get          | 获取板子当前目录下的文件，例如`get boot.py`                  | 在程序运行的目录下多了一个 boot.py 文件              |                                                              |\n| mput         | 与 put 相对，以板子为主，对程序的目录操作。                  |                                                      |                                                              |\n| mget         | 与 get 相对，以板子为主，对程序的目录操作。                  |                                                      |                                                              |\n| repl(e)      | 进入 python 的 repl 控制接口                                 | 可以直接执行python代码。                             |                                                              |\n| exec (e)     | 输入 Python 代码，例如`exec print('hello')`                  | 返回print('hello')的运行结果 hello                   | 只能执行一行 python 代码。括号为简写。                       |\n| execfile(ef) | 执行板子中存在的python文件，例如`execfile main.py`           | 执行 main.py 的效果                                  | 括号为简写。                                              |\n| lexecfile(ef) | 执行程序下存在的python文件，例如`lexecfile main.py`           | 执行 main.py 的效果                                  | 括号为简写，与 runfile 不同的是会进入repl模式，所以支持input操作。                                              |\n| runfile(rf)  | 结合了 put 和 execfile 命令                                  |                                                      | 括号为简写。                                                 |\n| cd           | 输入 指定板子里的目录，例如 `cd /`                           | 修改程序访问板子的所处目录                           | 以 `/` 开头的linux路径，尽量不要改变路径，除非你十分清楚自己在做什么。 |\n| md           | 输入 目录名称                                                | 在板子上新建一个目录                                 | 无                                                           |\n| lcd          | 输入 指定现在程序里的目录，例如 `cd /`                       | 修改程序访问板子的所处目录                           | 以 `/` 开头的linux路径，尽量不要改变路径，除非你十分清楚自己在做什么。 |\n| pwd          | 输入`pwd`                                                    | 返回当前板子所处的目录                               | 无                                                           |\n| lpwd         | 输入 `lpwd`                                                  | 返回当前程序所处的目录                               | 无                                                           |\n| mpyc         | 输入 当前目录下的 python 文件，例如 `mpyc main.py`           | 把 python 代码 pyc 化静态编译代码处理，生成 main.pyc |                                                              |\n| mrm          | 输入程序当前的 `rm 目录或文件名`                                     | 移除该目录或文件名                                           |                                                              |\n| rm           | 输入板子当前的 `rm 目录或文件名`                                     | 移除该目录或文件名                                           |                                                              |\n| ls           | 输入` ls /`                                                  | 查看 板子 当前目录下的所有文件                       |                                                              |\n| lls          | 输入 `lls /`                                                 | 查看 程序 当前目录下的所有文件                       |                                                              |\n| view          | 输入 `view`                                                 | 查看 本机 可能的串口，和当前的 open 配置                       |                                                              |\n| help         | 查看命令的帮助，详细看本节结尾。                             |                                                      |                                                              |\n\n在程序中，你也可以通过 help + 命令 的方式获取对应的命令说明或参数等细节。\n\n例如：`help cd`， 返回的是 `cd <TARGET DIR>\n​        Change current remote directory to given target.`。\n\n可以得知 它是用来改变 目标板子里的当前文件目录起点，相当于设置板子的文件夹默认路径在什么位置。\n\n提示：连接板子的时候，要特别注意死循环，如果在连接过程中板子存在没有任何延时的死循环，则会影响软件连接板子的成功率，尤其是没有延时的 mian.py 死循环，这会导致上电后将无法连接无线模式，这点需要注意，不过，有线串口的连接不成功则会进行板子的复位。"}, "/soft/maixpy/zh/get_started/mpfshell-lite/English.html": {"title": "&emsp;&emsp;&emsp;&emsp;A Shell Type Micropython File Explorer⛺", "content": "# &emsp;&emsp;&emsp;&emsp;A Shell Type Micropython File Explorer⛺\n\n[中文文档](README.md)\n\n[![MIT](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![PyPI version](https://badge.fury.io/py/mpfshell-lite.svg)](https://badge.fury.io/py/mpfshell-lite)\n\nThe lite version of this mpfshell is an aggressive development version. The stable version is available at [mpfshell](https://github.com/wendlers/mpfshell).\n\n## Features:\n\n1. Compact, full-featured MicroPython management tools, such as: put\\get\\cat\\rm\\execfile and so on.\n\n2. Fixed the problem of massive use of Windows, such as path, garbled code, etc., but some problems are still being solved in succession.\n\n3. Green single file under Windows, out of the box, or using Python for cross-platform operation.\n\n## System requirements\n\n- Python 3.5.4 +\n- requirements.txt\n\n## Uasge\n\n### 1. into [releases](https://github.com/junhuanchen/mpfshell-lite/releases) download mpfs.exe.\n\nFind the version of the system you are using and download it.\n\n![](readme/00.png)\n\n### 2. Install using PIP\n\nUsing the Python PIP tool to download and install, in the console input ` pip insrall mpfshell-lite`, then enter `mpfs` can run.\n\n```shell\npip install mpfshell-lite\n\nmpfs\n```\n\n![](readme/01.png)\n\n## Connect your hardware\n\nConnect to your hardware and the port number of the current hardware will appear.\n\n```\nlooking for all port...\nserial name : USB-SERIAL CH340 (COM5)  :  COM5\ninput ' open COM5 ' and enter connect your board.\n```\n\nEnter 'open COM5' as shown in the figure to connect.\n\n![](readme/05.png)\n\nYou can see ` Connected to esp32 ` already Connected.\n\n## Run micropython code.\n\n### 1.Run the code directly\n\n```\nmpfs [/]> view\nlooking for all port...\nserial name : USB-SERIAL CH340 (COM5)  :  COM5\ncurrent open_args ser:COM5\nmpfs [/]> open COM5\nConnected to esp32\nmpfs [/]> exec print('hello world!')\nhello world!\nmpfs [/]>\n```\n\n![](readme/07.png)\n\n### 2.Run the code file\n\nPrepare a Python code file (.py) on your desktop\n\n```python\nprint('hello world!')\n```\n\n![](readme/09.png)\n\n- use the exe version\n\n![](readme/11.png)\n\nPut exe with .py and follow these commands.\n\n```\nlooking for all port...\nserial name : USB-SERIAL CH340 (COM5)  :  COM5\ninput ' open COM5 ' and enter connect your board.\n\n** Micropython File Shell v0.9.1, sw@kaltpost.de & juwan@banana-pi.com **\n-- Running on Python 3.5 using PySerial 3.3 --\n\nmpfs [/]> open com5\nConnected to esp32\nmpfs [/]> runfile ts.py\nhello world!\nConnected to esp32\nmpfs [/]>\n```\n\n![](readme/13.png)\n\n- use the PIP version\n\nIn CMD console mode, you need to use the following command to locate the folder path (LCD) and then run the file (runfile).\n\n\nYou can use the LCD location to run a file path, such as `lcd C:/Users/Juwan/Desktop` (note that is `/` is not `\\`, this let a person tired)\n\n```\nmpfs [/]> open com5\nConnected to esp32\nmpfs [/]> lcd Desktop\nmpfs [/]> lls\n\nLocal files:\n\n <dir> blog\n       desktop.ini\n       editor.exe\n       mpfs-0.9.1.exe\n       ts.py\n\nmpfs [/]> runfile ts.py\nhello world!\nConnected to esp32\nmpfs [/]>\n```\n\n![](readme/15.png)\n\n## Use help\n\nIn the program, you can also get the details of the corresponding command description or parameters by using the help + command.\n\n![](readme/17.png)\n\nFor example: `help cd`， returns the `cd <TARGET DIR>\n​        Change current remote directory to given target.`。\n\nYou can see that it is used to change the current file directory starting point in the target board, equivalent to setting the default path of the folder in the board.\n\n## Common mistakes\n\nIf there is a dead loop without any delay in the connection process, it will affect the success of the software connection board, especially the dead loop of main.py without delay, which will lead to the failure to connect to the hardware after power on. You can reset the connection rm main.py, which needs to be noted.\n\n## Dissection tool\n\n### 0. Supported version of the system\n\n| system type | system version | running condition | notes |\n| -------- | ---------------- | -------- | ------------------- |\n| Windows | win7-win10 | normal | native CMD does not support TAB |\n| Linux | luubuntu | normal | native Shell supports TAB |\n| Mac | Darwin | normal | is consistent with Unix |\n\n### 1. Important functional operations\n\n| operation method | different system tools support | run effect | notes                                               |\n| ----------------------------- | --------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Enter something and complete it with the TAB key | Only the shell, repl, powershell support. | If you want to type \"import\", you only need to input \"i\" and then press the TAB key to complete it automatically. For example, in Linux, you can input \"ttyUSB0\" and only need \"i + TAB\". | It can only input completion history. |\n| Left copy selection, right paste selection    | Windows only system support.           | Open the CMD console program attributes in the quick edit function, can let the program supports the mouse to click suspended after some drag copying the text content. | Are generally choose a line. |\n| Up, down, left and right buttons and backspace            | all supports.                            | You can modify what you've typed. | Fixes were made for Windows                                   |\n\n### 2. All of the use of the command\n\nCommand the braces for short, easy to use.\n\n| command type | USES method | to run the result | note |\n| ------------ | ------------------------------------------------------------ | ---------------------------------------------------- | ------------------------------------------------------------ |\n| open (o) | opens the current device. Format: a serial port cable ` open com3 `, wireless ` ws: 192.168.10.114, 1234 ` | connection after a successful return to ` Connected to esp32 ` | control board before, need to open the connection first. The parentheses are shorthand.             |\n| close        | closes the current device.                                               |                                                      |                                                              |\n| quit (q)         | enters                                                              | exit the program                                                   |                                                              |\n| EOF          | enters                                                         |  exit the program                                                    |                                                            |\n| cat (c)          | Enter the file name, such as `cat boot.py`                              | Prints out the contents of the specified file on the board for quick viewing.                   |                                                            |\n| put          | Push files from the current directory to the board, for example `put boot.py`              |                                                    | Failure returns an error message                                           |\n| get          | Gets the files in the current directory of the board, for example `get boot.py`                  | Boot.py is added to the directory where the program is running (lpwd)              |                                                              |\n| mput         | Opposite to put                 |                                                      |                                                              |\n| mget         | Opposite to put                |                                                      |                                                              |\n| repl (e)      | Enter python's repl control interface                                 | You can execute python code directly.                             |                                                              |\n| exec (e)     | input Python Code, for example `exec print('hello')`                  | Returns the run result of print('hello')                   | Only one line of python code can be executed.                        |\n| execfile (ef) | Python files that exist in the execution board, for example `execfile main.py`           | Execute the effect of main.py                                  |                                               |\n| lexecfile (lef) | A python file that exists under the execution program, for example `lexecfile main.py`           | Execute the effect of main.py                                  | Unlike runfile will enter repl mode, so support input() operations.                                              |\n| runfile (rf)  | It combines the put and execfile commands                                  |                                                      |                                                  |\n| cd           | input Specify the directory in the board, for example `cd /` 或  `cd D:/Users`                           | Modify the program to access the board of the directory                           | To ` / ` separate Linux path. |\n| md           | input Directory name                                                | Create a new directory on the board                                 |                                                            |\n| lcd          | input Specifies the current directory in the program, for example `cd /`                       | Modify the directory in which the program accesses the board                           | To ` / ` separate Linux path. |\n| pwd          | input`pwd`                                                    | Returns the directory on the current board                               |                                                            |\n| lpwd         | input `lpwd`                                                  | Returns the directory in which the current program resides                               |                                                            |\n| mpyc         | input Python files in the current directory, for example `mpyc main.py`           | Pyc python code static compilation code processing, generate main.pyc | need to have mpy-cross command in the system                                                            |\n| mrm          | Enter the specified directory or file name `rm Directory or file name`                                     | Removes the directory or file name from the system                                           |                                                              |\n| rm           | Enter the specified directory or file name `rm Directory or file name`                                     | Removes the directory or file name from the board                                           |                                                              |\n| ls           | input` ls /`                                                  | View all files in the board's current directory                       |                                                              |\n| lls          | input `lls /`                                                 | View all files in the program's current directory                       |                                                              |\n| view          | input `view`                                                 | View the possible serial ports on the machine, and the current open configuration                     |                                                              |\n| help         | View the help command, for example : `help lls`                             |                                                      |\n\n# pyinstaller\n\n1. create mpfs.exe\n\npyinstaller -F mpfs -i logo.ico\n\n# uplaod pypi\n\n```shell\npython setup.py sdist build\n```\n\n```shell\n# pip install twine\ntwine upload dist/* --verbose\n```"}, "/soft/maixpy/zh/get_started/upgrade_maixpy_firmware.html": {"title": "更新 MaixPy 固件", "content": "---\ntitle: 更新 MaixPy 固件\nkeywords: maixpy, k210, AIOT, 边缘计算, maix固件\ndesc: maixpy doc: 更新 MaixPy 固件\n---\n\n\n## 准备\n\n硬件:\n\n- USB Type-C 数据线\n- MaixPy 开发板\n- PC(电脑)\n\n软件:\n\n- MaixPy 开发板 USB 驱动程序\n- kflash_gui\n\n## 确认驱动已经正确安装\n\n按照前面的说明安装好驱动，并且在电脑中能看到串口设备, `Linux` 和 `Mac OS` 执行 `ls /dev/` 即可看到设备号，比如名字是`ttyUSB0`和`ttyUSB1`; `Windows`在设备管理器中查看\n\n\n## 获得升级工具\n\n* 下载 <a href = \"https://github.com/sipeed/kflash_gui/releases\" target = \"_break\">kflash_gui</a>, 会得到一个压缩包\n> kflash_gui 是跨平台的，可以在多个系统下工作（包括 Windows、Linux、MacOS、甚至树莓派）\n> 使用勘智（Kendryte）的`Windows`版本可能部分开发版无法下载成功，请使用 `kflash_gui` 这个软件来下载\n\n* 解压到一个文件夹，双击 `kflash_gui.exe`(/`kflsh_gui`) 即可运行, `Windows`下建议右键`固定到开始页面` 或者`固定到任务栏`, `Linux` 下可以自己新建一个<a href=\"https://github.com/sipeed/kflash_gui/blob/master/kflash_gui.desktop\" target=\"_break\">kflash_gui.desktop</a>, 修改文件地址, 使用管理员身份复制到`/usr/share/application`目录，然后在系统菜单界面就可以看到`kflash_gui`这款应用了\n\n* 另外也可以使用命令行版本下载\n\n```shell\npip3 install kflash\nkflash --help\nkflash -p /dev/ttyUSB0 -b 1500000 -B goE maixpy.bin\n```\n\n## 获得固件\n\n* 发布版本的固件从 <a href =\"https://github.com/sipeed/MaixPy/releases\" target=\"_break\">github</a> 页面下载\n* 在Sipeed官方下载站获取：<a href =\"http://dl.sipeed.com/MAIX/MaixPy/release/master/\" target=\"_break\">下载站</a>\n\n\n\n固件为 `.bin` 结尾或者 `.kfpkg` 的文件\n>`.kfpkg`其实就是多个`.bin`文件的打包版本, 可以使用`kflash_gui`打包或者<a href=\"http://blog.sipeed.com/p/390.html\" target=\"_break\" >[手动打包](http://blog.sipeed.com/p/390.html)</a>\n\n![MaixPy Firmware Type](../../assets/maixpy/firmware_type.png)\n\n固件命名说明：\n\n| 文件名                                              | 说明                                                         | 备注                       |\n| --------------------------------------------------- | ------------------------------------------------------------ | -------------------------- |\n| `maixpy_vx.y.z_x_xxx*.bin`                          | 默认版本的 MaixPy 固件，包含了大多数功能, 支持连接 `MaixPy IDE`, | -           |\n| `maixpy_vx.y.z_x_xxx*_m5stickv.bin`                 | 针对 M5Stickv 定制的固件, 支持连接 `MaixPy IDE`              | —                          |\n| `maixpy_vx.y.z_x_xxx*_with_lvgl.bin`                | MaixPy 固件, 支持连接 `MaixPy IDE`, 带 LVGL 版本.(LVGL是嵌入式 GUI 框架, 写界面的时候需要用到) | —                          |\n| `maixpy_vx.y.z_x_xxx*_minimum.bin`                  | MaixPy 固件最小集合，不支持 `MaixPy IDE`, 不包含`OpenMV`的相关算法和各种外设模块 | —                          |\n| `maixpy_vx.y.z_x_xxx*_minimum_with_ide_support.bin` | MaixPy 固件最小集合, 支持连接 `MaixPy IDE`, 不包含`OpenMV`的相关算法和各种外设模块 | 运行各种模型，建议使用这个 |\n| `elf_maixpy_vx.y.z_x_xxx*.7z`                       | elf 文件，普通用户不用关心，用于死机调试                     | —                          |\n| `face_model_at_0x300000.kfpkg`                      | 人脸模型，放置在地址位 0x300000, 可以和`.bin`分开多次下载，不冲突 | —                          |\n\n出厂的固件是不一样的，不同的开发板，固件不一样，所以出现无法链接ide和屏幕白屏的时候，需要替换固件\n\n\n## 下载固件到开发板\n\n* 打开 `kflash_gui` 应用\n\n* 然后选择固件、设置选项, 点击下载即可, 更多特性介绍、使用说明见 <a herf=\"https://github.com/sipeed/kflash_gui\">kflash_gui 项目主页</a>\n\n使用时注意串口不能被其它软件占用，选择正确的开发板和串口号，可以适当降低波特率和使用低速模式来提高下载成功率\n\n![](../../assets/kflash_gui/kflash_gui_download.png)\n\n\n\n\n> 对于最早期的 `Maix Go`, 如果确认选项是对的，仍然无法下载, 可以尝试将三相拨轮按键拨向 `Down` 的位置并保持再下载\n\n### Sipeed RV JATG 调试器\n\n<a herf=\"https://github.com/sipeed/kflash_gui\">Sipeed USB-JTAG/TTL RISC-V调试器 STLINK V2 STM8/STM32模拟器</a>\n\n\n**烧录常见问题FAQ**\n\n如果在使用 `kflash_gui` 烧录出现以下等问题\n\n![Upgrade Error](../../assets/kflash_gui/kflash_gui_upgrade_error.png)\n\n可以按照以下顺序进行排查\n\n* 检查`PC`是否有权限打开端口，对于 `win10`，需要以管理员身份运行 `kflash_gui`  。\n* 检查端口是否选择正确（如果出现两个设备端口，通常选择端口号小的那一个）。\n* 检查端口是否被其他应用占用（如`Maixpy IDE`，`putty`等），应当关闭其他程序占用。\n* 检查设备是否选择正确，对于 `Maix Bit2.0`（包括M1n模块），应该选择 `Maix Bit ( with Mic )`。\n\n> 补充说明：对于Maix Bit 2.0两个串口端口的问题\n>\n> * 只有其中一个串口端口有效，用于串口通信与ISP下载程序。\n> * Maix Bit与PC采用串口通信，通过CH552T芯片实现USB虚拟串口功能，而该芯片可以虚拟出两个串口，在Maix Bit（M1n模块底板）中，我们只用到了一个串口，不过有些k210产品两个串口都使用了。\n\n## 最新标准固件下载\n2021/6/18更新：[标准固件下载](https://dl.sipeed.com/fileList/MAIX/MaixPy/release/master/maixpy_v0.6.2_54_g897214100/maixpy_v0.6.2_54_g897214100.bin)\n\n## 固件更新信息\n| 日期 | 版本号 | 备注 |\n| --- | --- | --- |\n| 2021/7/27 | 固件版本 0.6.2_57 | 加入了安装教程视频中的测试模式，可以开机检测sd卡是否挂载 |"}, "/soft/maixpy/zh/get_started/knowledge_image.html": {"title": "图像处理背景知识", "content": "---\ntitle: 图像处理背景知识\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门, 人工智能\ndesc: maixpy doc: 图像处理背景知识\n---\n\n\n\n## 什么是摄像头？\n\n我们都见过各种摄像头，比如\n\n<img src=\"../../assets/other/camera_mi.png\" height=\"200\">\n<img src=\"../../assets/hardware/module/camera.png\" height=\"200\">\n\n那么什么是摄像头，说到底，就是一个将光学信号转变成电信号的一个装置。在计算机视觉中，最简单的相机模型是`小孔成像模型`：\n\n![](../../assets/other/Pinhole-camera.svg)\n\n小孔模型是一种理想相机模型，没有考虑实际相机中存在的场曲、畸变等问题。但是在实际使用时，这些问题可以通过在标定的过程中引入`畸变参数`解决，所以小孔模型仍然是目前最广泛使用的相机模型。\n\n图像透过镜头，照在一个感光芯片上，感光芯片可以把光照的波长和强度等信息转成计算机(数字电路)可以识别的数字信号，`感光元件`是长这样的：\n\n![camera sensor](../../assets/other/sensor.png)\n\n(中间的方形元件就是感光元件)\n\n## 什么是像素和分辨率？\n\n感光元件是有很多个感光点构成的，比如有 `640` x `480` 个点，每个点就是一个像素，把每个点的像素收集整理起来，就是一副图片，那么这张图片的分辨率就是 640x480：\n\n## 什么是帧率\n\n帧率(FPS)就是每秒钟处理的图片数量，如果超过20帧，人眼就基本分辨不出卡顿。当然，如果用在机器上，帧率越高越好。\n\n## 什么是颜色\n\n物理上，颜色就是不同波长的电磁波。\n\n![sRGB rendering of the spectrum of visible light](../../assets/other/1920px-Linear_visible_spectrum.svg.png)\n\n|颜色|频率       |波长|\n| --- | --- | --- |\n|紫色|668–789 THz|380–450 nm|\n|蓝色|631–668 THz|450–475 nm|\n|青色|606–630 THz|476–495 nm|\n|绿色|526–606 THz|495–570 nm|\n|黄色|508–526 THz|570–590 nm|\n|橙色|484–508 THz|590–620 nm|\n|红色|400–484 THz|620–750 nm|\n\n\n但是，根据人眼的视觉效果，可以通过 RGB，CMYK，HSB，LAB 色域，来将可见光的颜色描述出来。\n\n## RGB 三原色\n\n三原色的原理不是物理原因，而是由于人的生理原因造成的。人的眼睛内有几种辨别颜色的锥形感光细胞，分别对黄绿色、绿色和蓝紫色(或称紫罗兰色)的光最敏感(波长分别为564、534和420纳米)。\n\n所以 RGB 经常用于显示器上，用来显示图片。\n\n- LAB 亮度-对比度\nLab颜色空间中，L亮度；a的正数代表红色，负端代表绿色；b的正数代表黄色，负端代表兰色。不像RGB色彩空间，Lab颜色被设计来接近人类视觉。\n\n因此L分量可以调整亮度对，修改a和b分量的输出色阶来做精确的颜色平衡。\n\n注意：在MaixPy的查找色块的算法中，运用的就是这个LAB模式！\n\n- 光源的选择\n\n如果你的机器是在工业上，或者24小时长时间运行的设备，保持一个稳定的光源是至关重要的，尤其在颜色算法中。亮度一变，整个颜色的值会变化的很大！\n\n\n## 镜头的焦距\n\n因为图像是通过镜头的光学折射，照到感光元件上的。那么镜头就决定了，整个画面的大小和远近。一个最重要的参数就是焦距。\n\n![focal_distance](../../assets/other/focal_distance.jpg)\n\n**镜头焦距**：是指镜头光学后主点到焦点的距离，是镜头的重要性能指标。镜头焦距的长短决定着拍摄的成像大小，视场角大小，景深大小和画面的透视强弱。当对同一距离远的同一个被摄目标拍摄时，镜头焦距长的所成的象大，镜头焦距短的所成的象小。注意焦距越长，视角越小。\n\n\n还有一点是镜头的畸变，因为光学原理，在感光芯片上不同的位置，与镜头的距离不同的，简单说就是近大远小，所以在边缘会出现鱼眼效果(桶型畸变)。为了解决这个问题，可以在代码中使用算法来矫正畸变，注：MaixPy中使用image.lens_corr(1.8)来矫正2.8mm焦距的镜头。也可以直接使用无畸变镜头。无畸变镜头加入了额外的矫正透镜部分，价格自然会高不少。\n\n## 镜头的滤片\n\n在镜头上，通常会有一个滤片。\n![camera sensor](../../assets/other/sensor_1.png)\n\n这个滤片是做什么的呢？\n\n我们知道，不同颜色的光，是波长不一样。在正常环境中，除了可见光，还有很多红外光，在夜视中，用的就是红外光。\n\n但是，在正常颜色应用中，是不需要红外光的，因为红外光也会使感光元件受到反应，就使得整个画面泛白。所以我们在镜头上放一个只能通过波长 650nm 以内的滤光片，将红外光进行过滤。"}, "/soft/maixpy/zh/get_started/upgrade_stm32_firmwave.html": {"title": "MaixGo 更新板载 STM32 调试器固件", "content": "---\ntitle: MaixGo 更新板载 STM32 调试器固件\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: MaixGo 更新板载 STM32 调试器固件\n---\n\n\nMaixGo 开发板板载了一块基于 STM32 的调试器"}, "/soft/maixpy/zh/get_started/env_serial_tools.html": {"title": "串口连接", "content": "---\ntitle: 串口连接\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门\ndesc: maixpy doc: 使用串口工具\n---\n\n\n\n\n## 连接硬件\n\n连接 Type C 线， 一端电脑一端开发板\n\n查看设备是否已经正确识别：\n\n在 Linux 下可以通过 `ls /dev/ttyUSB*` 或者 `ls /dev/ttyACM*` 来查看， 如果没有可以 `ls /dev` 来找找，具体的设备名跟串口芯片和驱动有关. 也可以用`sudo dmesg`来看是否有设备挂载记录\n\n在 Windows 下可以打开设备管理器来查看\n\n如果没有发现设备， 需要确认有没有装驱动以及接触是否良好\n\n\n## 使用串口工具\n\n### Windows\n\nWindows 常用的串口终端软件有 [putty](https://www.putty.org/)，[mobaxterm](https://mobaxterm.mobatek.net/)，[xshell](https://xshell.en.softonic.com/)，[mpfshell-lite](./mpfshell-lite/mpfshell-lite.html) 等工具\n\n#### Putty\n\n然后选择串口模式， 然后设置串口和波特率，打开串口。\n\n![](../../assets/get_started/putty.png)\n\n然后按下复位键，即可看到 MaixPy 的交互界面了\n\n![](../../assets/get_started/putty1.png)\n\n输入 `help()`，可以查看帮助\n\n> 上图来源： [laurentopia 的上手教程](https://github.com/laurentopia/Learning-AI/wiki/MaixPy)\n\n#### Mobaxterm\n\n[MobaXterm](https://mobaxterm.mobatek.net/) 是 Windows 下一款非常好用的多功能终端软件（当然也包括串口终端）\n\n![Mobaxterm](../../assets/get_started/mobaxterm_serail_port.png)\n![Mobaxterm](../../assets/get_started/mobaxterm.png)\n\n#### mpfshell-lite\n[mpfshell-lite](./mpfshell-lite/mpfshell-lite.html)是一款体积迷你，功能齐全的 MicroPython 管理工具，可以对flash、sd卡的文件进行管理，也可以进行micropython的编写。\n\n\n### Linux\n\n使用 python 中的 pyserial 进行开发板的连接\n\n- 安装 pyserial \n\n\n    sudo python3 -m pip install pyserial\n\n- 连接开发板\n\n\n    sudo python3 -m serial.tools.miniterm --raw --dtr 0 --rts 0 /dev/ttyUSB0 115200\n\n![](../../assets/get_started/linux-python.png)\n\n- 复位开发板\n\n通过按两次键盘上的，CTRL+T 和 CTRL+R，可实现复位\n\n- 退出串口\n\n按键盘上的 CTRL + ]\n\n> 可以通过运行 `sudo usermod -a -G dialout $(whoami)` ，添加用户的使用权限，然后重启系统，后面使用 pyserial 打开串口就可以不使用 sudo 权限了"}, "/soft/maixpy/zh/get_started/knowledge_git_github.html": {"title": "git 和 github 介绍", "content": "---\ntitle: git 和 github 介绍\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门, 人工智能\ndesc: maixpy doc: git 和 github 介绍\n---\n\n\n因为在学习 MaixPy 的过程中， 有很多地方用到 git 和 github， 所以这里简单解释一下它们是什么，以及区别是什么。\n\n\n## 什么是 git\n\ngit 是一款 代码托管 **软件**， 用来管理代码的版本。\n比如：\n我今天改了代码， 然后明天也改了代码， 以后我都能看到这两次改动历史， 以及改了什么内容，可以精确到哪一行，方便后面找问题;\n或者我发现第二次提交的代码出现了问题， 我需要回到第一次提交后的版本， 都可以用这个工具实现;\n另外方便多个人修改同一份代码，能管理大家提交的代码，不容易出现混乱。\n\n再也不用拷贝无数个文件夹来备份修改了！\n\ngit 会在目录下创建一个`.git`隐藏文件夹， 所有更改记录保存在这里面，不能删除这个文件夹。\n\n但是需要注意的是， 现在的 git 主要用来管理文本文件， 不适用拿来管理二进制文件，比如图片 PDF等等， 会让文件夹占用的空间变得很大。\n\n具体的教程，可以看 [这里](https://git-scm.com/), 中文教程可以看 [这里](https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000)\n\n\n## 什么是 github\n\n[github](http://github.com/) 是一个 分享代码 的 **网站**。\n\n可以在这个网站上注册， 然后建立仓库（repository），往这个仓库里面放代码公开分享，让更多地人来使用， 甚至一起修改，一起优化代码， 这就是**开源**。\n\n每个仓库都是可以单独地使用 `git` 这个软件来管理的， 大家在自己的电脑上修改代码， 然后使用`git`提交， 然后使用`git`推送到`github`这个网站， 大家就可以看到新的内容了。\n\nMaixPy 的源码的地址是： [https://github.com/sipeed/maixpy](https://github.com/sipeed/maixpy) , 也就是一个 `git 仓库`。\n\n\ngithub 的[帮助](https://docs.github.com/en/free-pro-team@latest/github), 中文 [帮助](https://docs.github.com/cn/free-pro-team@latest/github)\n\n\n另外，国内也有几家不过的类似`github`的网站， 比如[gitee](https://gitee.com/)\n\n\n## git 和 github 的区别\n\n一个是一个软件， 一个是一个网站。\n只不过这个网站用到了 git 这个技术来管理仓库。\n\n## 为什么我无法访问 github， 或者访问速度很慢\n\ngithub 是国外的网站， 因为距离远，线路问题导致某些运营商的某些线路可能访问慢甚至无法访问，\n比如 github 用来存放源文件的域名 `https://raw.githubusercontent.com/` 可能无法访问\n\n解决方法：\n* 换个线路， 也就是换个网络， 比如你用电信网， 可以换移动或者联通试试， 换手机流量，或者换个地方等方法\n* 使用 VPN 类软件，这里不教，请注意合法使用\n\n\n\n## 什么是 star\n\n在 github 上， 每个公开的仓库大家都可以去点赞收藏，也就是 star，在 github 右上角 ⭐ 形状的按钮\n![star ](../../assets/other/github_star.jpg)\n如果你觉得项目不错，请给个 star，这样会鼓励开发者花更多时间维护仓库，同时也告诉第一次来的访问者这是个不错的项目，值得关注。\n\nstar 后， 可以在个人资料里面找到自己的 star 仓库，方便下一次找到\n\n说到这里，大家觉得 [MaixPy](https://github.com/sipeed/maixpy) 不错的话，可以 star 一个哦～\n\n## 什么是 Master 分支\n\n在每个仓库中， 可以存在很多个分支，不同分支可以有不同的代码，而且不同的分支之间还可以互相合并，方便保存代码的不同版本，以及方便团队合作， master 分支就是指主分支，也就是最重要的分支，通常仓库默认展示的就是 master 分支。\n\n\n## 什么是提交\n\n提交，英文叫`commit`， 就是每次更改仓库的代码， 都提交一次，就会被记录到提交历史记录里面，后面随时都可以看这次提交了什么内容，也可以将代码回滚到这次提交\n\n每个提交都有一个独立的`commit ID`， 比如`d28cb7ac7db5ad61c0738df95d733717deefda1d`， 简写成`d28cb7a`\n\n## 什么是子模块\n\n子模块， 英文叫`submodule`， 就是在仓库中可以引用其它仓库，相当于是一个软链接， 不需要在仓库放实际的代码， 只需要放一个链接即可。\n这样的好处是多个仓库可以分开管理， 比如`仓库1`引用了`仓库2`作为子模块， 如果`仓库2`代码更新了， `仓库1`可以选择继续使用旧版的`仓库2`的代码， 也可以选择使用`仓库2`最新的代码，只是更新一下子模块链接\n\n比如`MaixPy`用了`kendryte-standalone-sdk`作为子模块,看[这里](https://github.com/sipeed/MaixPy/tree/master/components/kendryte_sdk)\n![submodule](../../assets/get_started/github_submodule.jpg)\n\n可以看到这里文件夹的图标不太一样，它只是一个链接，点击就会跳到相应的仓库而不是直接打开文件夹\n\n所以 **MaixPy 使用了子模块**\n\n\n\n## 什么是克隆\n\n在`github`上面的仓库，如果需要下载到本地来， 就需要使用克隆， 使用\n```\ngit clone 地址\n```\n就可以吧仓库克隆到本地了， 克隆的本地的仓库名副其实就是 github 上面的一份克隆， 完全一样，也保留了历史记录等\n\n当然也可以不用克隆，网页有点击下载的按钮，但是下载的缺陷就是不会包含提交代码的历史记录，根据自己的情况选择\n\n需要注意的是， 在克隆包含有子模块的仓库时， 因为克隆默认只会将子模块的链接克隆下来， 子模块的代码没有克隆到本地， 你需要这样克隆\n```\ngit clone 地址 --recursive\n```\n\n或者\n```\ngit clone 地址 project_name\ncd project_name\ngit submodule update --init --recursive\n```\n\n比如:\n```\ngit clone https://github.com/sipeed/MaixPy --recursive\n```\n\n\n\n## 什么是 issue\n\n也就是问题的意思， 在github 上， 每个仓库有一个专门用来提问的地方， 比如 [MaixPy的issue](https://github.com/sipeed/MaixPy/issues)\n大家在这里提问， 类似论坛一样， 都会被记录下来，方便后面的人查阅\n\n## 什么是 fork\n\n在 github 上， 仓库页面右上角有一个 fork 按钮\n![](../../assets/other/github_star.jpg)\n点击可以将仓库 fork 到自己的仓库，就相当于是一份拷贝，叫 fork 的原因是你在 fork 成自己的仓库后，可以对自己这个仓库进行随意修改，算是原来被 fork 仓库的一个发展分支，源自它但是可以不与它相同\n\n\n## 什么是 PR\n\n即 github 上的 pull request 功能， 就是参与一个仓库的代码更新， 就是先 fork 成自己的仓库，然后修改，修改后提交合并到被 fork 的源仓库， 具体方法可自行学习"}, "/soft/maixpy/zh/get_started/knowledge_prepare.html": {"title": "必备基础知识", "content": "---\ntitle: 必备基础知识\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门, 人工智能\ndesc: maixpy doc: 必备基础知识\n---\n\n\n\n要开始使用 `MaixPy`， 我们建议至少有以下基础知识（如果没有，需要先学习）：\n\n* 有足够的耐心和细心， 能够静下心来专研技术、仔细查看文档、专心写代码\n\n* 有 `Python` 或者 `Micropython` 基础， 会使用 `Python` 基础语法。\n  * 如果不会 `Python`语法， 但是有其它编程语言基础，请用百度搜一下 `Python 教程` 学习基础语法部分即可；\n  * 如果不会任何一门编程语言， 那本文档看起来会很吃力， 请先学习 `Python` 基础语法和使用\n\n* 至少有一种单片机开发基础，能看懂基本的电路图， 目前本文档还没有针对零基础的人群的教程\n> 需要有单片机开发经验的原因是本文档目前还没有对一些基本的术语进行教学，比如 `UART` 是什么？ `I2S` 是什么？而且在未来也多半不会对这些基础知识进行详细地阐述 （但是实际上， 如果你善于使用搜索工具进行学习， 就算不懂也可以学习到）\n\n* 了解 Micropython 是什么， 这里查看： [MicroPython 语言介绍](http://docs.micropython.org/en/latest/reference/index.html)\n\n\n* 大致上了解 Micropython 与 Python 的不同， 可以在这里：[MicroPython 与 CPython（Python3） 的不同之处](http://docs.micropython.org/en/latest/genrst/index.html) 查看\n\n\n\n如果上述的几点有一点不满足， 那么建议先补足所缺， 否则学习和开发的过程将会异常艰辛！！！！"}, "/soft/maixpy/zh/get_started/get_started_led_blink.html": {"title": "点亮 LED", "content": "---\ntitle: 点亮 LED\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门\ndesc: maixpy doc: 点亮 LED\n---\n\n\n\n点灯程序作为学习所有开发板的第一个程序，就像学所有编程语言都是先学 hello world 一样，具有着神圣的意义\n\n## 电路\n\n众所周知， 点亮一个 LED 需要一个电源， 一个电阻， 一个 LED 灯泡，\n在 Maix Dock 开发板上， 有三个 LED， 线路如下：\n\n![](../../assets/hardware/maix_dock/LED_sch.png)\n\n\n比如我们希望红灯点亮， 即 `LED_R` 连接的这个 LED， 图中可以看到 LED 的正极已经连接了 3.3V 电源， 所以我们只要让 LED_R 为低电平 LED 即可点亮。\n\n> 注意， 这里 `LED_R` 是给这个引脚取的一个别名， 实际上是连接到芯片的一个引脚，比如 `Pin13`或者说`IO13`\n\n## 外设到引脚的映射： FPIOA(现场可编程 IO 阵列， Field Programmable Input and Output Array)\n\n可能你曾经用过一些单片机，在手册上都规定了引脚和片上外设功能（就是芯片内部集成的外设，比如 `GPIO`、`I2C`、`SPI` 等）的绑定，或者重映射。比如规定了 `I2C` 只能用 `Pin9` 和 `Pin10`，启动了重映射功能后，只能用`Pin11`和`Pin12`\n\n但是 MaixPy 所使用的硬件 K210 的片上外设对应的引脚（硬件引脚）是可以**任意映射**的，相比之下 K210 硬件设计和软件设计的自由度更大。 比如 `I2C` 可以使用 `Pin11` 和 `Pin12`，也可以改成其它任意引脚\n> 注意要区分 `GPIO` 和 `IO`的区别， `IO`也可以叫`Pin` 也就是引脚，是芯片引出来的硬件引脚， 而`GPIO`是一种外设，可以控制这些`Pin/IO` 的外设\n\n因为有了这个强大的映射功能， 所以在使用引脚时，需要增加一步映射的步骤：\n```python\nfrom fpioa_manager import fm    # 导入库\nfm.register(28, fm.fpioa.GPIO0)\n```\n这里我们将引脚 `28` 映射为了 `GPIO0` 的功能, 执行了这句命令后，引脚`28`和`GPIO0`就映射（绑定）好了，要取消映射（解绑），则需要调用`fm.unregister`函数，具体看`API`文档，这里不介绍\n\n另外，`Pin` 和 外设只能**唯一**对应， 不能一对多，需要对同一个外设或者引脚重复映射，否则程序可能产生难以发现的错误（`BUG`）\n\n## 代码\n\n我们控制 LED 需要使用到 GPIO\n\n> `board_info` 与板卡相关，不同板卡配置不同，使用前需要[手动配置](./../api_reference/builtin_py/board_info.html)。\n\n程序如下：\n\n```python\nfrom fpioa_manager import fm\nfrom Maix import GPIO\n\nio_led_red = 13\nfm.register(io_led_red, fm.fpioa.GPIO0)\n\nled_r=GPIO(GPIO.GPIO0, GPIO.OUT)\nled_r.value(0)\n```\n\n按照前面运行代码的方法在终端里面运行代码， 会发现 LED 灯被点亮了！\n\n接下来我们分析代码：\n\n* 从 `fpioa_manager` 包导入`fm` 对象，主要用于引脚和外设的映射\n* 从包 `Maix` 导入了 `GPIO` 这个类， GPIO 外设相关操作\n* 定义一个变量`io_led_red`，值为`13`，即`Pin13/IO13`, 具体 LED 的引脚连接到了芯片的哪个引脚，请在前面的开发板介绍中看原理图\n* 使用`fm`(fpioa manager 的缩写)这个内置的对象来注册芯片的外设和引脚的对应关系，　这里　`fm.fpioa.GPIO0` 是　K210 的一个 GPIO 外设（`注意区分 GPIO（外设） 和引脚（实实在在的硬件引脚）的区别` ）， 所以把 `fm.fpioa.GPIO0` 注册到了 引脚 `IO13`；\n\n* 然后定义一个 `GPIO` 对象`led_r`， 具体参数看 `GPIO` API 文档， 在左边侧边栏查找。\n\n* 使用 `led_r.value(1)` 或者 `led_r.value(0)` 来设置高低电平即可, 因为这里设置了低电平， 根据上面的原理图可知低电平导通，LED 灯亮\n\n\n到这里已经可以点灯了， 现在可以自己尝试用 `for` 循环来实现 `LED` 闪烁或者流水灯～做出不同的变换效果"}, "/soft/maixpy/zh/get_started/install_driver/amigo.html": {"title": "Maixpy Amigo USB 驱动安装", "content": "---\ntitle: Maixpy Amigo USB 驱动安装\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: FT2232 USB 驱动安装\n---\n\n\n## Linux\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 即可看到设备号\n\n## Windows\n\n`Windows` 用户需要安装 `FT2232` 的驱动。\n\n- USB 驱动: **FT2232** ->[下载链接点这里](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)\n\n我们在拿到 MaixPy 开发板并连接到电脑的时候, 可以打开设备管理器查看串口驱动是否已经安装,打开设备管理器的方法有:\n- 此电脑(右键) -> 属性 -> 设备管理器\n- 开始菜单(右键) -> 设备管理器\n- 控制面板 -> (搜索)设备管理器\n\n<img src=\"../../../assets/get_started/win_device_1.png\" height=\"400\">\n\n1. 当我们的系统是 Windows 10 系统,系统则会帮我们自动安装驱动，而如果是旧版 Win7，win8 系统，我们就需要自己手动安装 USB 驱动:\n    ![](../../../assets/get_started/win_device_2.png)\n\n2. 打开上一节的的链接下载驱动\n    ![](../../../assets/get_started/win_device_3.png)\n\n3. 点击安装\n    ![](../../../assets/get_started/drives.gif)\n\n4. 安装完成之后,可以在设备管理器看到已经识别到两个串口设备了(其中只有一个串口可用)\n    ![](../../../assets/get_started/win_device_4.png)"}, "/soft/maixpy/zh/get_started/install_driver/ai_hat.html": {"title": "Grove AI HAT USB 驱动安装", "content": "---\ntitle: Grove AI HAT USB 驱动安装\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: FT2232 USB 驱动安装\n---\n\n\n## Linux\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 即可看到设备号\n\n## Windows\n\n`Windows` 用户需要安装 `FT2232` 的驱动。\n\n- USB 驱动: **FT2232** ->[下载链接点这里](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)\n\n我们在拿到 MaixPy 开发板并连接到电脑的时候, 可以打开设备管理器查看串口驱动是否已经安装,打开设备管理器的方法有:\n- 此电脑(右键) -> 属性 -> 设备管理器\n- 开始菜单(右键) -> 设备管理器\n- 控制面板 -> (搜索)设备管理器\n\n<img src=\"../../../assets/get_started/win_device_1.png\" height=\"400\">\n\n1. 当我们的系统是 Windows 10 系统,系统则会帮我们自动安装驱动，而如果是旧版 Win7，win8 系统，我们就需要自己手动安装 USB 驱动:\n    ![](../../../assets/get_started/win_device_2.png)\n\n2. 打开上一节的的链接下载驱动\n    ![](../../../assets/get_started/win_device_3.png)\n\n3. 点击安装\n    ![](../../../assets/get_started/drives.gif)\n\n4. 安装完成之后,可以在设备管理器看到已经识别到两个串口设备了(其中只有一个串口可用)\n    ![](../../../assets/get_started/win_device_4.png)"}, "/soft/maixpy/zh/get_started/install_driver/bit.html": {"title": "Maix Bit USB 驱动安装", "content": "---\ntitle: Maix Bit USB 驱动安装\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Maix Bit USB 驱动安装\n---\n\n\n## Linux\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 即可看到设备号\n\n## Windows\n\n开发板分为新旧两版，需要分别安装不同的驱动\n\n### `Maix Bit`（旧版）\n\nWindows 下载 [ch340 ch341 driver](https://api.dl.sipeed.com/fileList/MAIX/tools/ch340_ch341_driver/CH341SER.EXE) 安装即可，然后可以在 `设备管理器` 中看到串口设备\n\n### `Maix Bit` 新版带麦克风版本（使用`CH552`） 开发板\n\n开发板使用了 `CH552` 芯片来实现 `USB` 转串口功能，没有 `JTAG` 模拟功能，`Windows` 需要安装 `FT2232` 的驱动，\n\n- USB 驱动: **FT2232** ->[下载链接点这里](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)\n\n我们在拿到 MaixPy 开发板并连接到电脑的时候, 可以打开设备管理器查看串口驱动是否已经安装,打开设备管理器的方法有:\n- 此电脑(右键) -> 属性 -> 设备管理器\n- 开始菜单(右键) -> 设备管理器\n- 控制面板 -> (搜索)设备管理器\n\n<img src=\"../../../assets/get_started/win_device_1.png\" height=\"400\">\n\n1. 当我们的系统是 Windows 10 系统,系统则会帮我们自动安装驱动，而如果是旧版 Win7，win8 系统，我们就需要自己手动安装 USB 驱动:\n    ![](../../../assets/get_started/win_device_2.png)\n\n2. 打开上一节的的链接下载驱动\n    ![](../../../assets/get_started/win_device_3.png)\n\n3. 点击安装\n    ![](../../../assets/get_started/drives.gif)\n\n4. 安装完成之后,可以在设备管理器看到已经识别到两个串口设备了(其中只有一个串口可用)\n    ![](../../../assets/get_started/win_device_4.png)"}, "/soft/maixpy/zh/get_started/install_driver/nano.html": {"title": "Maix Nano USB 驱动安装", "content": "---\ntitle: Maix Nano USB 驱动安装\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Maix Nano USB 驱动安装\n---\n\n\n## Linux\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 即可看到设备号\n\n## Windows\n\n开发板使用了 `CH552` 芯片来实现 `USB` 转串口功能，`Windows` 用户需要安装 `FT2232` 的驱动。\n- USB 驱动: **FT2232** ->[下载链接点这里](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)\n\n我们在拿到 MaixPy 开发板并连接到电脑的时候, 可以打开设备管理器查看串口驱动是否已经安装,打开设备管理器的方法有:\n- 此电脑(右键) -> 属性 -> 设备管理器\n- 开始菜单(右键) -> 设备管理器\n- 控制面板 -> (搜索)设备管理器\n\n<img src=\"../../../assets/get_started/win_device_1.png\" height=\"400\">\n\n1. 当我们的系统是 Windows 10 系统,系统则会帮我们自动安装驱动，而如果是旧版 Win7，win8 系统，我们就需要自己手动安装 USB 驱动:\n    ![](../../../assets/get_started/win_device_2.png)\n\n2. 打开上一节的的链接下载驱动\n    ![](../../../assets/get_started/win_device_3.png)\n\n3. 点击安装\n    ![](../../../assets/get_started/drives.gif)\n\n4. 安装完成之后,可以在设备管理器看到已经识别到两个串口设备了(其中只有一个串口可用)\n    ![](../../../assets/get_started/win_device_4.png)"}, "/soft/maixpy/zh/get_started/install_driver/go.html": {"title": "Maix Go USB 驱动安装", "content": "---\ntitle: Maix Go USB 驱动安装\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Maix Go USB 驱动安装\n---\n\n\n这款 `STM32` 芯片的固件出厂默认采用 [open-ec](https://github.com/sipeed/open-ec) 的固件， 如果没问题，则会出现一个或者两个串口， 比如 `Linux` 下出现两个串口 `/dev/ttyUSB0` 和 `/dev/ttyUSB1`， 下载和访问串口时请使用 `/dev/ttyUSB1`。 Windows 也类似。\n\n如果需要重新烧录这个固件，可以从 [github](https://github.com/sipeed/open-ec/releases) 或者 [官网下载 open-ec 固件](https://dl.sipeed.com/shareURL/MAIX/tools/open-ec/flash-zero.bin)， 然后使用 `ST-LINK` 连接板子上引出的 `STM32` 的 `SW` 引脚（`GND`, `SWDIO`, `SWCLK`）进行烧录。（目前版本的 `Go` 板子上的 `STM32` 不支持串口烧录，只能使用 `ST-LINK` 进行烧录， 有需要请自行购买，或者使用一款板子用 `IO` 模拟也可以（比如树莓派） ）\n\n除了 `open-ec` 还有 `CMSIS-DAP` 固件， 相比 `open-ec` 可以模拟 `JTAG` 来对板子进行调试， `open-ec` 目前还未支持模拟 `JTAG`， 可以 [从官网下载固件](http://dl.sipeed.com/shareURL/MAIX/tools/cmsis-dap/)， 使用 `ST-LINK` 对其进行烧录， 在 `Linux` 下会出现 `/dev/ttyACM0` 设备\n\n> ST-LINK 对 `STM32` 的烧录方法资料很全，请自行搜索\n\n**请注意对 STM32 更新固件和更新 MaixPy 固件是不一样的， 一般情况不需要更新 STM32的固件， 默认的即够用了， STM32 只是一个 USB转串口的工具而已！！！勿混淆。。。**\n\n## Linux\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 即可看到设备号\n\n## Windows\n\n开发板使用了一颗 `STM32` 来实现模拟串口以及 `JTAG` 功能， `Windows` 需要安装 `FT2232` 的驱动。\n\n- USB 驱动: **FT2232** ->[[下载链接点这里](https://dl.sipeed.com/MAIX/tools/ftdi_vcp_driver)](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)\n\n我们在拿到 MaixPy 开发板并连接到电脑的时候, 可以打开设备管理器查看串口驱动是否已经安装,打开设备管理器的方法有:\n- 此电脑(右键) -> 属性 -> 设备管理器\n- 开始菜单(右键) -> 设备管理器\n- 控制面板 -> (搜索)设备管理器\n\n<img src=\"../../../assets/get_started/win_device_1.png\" height=\"400\">\n\n1. 当我们的系统是 Windows 10 系统,系统则会帮我们自动安装驱动，而如果是旧版 Win7，win8 系统，我们就需要自己手动安装 USB 驱动:\n    ![](../../../assets/get_started/win_device_2.png)\n\n2. 打开上一节的的链接下载驱动\n    ![](../../../assets/get_started/win_device_3.png)\n\n3. 点击安装\n    ![](../../../assets/get_started/drives.gif)\n\n4. 安装完成之后,可以在设备管理器看到已经识别到两个串口设备了(其中只有一个串口可用)\n    ![](../../../assets/get_started/win_device_4.png)"}, "/soft/maixpy/zh/get_started/install_driver/duino.html": {"title": "Maix Duino USB 驱动安装", "content": "---\ntitle: Maix Duino USB 驱动安装\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Maix Duino USB 驱动安装\n---\n\n\n## Linux\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 即可看到设备号\n\n## Windows\n\n开发板使用了 `CH552` 芯片来实现 `USB` 转串口功能，没有 `JTAG` 模拟功能，`Windows` 需要安装 `FT2232` 的驱动。\n\n- USB 驱动: **FT2232** ->[下载链接点这里](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)\n\n我们在拿到 MaixPy 开发板并连接到电脑的时候, 可以打开设备管理器查看串口驱动是否已经安装,打开设备管理器的方法有:\n- 此电脑(右键) -> 属性 -> 设备管理器\n- 开始菜单(右键) -> 设备管理器\n- 控制面板 -> (搜索)设备管理器\n\n<img src=\"../../../assets/get_started/win_device_1.png\" height=\"400\">\n\n1. 当我们的系统是 Windows 10 系统,系统则会帮我们自动安装驱动，而如果是旧版 Win7，win8 系统，我们就需要自己手动安装 USB 驱动:\n    ![](../../../assets/get_started/win_device_2.png)\n\n2. 打开上一节的的链接下载驱动\n    ![](../../../assets/get_started/win_device_3.png)\n\n3. 点击安装\n    ![](../../../assets/get_started/drives.gif)\n\n4. 安装完成之后,可以在设备管理器看到已经识别到两个串口设备了(其中只有一个串口可用)\n    ![](../../../assets/get_started/win_device_4.png)"}, "/soft/maixpy/zh/get_started/install_driver/cube.html": {"title": "Maixpy Cube USB 驱动安装", "content": "---\ntitle: Maixpy Cube USB 驱动安装\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: FT2232 USB 驱动安装\n---\n\n\n## Linux\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 即可看到设备号\n\n## Windows\n\n`Windows` 用户需要安装 `FT2232` 的驱动。\n\n- USB 驱动: **FT2232** ->[下载链接点这里](https://dl.sipeed.com/shareURL/MAIX/tools/ftdi_vcp_driver)\n\n我们在拿到 MaixPy 开发板并连接到电脑的时候, 可以打开设备管理器查看串口驱动是否已经安装,打开设备管理器的方法有:\n- 此电脑(右键) -> 属性 -> 设备管理器\n- 开始菜单(右键) -> 设备管理器\n- 控制面板 -> (搜索)设备管理器\n\n<img src=\"../../../assets/get_started/win_device_1.png\" height=\"400\">\n\n1. 当我们的系统是 Windows 10 系统,系统则会帮我们自动安装驱动，而如果是旧版 Win7，win8 系统，我们就需要自己手动安装 USB 驱动:\n    ![](../../../assets/get_started/win_device_2.png)\n\n2. 打开上一节的的链接下载驱动\n    ![](../../../assets/get_started/win_device_3.png)\n\n3. 点击安装\n    ![](../../../assets/get_started/drives.gif)\n\n4. 安装完成之后,可以在设备管理器看到已经识别到两个串口设备了(其中只有一个串口可用)\n    ![](../../../assets/get_started/win_device_4.png)"}, "/soft/maixpy/zh/get_started/install_driver/dock.html": {"title": "Maix Dock USB 驱动安装", "content": "---\ntitle: Maix Dock USB 驱动安装\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Maix Dock USB 驱动安装\n---\n\n\n## Linux\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 即可看到设备号\n\n## Windows\n\n`Maix Dock` 使用了 `CH340` 作为驱动芯片。`Windows` 用户需要安装 `CH340` 的驱动。\n\nWindows 下载 [ch340 ch341 driver](https://api.dl.sipeed.com/fileList/MAIX/tools/ch340_ch341_driver/CH341SER.EXE) 安装即可，然后可以在 `设备管理器` 中看到串口设备"}, "/soft/maixpy/zh/get_started/upgrade_esp32_firmware.html": {"title": "更新板载 ESP32 固件", "content": "---\ntitle: 更新板载 ESP32 固件\nkeywords: maixpy, k210, AIOT, 边缘计算, ESP32, 人工智能\ndesc: maixpy doc: 更新板载 ESP32 固件\n---\n\n\n## 简介：\n\nMaixPy 系列的开发板中 MaixDuino 板载了一块 ESP32 WIFI SOC，在默认情况下我们不需要更新板载的 ESP32 模块，但是但我们发现使用过程中存在 bug 并修复了之后我们就需要更新修复的固件。\n\n## 更新 ESP32 固件步骤\n\n### 准备\n\n\n- 硬件: MaixDuino, USB Type-C 数据线\n- 软件: ESPFLASH\n\n- ESP32 固件更新工具：ESP32 **flash_download_tools**\n  - 下载链接：[**flash_download_tools**](https://www.espressif.com/zh-hans/support/download/other-tools)\n- ESP32 MaixDuino 固件：\n  - 下载链接：[**flash_download_tools**](https://cn.dl.sipeed.com/MAIX/factory_firmware/)\n\n### 更新流程：\n\n1. 下载 **flash_download_tools**，\n\n   ![flash_download_tools](../../assets/hardware/module_esp32/image-20200504164050916.png)\n   ![flash_download_tools](../../assets/hardware/module_esp32/image-20200504164221705.png)\n\n2. 下载 **MaixDuino ESP32 固件**\n   ![update esp32](../../assets/hardware/module_esp32/image-20200504164245329.png)\n\n3. 连接 MaixDuino, 选择 ESP32 串口(一般都是串口号比较大的)\n4. 设置下载选项:\n   1. 如图配置相应选项, 注意**波特率一定要设置为 115200**\n   ![b6474ddd5340cc9b7cf6006f75974a7b.png](../../assets/hardware/module_esp32/image-20200504164320888.png)\n   ![acf618a24b4cb8c5f8c2e98acc6cf11b.png](../../assets/hardware/module_esp32/image-20200504164450650.png)\n\n5. 点击 **Start** 更新固件，并等待完成更新\n6. 验证更新是否完成\n\n   1. 使用 XCOM, 打开 ESP32 串口，点击 RST 复位 ESP32，如图即刷入成功\n\n   ![96e955badd7450e7b5ba58230ae12c48.png](../../assets/hardware/module_esp32/image-20200504164747839.png)"}, "/soft/maixpy/zh/get_started/upgrade_esp8285_firmware.html": {"title": "更新板载 ESP8285 固件", "content": "---\ntitle: 更新板载 ESP8285 固件\nkeywords: maixpy, k210, AIOT, ESP8285, 边缘计算\ndesc: maixpy doc: 更新板载 ESP8285 固件\n---\n\n\n## 简介：\n\n目前 MaixPy 系列采用 M1W 模块的作为核心模块的开发板有: MaixDock(M1W)， MaixGo\n\n通常情况下我们不需要更新模块内部 WIFI SOC ESP8285 的固件，但是如果使用过程中存在 bug，以及有新版本的固件发布时我们就可以更新固件\n\n> MaixDock、MaixGo 使用的 M1W 模块中的 ESP8285 默认烧录的是  AT 固件\n\n## 验证 ESP8285 是否能够正常工作\n\n- MaixPy 验证 ESP8285 是否正常工作例程\n\n> 查看文本末尾例程\n\n- 外接 USB 转串口模块测试\n\n   使用 USB 转串口模块，按照下表连接之后上电\n\n| M1W                                    | USB 模块 | 说明 |\n| -------------------------------------- | -------- | ---- |\n| M1W GND                                | GND      | 共地 |\n| K210 (IO6)/ESP8285 TX                  | RX       | -    |\n| K210 (IO7)/ESP8285 RX                  | TX       | -    |\n| k210 RST(上电之前接地，全过程拉低 RST) | GND      | -    |\n\n   上电之后板子会在串口输出(这里使用 XCOM, 波特率 115200) 来验证 ESP8285 是否正常启动\n   ![image-20200805175207487](../../assets/hardware/module_esp8285/image-20200805175207487.png)\n\n\n## AT 指令集\n\nESP8285 和 ESP8266 为同一系列产品，使用同一套 AT 指令集\nESP8285/ESP8266/ESP32 最新 AT指令集 https://github.com/espressif/esp-at/blob/v2.0.0.0_esp8266/docs/ESP_AT_Commands_Set.md\n\n\n## 更新 ESP8285 固件步骤\n\n在烧录 ESP8285 固件之前，先了解下 ESP8285 烧录原理:\n\n### ESP8285 固件烧录原理\n\nESP8285 在上电时，会判断 boot stapping 管脚的状态，并决定启动(boot)模式, 如:\n\n>  ets\tJan\t\t8\t2013,rst\tcause:1,\tboot\tmode:(3,2)\n\n其中打印的 boot mode 的第一位数字（3）代表当前的 boot 模式。\nBoot 模式由 strapping 管脚的 3 位值 [GPIO15， GPIO0， GPIO2] 共同决定。如下表所\n示：\n\n| Strapping 管脚的 3 位值/[GPIO15， GPIO0， GPIO2] | Boot 模式            |\n| ------------------------------------------------ | -------------------- |\n| 7 / [1， 1， 1]                                  | SDIO HighSpeed V2 IO |\n| 6 / [1， 1， 0]                                  | SDIO LowSpeed V1 IO  |\n| 5 / [1， 0， 1]                                  | SDIO HighSpeed V1 IO |\n| 4 / [1， 0， 0]                                  | SDIO LowSpeed V2 IO  |\n| 3 / [0， 1， 1]                                  | Flash Boot           |\n| 2 / [0， 1， 0]                                  | Jump Boot            |\n| 1 / [0， 0， 1]                                  | UART Boot            |\n| 0 / [0， 0， 0]                                  | Remapping            |\n\n\nESP8285 进入不同模式的 IO 电平请看如下表：\n\n| 模式           | CH_PD(EN) | RST  | GPIO15 | GPIO0 | GPIO2 | TXD0 |\n| :------------- | :-------- | :--- | :----- | :---- | :---- | ---- |\n| UART 下载模式  | 高        | 高   | 低     | 低    | 高    | 高   |\n| Flash 运行模式 | 高        | 高   | 低     | 高    | 高    | 高   |\n| Chip 测试模式  | -         | -    | -      | -     | -     | 低   |\n\n即 ESP8285 进入 UART 下载模式，启动信息 mode 第一位应该为 mode:(1, X)，如下：\n\n>  ets\tJan\t\t8\t2013,rst\tcause:1,\tboot\tmode:(1,1)\n\n\n而以 MaixDock 为例，可以看到 MaixDock 原理图如下：\n\n![](../../assets/hardware/maix_dock/sipeed_maix_dock_sch_wifi.png)\n\n![](../../assets/hardware/maix_dock/sipeed_maix_dock_sch_wifi_spi.png)\n\n### 准备\n\n> 这里以 MaixDock(M1W), Windows 10 系统为例\n\n- 硬件: MaixDock, USB Type-C 数据线\n- 软件:\n\n- ESP 固件更新工具：ESP8285 **flash_download_tools**\n  - 乐鑫官网下载链接：[**flash_download_tools**](https://www.espressif.com/zh-hans/support/download/other-tools)\n\n- ESP8285 AT 固件：\n - 乐鑫官方下载链接: [espressif_esp8266-at](https://www.espressif.com/zh-hans/support/download/at?keys=&field_type_tid%5B%5D=14)\n\n   ![](../../assets/hardware/module_esp8285/image-20210105192007.png)\n\n\n\n### Windows 使用 flash_download_tools 更新 ES8285（这里以 MaixDock 为例）：\n\n1. 按照下面配置，连接 MaixDock,\n\n    将 USB 转串口模块和ESP8285连接，连接方式前面已经介绍\n    上电前 需要将 GPIO0 拉低，即将天线旁左上角的触点接地，进入 UART 下载模式。\n\n![](../../assets/hardware/maix_dock/maix_dock_2.jpg)\n\n\n1. 打开 **flash_download_tools**\n\n2. 下载 **MaixDock ESP8285 固件**\n\n    ![](../../assets/hardware/module_esp8285/flash_download_tool.png)\n\n3. 选择 ESP8285 串口(一般都是串口号比较大的)\n\n4. 设置下载选项:\n\n    如图配置相应选项, 注意**波特率一定要设置为 115200**\n\n    ![](../../assets/hardware/module_esp8285/flash_download_tool_ESP8285.png)\n\n5. 点击 **Start** 更新固件，并等待完成更新\n\n6. 验证更新是否完成\n\n   - 使用 XCOM 波特率 115200, 打开 ESP8285 串口，输出 `AT\\r\\n`,如图提示 `OK` 即刷入成功\n    ![esp8285_at.png](../../assets/hardware/maix_dock/esp8285_at.png)\n\n### LINUX 使用 esp_tool 更新 ES8285（这里以 MaixDock 为例）：\n\n\n1. 按照下面配置，连接 MaixDock,\n\n    ![](../../assets/hardware/maix_dock/sipeed_maix_dock_m1w_2.png)\n\n2. 安装 esptool\n\n    ```shell\n    pip3 install esptool\n    ```\n\n3. 下载 **MaixDock ESP8285 固件**\n\n    ```shell\n    ls /dev/ttyUSB* # 查看 USB 串口\n    esptool --port /dev/ttyUSB0 write_flash 0x0 ESP8285-AT-V1.7.4_8Mbit_40Mhz.bin # 烧录固件\n    ```\n\n4. 验证更新是否完成\n\n    使用 XCOM 波特率 115200, 打开 ESP8285 串口，输出 `AT\\r\\n`,如图提示 `OK` 即刷入成功\n    ![esp8285_at.png](../../assets/hardware/maix_dock/esp8285_at.png)\n\n\n### MaixPy 例程测试：\n\n\n\n```python\nimport network, time\nfrom machine import UART\nfrom Maix import GPIO\nfrom fpioa_manager import fm\n\n# En SEP8285 rst\n#fm.register(8, fm.fpioa.GPIOHS0, force=True)\n#wifi_en=GPIO(GPIO.GPIOHS0, GPIO.OUT)\n#wifi_en.value(1)\n# En SEP8285 rst\nfm.register(0, fm.fpioa.GPIOHS0, force=True)\nwifi_io15=GPIO(GPIO.GPIOHS0, GPIO.OUT)\nwifi_io15.value(0)\n\nfm.register(8, fm.fpioa.GPIOHS1, force=True)\nwifi_en=GPIO(GPIO.GPIOHS1, GPIO.OUT)\nwifi_en.value(1)\n\n# for new MaixGO board, if not, remove it\n#fm.register(0, fm.fpioa.GPIOHS1, force=True)\n#wifi_io15_en=GPIO(GPIO.GPIOHS1, GPIO.OUT)\n#wifi_io15_en.value(0)\n\nfm.register(6, fm.fpioa.UART2_RX, force=True)\nfm.register(7, fm.fpioa.UART2_TX, force=True)\n\nuart = UART(UART.UART2,115200,timeout=1000, read_buf_len=4096)\n\ndef wifi_enable(en):\n    global wifi_en\n    wifi_en.value(en)\n\ndef wifi_deal_ap_info(info):\n    res = []\n    for ap_str in info:\n        ap_str = ap_str.split(\",\")\n        info_one = []\n        for node in ap_str:\n            if node.startswith('\"'):\n                info_one.append(node[1:-1])\n            else:\n                info_one.append(int(node))\n        res.append(info_one)\n    return res\n\n\n#wifi_enable(0)\ntime.sleep(2)\nnic = network.ESP8285(uart)\n\nap_info = nic.scan()\nap_info = wifi_deal_ap_info(ap_info)\n\nap_info.sort(key=lambda x:x[2], reverse=True) # sort by rssi\nfor ap in ap_info:\n    print(\"SSID:{:^20}, RSSI:{:>5} , MAC:{:^20}\".format(ap[1], ap[2], ap[3]) )\n\n\n```"}, "/soft/maixpy/zh/get_started/maixpy_get_started_video.html": {"title": "MaixPy 视频入门教程", "content": "---\ntitle: MaixPy 视频入门教程\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门, 人工智能\ndesc: maixpy doc: MaixPy 视频入门教程\n---\n\n\n\n\n视频简单介绍了基本的上手过程，事实上文档上会更加详细， 视频只是提供一个比较直观的入门参考，对部分人群来说看视频入门会更加容易， 另外，本视频内的文档版本是最初的版本，新文档目录结构有了适当的调整，请大家举一反三：\n\n<iframe width=\"800\" height=\"600\" src=\"//player.bilibili.com/player.html?aid=52613549&cid=92076022&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n建议进入[Bilibili](https://www.bilibili.com/video/av52613549?zw)登录看高清版本哦， 如果觉得节奏太慢可以右键调速～"}, "/soft/maixpy/zh/get_started/env_maixpyide.html": {"title": "MaixPy IDE 安装与使用", "content": "---\ntitle: MaixPy IDE 安装与使用\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门\ndesc: maixpy doc: MaixPy IDE 安装与使用\n---\n\n\n![maixpy_ide_start](../../assets/maixpy/maixpy_ide_start.png)\n\n## 关于 MaixPy IDE\n\n\n\n![MaixPy IDE](../../assets/maixpy/maixpy_ide.png)\n\n首先需要弄清： **MaixPy** 使用 `Micropython` 脚本语法，所以不像 `C` 语言 一样需要编译，其实不用 `IDE` 也能愉快使用： 使用串口终端工具，前面已经安装了\n\n使用 `IDE` 则会方便在电脑上实时编辑脚本并上传到开发板以及直接在开发板上执行脚本，以及在电脑上实时查看摄像头图像、保存文件到开发板等\n\n当然， 使用 `IDE` 因为压缩、传输需要耗费一部分资源，所以性能会有所降低，而且如果MaixPy宕机也没有串口终端好发现问题\n\n\n\n## MaixPy 固件\n\n要使用 `MaixPy IDE` , 固件必须是 `v0.3.1` 版本以上, 否则MaixPyIDE 上会连接不上， 使用前尽量检查固件版本和 IDE 版本，都更新到最新版以保障能正常使用\n\n## 下载安装包\n\n[dl.sipeed.com](http://dl.sipeed.com/MAIX/MaixPy/ide/)\n\n文件列表等说明 请看 最新版本文件夹下的 `readme.txt` 文件， 如果下载速度慢请使用 cdn 链接下载\n\n## 安装\n\n#### 如果是安装程序(**推荐**，简单方便)\n\n`Windows`直接双击`exe`文件运行安装程序; `Linux`命令行给运行权限然后执行\n\n```\nchmod +x maixpy-ide-linux-x86_64-0.2.2.run\n./maixpy-ide-linux-x86_64-0.2.2.run\n```\n\n#### 如果是压缩包(`7z`)\n\n则解压到文件夹\n\n> 如果系统不支持 `7z`， 则需要 [下载 `7z`解压缩工具](https://www.7-zip.org/)，然后用 `7z`\n\n在`Linux`下也可以双击压缩包进行解压！\n\n如果需要使用终端解压， 可以参考以下命令：\n\n```bash\nsudo apt install p7zip-full\n7z x maixpy-ide-linux-x86_64-0.2.2-installer-archive.7z -r -omaixpy-ide\n# `-o` 后面直接跟解压缩的路径, 中间没有空格.\n```\n\n* 解压后, 执行\n  * 如果是 `Windows`： 直接双击`maixpyide`来执行，可以右键固定到开始页面或者固定到任务栏方便后面使用\n  * `Linux`： 执行\n\n```\nchmod +x setup.sh\n./setup.sh\n./bin/maipyide.sh\n```\n\n\n\n## 测试运行\n\n打开 MaixPy IDE, 上方工具栏里面选择开发板的型号。**amigo，cube 开发板请选择 Maixduino 进行连接**。\n\n`Tool-> Select Board` (工具->选择开发板)\n\n点击 `connect` 连接 `MaixPy IDE`\n\n![connect-icon.png](../../assets/maixpy/maixpy_connect_icon.png)\n\n连接成功之后，链接按钮会由绿变红．\n\n![connect-success.png](../../assets/maixpy/maixpy_connect-success.png)\n\n连接按钮下方是运行按钮，会执行当前编辑区的`py`文件．\n\n\n\n![helloworld-run.png](../../assets/maixpy/maixpy_helloworld.png)\n\n再次点击运行按钮(红色), 停止运行当前代码．\n\n## 上传文件\n\n在 **Tool/工具** 菜单中可以选择发送文件\n\n\n## 注意\n\n* 点击连接后，不用和终端工具同时使用，否则会出现串口占用无法打开\n* 如果一直无法成功连接成功， 检查：\n  * 请检查是否开发板型号选择错误；\n  * 观察开发板屏幕是否有变化，如果没有反应可能是串口选择错误；\n  * 尝试升级到最新的 [master 分支固件](http://cn.dl.sipeed.com/MAIX/MaixPy/release/master)， 以及最新的 MaixPy IDE 软件\n* 运行代码后获取不到图像\n  * 请换个USB口，比较老旧的电脑会出现这个问题\n\n\n## 根据错误提示寻找原因\n\n程序运行出错时会弹框提示错误，但是错误信息不一定完整，请**在终端输出里面查找更详细的错误信息**\n\n如有必要，请断开 IDE， 仅使用串口终端运行程序（也许你需要先把程序保存到文件，然后运行文件）查看打印以排错\n\n如果提交问题（bbs、群、github issue等），为了使问题快速得到解决，请务必带上上面所述完整信息"}, "/soft/maixpy/zh/get_started/env_install_driver.html": {"title": "安装 USB 驱动", "content": "---\ntitle: 安装 USB 驱动\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门\ndesc: maixpy doc: 安装 USB 驱动\n---\n\n\n正式使用 MaixPy 之前，我们需要先安装好串口驱动，才可进行下一步的开发与使用；因为板子是通过 USB 转串口设备与电脑连接（K210 没有 USB 硬件支持功能）。\n根据板子的 USB 转串口芯片型号装驱动。\n\n> 在 `Linux` 或者 `Mac` 下操作串口， 如果不想每次都使用 `sudo` 命令， 执行 `sudo usermod -a -G dialout $(whoami)` 将自己添加到 `dialout` 用户组即可，可能需要注销或者重启才能生效\n\n\n- 现有开发板板载的 USB 转串口 IC 说明\n\n| 开发板型号 | USB 转串口 IC        | 说明                        |安装教程|\n| ---------- | ----------------------- | --------------------- |------|\n| Maix Go    | STM32                   | STM32 USB 模拟 FT2232 |[Go](./install_driver/go.html)|\n| Maix Dock  | CH340                   |                       |[Dock](./install_driver/dock.html)|\n| Maix Duino | CH552                   | CH552 模拟 FT2232     |[Duino](./install_driver/duino.html)|\n| Maix Bit   | CH552(新版)/CH340(旧版)  | CH552 模拟 FT2232     |[Bit](./install_driver/bit.html)|\n| Maix Cube  | GD32(新版)/CH552(旧版)   | CH552 模拟 FT2232     |[Cube](./install_driver/cube.html)|\n| Maix Amigo | GD32                    | GD32 模拟 FT2232      |[Amigo](./install_driver/amigo.html)|\n| Maix Nano  | CH552                   | CH552 模拟 FT2232     |[Nano](./install_driver/nano.html)|\n| Grove AI HAT | GD32                    | GD32 模拟 FT2232      |[Grove AI HAT](./install_driver/ai_hat.html)|\n\n> 使用 CH340 IC 的板子直接装 CH340 的驱动即可，其他的均使用 FT2232 的驱动程序。\n\n## 关于 USB 串口的疑难杂症排查\n\n如果没有看到串口，请按如下顺序排查硬件问题。\n\n- 插入电脑，是否存在叮咚一声，如插入 U 盘时USB 驱动加载的声音，没有表示硬件上的串口芯片出问题了。\n- 更换线材重试，更换电脑 USB 口重试，仍然加载不出来，更换电脑确认。\n\n如果没有办法烧录固件，请按如下顺序排查硬件问题。\n\n- 使用串口工具查看硬件当中是否存在 maixpy 固件\n- 设置 115200 波特率连接串口，按复位键（RST）接收到芯片的数据，不管是什么都表示串口芯片工作正常，如果没有则表示硬件异常。\n- 基于上述再进行烧录固件，烧录前，按硬件的 BOOT 键后按复位，再松开 BOOT 键，此时烧录正常进行，如果没有则表示 Flash 受损，可以尝试烧录到 SRAM ，如果烧录失败，则表示串口芯片异常。\n- 如果到这里了，还是不能解决问题，则硬件确实存在缺陷\n\n### K210 的烧写机制介绍\n\n我们常把这个称为一键下载电路，表示能够轻松的通过控制 串口的 RST 和 DTR 的完成对 BOOT 和 RST 引脚的控制进入烧录模式，如上描述的期望硬件电路自动完成最初由人按下 BOOT 后按 RST 的操作，这与硬件实现强相关，基于此，再进行 TX 和 RX 的数据传输，所以实际上我们需要用到 UART 串口的功能引脚。\n\n在 Kflash 中分多种版型多种烧写方式的触发，我们可以简单分为几类，低速的 115200 和 高速的 1500000 波特率，以这两类波特率所匹配的烧录方式为差异点，如果发现下载过程中失败，可以适当的降低波特率，这是由于串口芯片工作不稳定导致，而工具中对版型选择只是会影响第一段烧录模式的触发，而在这之后的烧写固件中就会采取配置的波特率进行烧写，通常不超过与flash的通信烧录速度，常见于 50~60 KB/S。\n\n如果发现无论如何更换烧录模式都无法进入，要么是烧录版型不匹配，要么是串口芯片的 DTR RST 引脚出了问题（物理上的）。"}, "/soft/maixpy/zh/get_started/get_started_fs.html": {"title": "存储系统介绍", "content": "---\ntitle: 存储系统介绍\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门\ndesc: maixpy doc: 存储系统介绍\n---\n\n\nMaixPy 存储系统大致如下图所示：\n\n![](../../assets/get_started/memory.png)\n\n由上图可知，MaixPy 中的存储介质主要由 `Flash`，`SD` 卡组成，分为三块区域，分别是 MaixPy.bin 固件区，xxx.kmodel 模型区，文件系统区：Flash 上为 [`spiffs`](https://github.com/pellepl/spiffs)（SPI Flash File System），SD 卡为 Fatfs（FAT file system）。\n\n## MaixPy.bin 固件区\n\n用来存储 MaixPy.bin 固件，起始于 0x000000，因为 K210 会从 0x000000 地址开始运行程序。\n\n## xxx.kmodel 模型区\n\n通常起始于 0x300000，模型文件之所以不烧录在 `Flash` 的文件系统（文件系统会后续解释）中，原因有下：\n\n1. `Flash` 中文件系统拥有的内存并不够大，不足以放入大模型，更大的模型可以放入 `SD` 卡中。\n2. 直接读取模型文件比经过文件系统读取速率更快。\n\n该区域没有文件系统管理，需要根据烧录时的起始地址操作文件，例如当模型烧录在 0x500000 时的读取方法：\n\n```python\nKpuTask = kpu.load(0x500000)\n```\n\n## 文件系统区\n\n通常从 0xD00000 开始，该区域交由文件系统管理，我们预留了 `Flash` 末尾的 `3MiB` 空间，交由 [`spiffs`](https://github.com/pellepl/spiffs) 管理， 另外也支持 `FAT32`（Fatfs） 的 `SD` 卡。这些文件系统提供接口使我们通过 **文件名** 便可对文件进行读写操作，而不必像模型区那样使用 **文件起始地址** 操作。同时还能帮助我们有效管理存储介质，例如磨损均衡（Flash 是有磨损寿命的，相关知识请自行搜索）可以充分发挥 Flash 的寿命。\n\n### MaixPy 文件系统的使用\n\n由于 `Flash` 和 `SD` 卡的文件系统各不相同，接口不一致，使得操作不同文件系统需要调用不同接口，此时 MaixPy 中的虚拟文件系统（VFS）正是用于解决该问题，`VFS` 可以挂载多个不同类型文件系统，并为用户操作这些文件系统提供统一接口，用户使用这些接口时可以忽略不同文件系统之间的差异。这些接口在 `os` 模块中实现，使用示例如下：\n\n```python\nimport uos\n\nprint(\"files:\", uos.listdir(\"/flash\"))\n\nwith open(\"/flash/test.txt\", \"w\") as f:\n    f.write(\"hello text\")\n\nprint(\"files:\", uos.listdir(\"/flash\"))\n\nwith open(\"/flash/test.txt\", \"r\") as f:\n    content = f.read()\n\nprint(\"read:\", content)\n```\n\n以上示例中，`spiffs` 文件系统开机被自动挂载到 `/flash` 目录，用户只需要在使用 `os` 的接口时传入 `\"/flash\"` 目录名作为参数便可访问该文件系统。\n\n解读：\n* 导入 `uos` 模块\n* 列出 `/flash` 目录下所有文件\n* 向 `/flash` 目录写入一个名为 `test.txt` 的文件，内容为 `hello text`,\n* 列出 `/flash` 目录下所有文件，会发现 `test.txt` 的存在\n* 读取文件内容到 `content` 变量\n* 打印 `content` 变量， 输出 `hello text`，也就是刚刚写入文件的内容\n* 这个内容在开发板断电之后再上电，仍然能读到正确的内容（Flash 断电后不会丢失内容）\n\n当然也支持 SD 卡， 如果你需要使用， SD 卡需要满足以下几点：\n* 支持 `SPI` 模式,  市面上大多数正版卡都支持\n* 分区为 `MBR （msdos）`\n* 格式化为 `FAT32`\n* 大小测试过最大 `128GiB` 可用\n断电插入 `SD` 后， 上电，`SD` 卡会被挂载在 `/sd`，如果有多个分区，第二个分区名是`/sd2`\n\n注意`/`（根目录）不能写入数据，只能往`/flash`或者`/sd`写入数据\n开机如果有`SD`卡， 会自动将当前目录切换到`/sd`， 如果没有，则会自动切换到`/flash`"}, "/soft/maixpy/zh/get_started/get_started_upload_script.html": {"title": "上传脚本&模块到开发板", "content": "---\ntitle: 上传脚本&模块到开发板\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门, 人工智能\ndesc: maixpy doc: 上传脚本&模块到开发板\n---\n\n\n\n前面我们接触到了直接执行 `pye(\"filename.py\")` 命令可以打开一个编辑器，可以直接编辑文件系统中的文件\n\n但是慢慢我们会发现，这样的方法只适合用来改少量的代码，当代码量庞大或者我们需要高亮支持时，它就不适用了，我们需要在电脑上写完代码，然后上传到板子的文件系统里面\n\n目前有以下几种方法：\n\n\n\n### 使用 MaixPy IDE 上传脚本到开发板\n\n打开 `MaixPy IDE`， 连接开发板\n\n编辑文件，然后在顶端`Tool`（工具）菜单中，点击`将打开的文件保存为 boot.py` 来将代码保存到开发板的`boot.py`文件，中，下次开发板开机上电会自动执行这个文件\n\n当然也可以使用顶端`Tool`(工具)菜单中的`发送文件`功能来发送文件，会保存到开发板并且文件名和电脑上的文件名相同，（除了脚本也可以上传其它文件，不要太大）\n\n![](../../assets/maixpy/maixpy_ide_tools.png)\n\n\n\n## 使用图形工具 uPyLoader 上传、运行脚本\n\n[uPyLoader](https://github.com/BetaRavener/uPyLoader) 是一款开源软件，使用它可以方便地连接 MaixPy 并且上传、下载、执行文件，同时监控输出等等功能，功能比较完善\n\n下载可执行文件:[release](https://github.com/BetaRavener/uPyLoader/releases)\n\n![uPyLoader](../../assets/other/uPyLoader.png)\n\n选择串口并点击 `Connect` 按钮来连接板子\n\n第一次运行该软件需要初始化， 点击 `File->Init transfer files` 来完成初始化，这会在板子里创建两个文件，分别是 `__upload.py` 和 `__download.py`。\n\n左边选中需要上传的文件，点击 `Transfer` 即可上传到板子的文件系统。\n\n右边是板子里面的文件， 点击 `List files` 可以刷新文件列表， 选中 文件名， 点击 `Execute` 即可执行该脚本文件\n\n点击上面的 `View -> terminal ` 可以打开终端 用来查看运行时的输出或者发送命令\n\n\n## 使用工具 rshell\n\n正如使用 `linux` 终端一样， 使用 [rshell](https://github.com/dhylands/rshell) 的 `cp` 命令即可简单地复制文件到开发板\n\n按照 `rshell` 项目主页的说明安装好 `rshell`\n\n```python\nsudo apt-get install python3-pip\nsudo pip3 install rshell\nrshell -p /dev/ttyUSB1 # 这里根据实际情况选择串口\n```\n\n```python\nls /flash\ncp ./test.py /flash/ #复制电脑当前目录的文件 test.py 到开发板 flash 根目录\n```\n\n当然， 还有其它更多功能， 详情请访问其 [项目主页](https://github.com/dhylands/rshell)\n\n\n## 使用命令行工具 ampy\n\n[ampy](https://github.com/pycampers/ampy) 是一个简单易用的命令行上传、下载、执行文件 的工具， 而且开源\n\n注意这个工具是运行在电脑端的，而不是运行在板子上的\n\n使用 `ampy --help` 来查看帮助信息\n\n使用 `ampy run file_in_PC.py` 命令还可以不上传脚本到板子而是直接在板子上运行该脚本\n\n\n## SD（TF） 直接运行\n\n拷贝到 SD 卡后， 在终端中执行 `import 文件名` 或者`exec()`来运行脚本\n\n## SD 卡自动拷贝到 Flash 文件系统\n\n\n为了方便将 SD 卡的内容拷贝到 Flash 文件系统， 只需要将要拷贝到 Flash 文件系统的文件重命名为`cover.boot.py` 或者`cover.main.py`, 然后放到`SD`卡根目录， 开发板断电插入`SD`卡，然后开发板上电， 程序就会自动将这两个文件拷贝到`/flash/boot.py`或者`/flash/main.py`，这样就算后面取出了`SD`卡，程序已经在 `/flash/boot.py`或者`/flash/main.py`了"}, "/soft/maixpy/zh/get_started/board_info.html": {"title": "Board", "content": "---\ntitle: Board\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门\ndesc: maixpy doc: Board\n---\n\n\n> **本文档在 MaixPy 0.5.1-128 版本测试通过。**\n\n这是一个 MaixPy 板级配置模块，它可以在用户层统一 Python 代码，从而屏蔽许多硬件的引脚差异。\n\n效果如下：\n\n```python\nfrom Maix import GPIO\nfrom fpioa_manager import fm\nfrom board import board_info\nprint(board_info.LED_R)\nfm.register(board_info.LED_R, fm.fpioa.GPIO0, force=True)\nled_r = GPIO(GPIO.GPIO0, GPIO.OUT)\nled_r.value(0)\n```\n\n而这份代码同时支持 MaixPy 所有硬件运行，并且打印的 board_info.LED_R 都不尽相同，通过它保证示例代码的一致性。\n\n## board 的配置方法\n\n将以下链接对应的 python 代码复制出来（如 config_maix_bit.py），放到 IDE 编辑框中运行，即可完成对『你的硬件』配置项（config.json）的导入，它会在 flash 上存储该配置文件。\n选择自己对应的开发板类型\n\n1. Maix Bit\n[config_maix_bit.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_bit.py)\n\n2. Maix Dock\n[config_maix_dock.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_dock.py)\n\n3. Maix Go\n[config_maix_go.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_go.py)\n\n4. Maix Duino\n[config_maix_duino.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_duino.py)\n\n5. Maix Cube\n[config_maix_cube.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_cube.py)\n\n6. Maix Amigo\n[config_maix_amigo.py](https://github.com/sipeed/MaixPy_scripts/tree/master/board/config_maix_amigo.py)\n\n7. Maix Nano\n> 这个没有硬件外设.....所以不要问为什么没有它的配置代码了。\n\n\n运行配置代码后会自动重启，此时代码中才可以调用 board_info.BOOT_KEY , 实际上 board_info.BOOT_KEY 就是指 IO 16 ，对应的定义在 config.json 中可以得知，如果不存在的资源将会报错，如没有 LED 定义的硬件，运行 LED 点亮的时候就会报错。\n\n```python\nfrom board import board_info\n# see board/readme.md to config your sipeed's hardware.\nprint(board_info.BOOT_KEY, board_info.BOOT_KEY == 16)\n```\n\n## 创建你的专属硬件\n\n你可以借助该接口代码适配你的硬件，配置方法参考 [MaixPy_scripts/board](https://github.com/sipeed/MaixPy_scripts/tree/master/board) 里面有供你参考的配置文件。\n\n## board 的使用方法\n\n导入配置：\n\n```python\nfrom board import board_info\nboard_info.load({\n    'PIN10': 10,\n    'BOOT_KEY': 16,\n    'WIFI_TX': 6,\n    'WIFI_RX': 7,\n    'WIFI_EN': 8,\n})\nprint('PIN10:', board_info.PIN10)\nprint('BOOT_KEY:', board_info.BOOT_KEY)\nprint('WIFI_TX:', board_info.WIFI_TX)\nprint('WIFI_RX:', board_info.WIFI_RX)\nprint('WIFI_EN:', board_info.WIFI_EN)\n```\n\n调用结果：\n\n```shell\nPIN10: 10\nBOOT_KEY: 16\nWIFI_TX: 6\nWIFI_RX: 7\nWIFI_EN: 8\n```\n\n> 就这样。"}, "/soft/maixpy/zh/get_started/get_started_boot.html": {"title": "开机自启动脚本", "content": "---\ntitle: 开机自启动脚本\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门\ndesc: maixpy doc: 开机自启动脚本\n---\n\n\n系统会在 `/flash` 或者 `/sd`(优先) 目录创建 `boot.py` 文件和`main.py`， 开机会自动先执行`boot.py`，然后执行`main.py`（如果检测到SD卡则执行SD卡里的）， 编辑这两个脚本的内容即可实现开机自启，如果在 `boot.py` 里面写死循环（While True）程序，将会导致 `main.py` 不能运行（先调用 `boot.py` 后调用 `main.py`），重新发送不带死循环的 `boot.py` 即可解决。\n\n- boot.py 主要用于配置硬件，只配置一次即可。\n- main.py 可以用于主要的运行的程序。\n\n对应的具体执行的[代码在此](https://github.com/sipeed/MaixPy/blob/972059491227ece63fbfc2cd0e78fe13ee78427d/components/micropython/port/src/maixpy_main.c#L586-L595)，有疑问就直接看源码。\n\n注意:\n    * Micro SD 卡应该被格式化为 FAT(FAT32) 文件系统\n    * FAT 格式的储存卡会被挂载到 `/sd`, 内部 Flash 中的 SPIFFS 会被挂载到`/flash`"}, "/soft/maixpy/zh/get_started/get_started_cam_lcd.html": {"title": "", "content": "---\ntitle: 第一个程序: 使用屏幕和摄像头\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门\ndesc: maixpy doc: 第一个程序: 使用屏幕和摄像头\n---\n\n\n开发板有配套的摄像头和屏幕，请在上电前检查硬件连接是否正确（**按照排线标有的一号引脚对齐**）\n\n然后上电，打开串口终端， 按键盘`Ctrl+E`,然后粘贴以下代码：\n```python\nimport sensor, lcd\n\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\nsensor.skip_frames()\n\nlcd.init(freq=15000000)\n\nwhile(True):\n    lcd.display(sensor.snapshot())\n\n```\n按键盘`Ctrl+D`来开始运行代码\n\n会发现屏幕被点亮了，而且显示出了摄像头拍到的画面\n\n如果显示`reset fail`， 则是摄像头没有连接好，或者摄像头已经损坏，或者检查是不是使用了不支持的摄像头\n\n上面的程序都可以在 API 手册中查到含义， 在左边目录中可以找到， 也可以使用左上角的搜索框进行搜索。\n现在解释上面的程序：\n* `import sensor, lcd`: 首先导入内置的`sensor`（摄像头）库和`lcd`（屏幕）库\n* `sensor.reset()`: 初始化摄像头，这里失败需要检查硬件\n* `sensor.set_pixformat(sensor.RGB565)`: 设置摄像头为`RGB565`格式，默认都是用`RGB565`即可\n* `sensor.set_framesize(sensor.QVGA)`: 分辨率为`QVGA`，即`320x240`\n* `sensor.run(1)`: 开始运行，在现在的版本中也可以不调用，在上面设置完成后，摄像头会自动开始运行\n* `sensor.skip_frames()`: 摄像头刚启动时，图像质量还没稳定，所以跳过一些图像\n* `lcd.init(freq=15000000)`: 初始化 LCD， 这里传了一个参数叫`freq`即频率， 是指定驱动 LCD 的时钟频率，这里是`15MHz`，可以根据硬件性能调整\n* `while(True)`: 这是一个循环，循环里面的代码会被不停地运行\n* `sensor.snapshot()`:从摄像头取一帧图像数据，返回值是一张图像的对象\n* `lcd.display()`： 显示图像到 LCD\n*  `lcd.display(sensor.snapshot())`: 这里就是先执行括号里的获取图像，返回值直接作为参数给 LCD 进行显示"}, "/soft/maixpy/zh/get_started/knowledge_audio.html": {"title": "音频处理背景知识", "content": "---\ntitle: 音频处理背景知识\nkeywords: maixpy, k210, AIOT, 边缘计算, maixpy入门, 人工智能\ndesc: maixpy doc: 音频处理背景知识\n---\n\n\n## 什么是声音（音频）\n\n> 人是理性的，而世界是感性的。\n\n什么是音频，音频即振动。\n光粒子的振动形成光波，即光;\n\n而普遍物体的振动形成声波，即声音\n\n## 音频编码基础知识\n\n- 声道数（通道数）\n\n即声音通道的数目，在对声音的记录时，同时记录不同空间位置的音频，即录制多通道音频；\n\n而常见的音频文件有单声道与立体声之分，即单声道记录单一位置的音频，而立体声有左右声道等记录不同空间位置的音频，并可以通过不同的扬声器播放不同通道的音频，从而还原不同空间位置的音频，使人耳通过音频感受不同空间位置（更具有空间感）。\n\n- 采样位数\n\n即采样值或取样值（就是将采样样本幅度量化）。它是用来衡量声音波动变化的一个参数，也可以说是声卡的分辨率。它的数值越大，分辨率也就越高，所发出声音的能力越强。\n\n在计算机中采样位数一般有 8 位和 16 位之分，但有一点请大家注意，8 位不是说把纵坐标分成8份，而是分成 2 的 8 次方即 256 份； 同理 16 位是把纵坐标分成2 的 16 次方 65536 份。\n\n- 采样频率\n\n即取样频率，指每秒钟取得声音样本的次数。采样频率越高，声音的质量也就越好，声音的还原也就越真实，但同时它占的资源比较多。由于人耳的分辨率很有限，太高的频率并不能分辨出来。在 16 位声卡中有 22KHz、44KHz 等几级，其中 22KHz 相当于普通 FM 广播的音质，44KHz 已相当于 CD 音质了，目前的常用采样频率都不超过 48KHz。\n\n## 音频编码处理之 PCM\n\nPCM 介绍\n\n目前我们在计算机上进行音频播放都需要依赖于音频文件，音频文件的生成过程是将声音信息采样、量化和编码产生的数字信号的过程，人耳所能听到的声音，最低的频率是从 20Hz 起一直到最高频率 20Khz，因此音频文件格式的最大带宽是 20Kzh。根据奈奎斯特的理论，只有采样频率高于声音信号最高频率的两倍时，才能把数字信号表示的声音还原成为原来的声音，所以音频文件的采样率一般在 40~50KHZ，比如最常见的 CD 音质采样率 44.1KHZ。\n\n对声音进行采样、量化过程被称为脉冲编码调制（Pulse Code Modulation），简称PCM，而由上文采样频率，采样位数，声道数三个概念可以由下面公式得出在计算机中 PCM 文件所占用的存储空间大小：\n\nPCM 音频数据大小 = (采样频率 * 采样位数 * 声道 * 时间)//8 (单位：Bytes)。\n\n由于 PCM 数据是最原始的音频数据，对于采样的数据完全无损，所以 PCM 数据虽然音质优秀但体积对于计算机的存储还是过于庞大；为了解决这个问题先后诞生了一系列的音频格式，这些音频格式运用不同的方法对音频数据进行压缩，其中有无损压缩（ALAC、APE、FLAC）和有损压缩（MP3、AAC、OGG、WMA）两种。\n\n## WAV\n\nWaveform Audio File Format（WAVE，又或者是因为扩展名而被大众所知的WAV），是微软与 IBM 公司所开发在个人电脑存储音频流的编码格式，在 Windows 平台的应用软件受到广泛的支持，地位上类似于麦金塔电脑里的 AIFF。 此格式属于资源交换档案格式(RIFF)的应用之一，通常会将采用脉冲编码调制的音频资存储在区块中。也是其音乐发烧友中常用的指定规格之一。由于此音频格式未经过压缩，所以在音质方面不会出现失真的情况，但档案的体积因而在众多音频格式中较为大。\n\n所有的 WAV 都有一个文件头，这个文件头音频流的编码参数。WAV 对音频流的编码没有硬性规定，除了 PCM 之外，还有几乎所有支持 ACM 规范的编码都可以为 WAV 的音频流进行编码。WAV 也可以使用多种音频编码来压缩其音频流，不过我们常见的都是音频流被 PCM 编码处理的WAV，但这不表示WAV 只能使用 PCM 编码，MP3 编码同样也可以运用在 WAV 中，和 AVI 一样，只要安装好了相应的 Decode，就可以欣赏这些 WAV了。\n\n在 Windows 平台下，基于 PCM 编码的 WAV 是被支持得最好的音频格式，所有音频软件都能完美支持，由于本身可以达到较高的音质的要求，因此，WAV 也是音乐编辑创作的首选格式，适合保存音乐素材。因此，基于 PCM 编码的 WAV 被作为了一种中介的格式，常常使用在其他编码的相互转换之中，例如 MP3 转换成 WMA。\n\n**而在 MaixPy 中，aduio 模块支持播放的 WAV 文件格式为 PCM_s16le (signed 16 bits little endian, 有符号 16 位小端)**"}, "/soft/maixpy/zh/how_to_read.html": {"title": "如何正确 阅读 本文", "content": "---\ntitle: 如何正确 阅读 本文\nkeywords: maixpy, k210, AIOT, 边缘计算, 人工智能, 深度学习\ndesc: maixpy doc: 如何正确 阅读 本文\n---\n\n\n**注意： 目前唯一文档官网： [maixpy.sipeed.com](https://maixpy.sipeed.com)**\n\n\n## 首先请仔细阅读一遍左边侧边栏的目录结构看一看文档有那些内容\n\n* **简介**： MiaxPy 的简介，作品展示，以及发展历史等\n* **入门指南**： 使用 MaxiPy 的入门教程，包括基础知识，一定要看， 才能避免遇到很多问题，会给后面开发节省很多时间\n* **进阶教程**： 这里是一步一步地教各种功能的使用， 对于刚上手不知道该做什么的同学们很有用， 仔细读哦\n* **API 手册**： 各个功能模块的 API 手册， 方便编程时查阅\n  * **标准库**： micropython 的标准库， 很多 API 兼容 python3 的 API\n  * **machine**： 机器相关， 重启控制，机器 UID， 以及各种外设控制\n  * **Maix**: 一些特殊的模块， 比如 FPIOA， KPU， FFT等\n  * **内置类**：内置的用 mpy（micropython 的缩写）编写的类， 可以在源码项目中找到\n  * **机器视觉**: 一些机器视觉相关的模块， image sensor lcd 大致上兼容 OpenMV 的 API， 但是后期不会实时跟着 OpenMV 更新\n  * **附加外设模块**： 一些外设模块的使用， 比如触摸屏， 超声波， LED 灯等\n  * **内置应用**： 内置的应用， 比如 NES 游戏机（FC 红白机，也就是小时候的小霸王游戏机），pye（内置的文档编辑器）\n* **常见问题 FAQ**： 大家经常问的问题汇总\n* **进阶**： 一些进阶的玩法, 以及如何参与 文档的修改 和 源码的修改，或者 例程 的贡献\n* **社区 & 分享**： 收集一些来自社区的好的教程、作品、开源项目等， 大家也可以按照贡献说明来共享自己的作品或者教程\n\n## 重要必读部分\n\n<font size=4>**`简介`**</font>和 <font size=4>**`入门指南`**</font>，一定要完整看完， 遇到问题也一定要先看 <font size=4>**`常见问题`**</font>\n\n\n## 开始学习\n\n* 刚接触，可以根据左边侧边栏的目录从上到下一页一页仔细看，跟着做即可， 入门一定不要跳过！！！\n* 学会如何更新固件，如何写代码，其中学会使用串口终端也十分重要，不建议过分依赖IDE， 特别是在程序死掉的时候， 用终端可能会获得更多报错信息，更有利于解决问题，在遇到问题在社区提问时，也尽量给出终端运行的完整信息\n* 每个模块/库文档里面的结尾都附有简单例程， 或者到这里:[MaixPy_script](https://github.com/sipeed/MaixPy_scripts)查找需要的示例， 可以尝试运行看效果\n\n## 学会搜索\n\n* 关于模块的接口及参数，在使用时根据自己的需求进行查阅，<font size=4>**`页面顶部右上角有搜索框`**</font>，可以好好利用，同时也可以使用浏览器的页面搜索功能，即按键盘<kbd> Ctrl+F </kbd>，然后输入要搜索的内容后按确认键\n* 如果有找不到的内容也请不要着急， 可以上 github 的 [issue](https://github.com/sipeed/MaixPy/issues) 页面找一找（搜一搜）是不是有人提过了，没有的话可以新建 issue, 或者到 [论坛](https://bbs.sipeed.com) 搜索问题，没有再向大家求助， 或者联系技术支持。\n\n## 本文档常见问题\n\n* 文档加了 PDF 生成， 但是尽量不要传播 PDF 版本， 因为内容更新后 PDF 得不到及时更新， 尽量访问此网站([`https://maixpy.sipeed.com`](https://maixpy.sipeed.com))查看文档\n\n* 如果网页加载比较慢， 请尝试刷新或者等待， 或者换个线路（使用代理或者换手机流量试试）\n\n* 本文档有两个域名： [`https://maixpy.sipeed.com`](https://maixpy.sipeed.com) 和 [`https://cn.maixpy.sipeed.com`](https://cn.maixpy.sipeed.com)， 一个访问不了时可以访问另一个\n\n* 文档使用 gitbook 从 markdown 自动生成为静态页面， 如果遇到有些页面无法访问， 请检查一下网址（路径）是否正确， 可以回到首页 ([`maixpy.sipeed.com`](https://maixpy.sipeed.com)) 重新进入即可。\n\n比如这个网址就是由于网络情况不佳点击过快导致的：\n```\nhttp://localhost:4000/zh/zh/how_to_read.html\n```\n正确的网址应该是：\n```\nhttp://localhost:4000/zh/how_to_read.html\n```\n\n\n\n## MaixPy 常见问题\n\n* 常见问题请见[常见问题](./others/maixpy_faq.html)\n\n\n## 其它教程\n\n* 除了文档，还可以浏览[博客](http://blog.sipeed.com)，[BBS](https://bbs.sipeed.com)用户写的教程， 或者百度搜索， 以及各个开发者的博客，都会有很多开发教程开发日记等， 都可以参考\n\n## 提问技巧\n\n在各种地方提问， 不管是  github 还是 QQ 群，还是论坛， 还是邮件， 提问要尽量提供完整的问题复现步骤，把你所经过的使用过程， 问题是怎么产生的， 现象是什么样的， 一定要完整地说明， 不要怕文字多，要站在解决问题的人的角度想问题，提的问题开发者能解决吗？ 方便开发者百忙之中测试问题并解决！\n\n更加具体的请看下一节 [如何优雅提问](./how_to_ask.html)"}, "/soft/maixpy/zh/firmware/online_compile.html": {"title": "固件在线编译", "content": "---\ntitle: 固件在线编译\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 固件在线编译\n---\n\n\n在线编译不需要搭建编译环境，只需要选择需要的模块点击编译，编译过程会在云端完成，固件会以邮件的方式发送\n\n访问 [maixhub](https://www.maixhub.com/onlinecompiler) 进行固件定制"}, "/soft/maixpy/zh/firmware/compile.html": {"title": "源码编译", "content": "---\ntitle: 源码编译\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 源码编译\n---\n\n\n预编译的固件可能不满足特定的使用场景， 如果需要修改配置，请配置并编译需要的固件\n\n## 本机环境编译\n\n编译方法请参考 源码下的编译说明 [build.md](https://github.com/sipeed/MaixPy/blob/master/build.md)\n\n## 使用 docker 环境编译\n\ndocker 可以简化开发环境安装\n> 如果你没用过 docker， 关于 docker 的知识请自行学习，\n> 在没学习过的情况下你可以认为它和虚拟机类似，即已经为你准备好了带编译环境的虚拟机，直接下载运行就可以用来编译源码了\n\ndocker 镜像已经打包好了环境，直接拉取镜像并且运行即可开始编译， 参考 [使用 Docker 编译源码](https://github.com/sipeed/MaixPy/tree/master/tools/docker)"}, "/soft/maixpy/zh/firmware/why_customize_firware.html": {"title": "为何需要固件定制", "content": "---\ntitle: 为何需要固件定制\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 为何需要固件定制\n---\n\n\n\n主要是为了节省内存。\n\n芯片的内存是`6MiB`通用内存+`2MiB` AI 专用内存，相比普通单片机来说确实非常大，如果不用 AI 功能，整个`8MiB`内存我们都可以使用，\n但是因为很多时候我们需要运行模型，一个模型可能达到`3MiB`甚至更大，而固件也是需要占用内存的，\n所以为了能运行更大的模型，我们需要妥协裁剪一些不必要的功能。\n\n在前面更新固件的章节介绍了与编译了许多固件版本， 有`minimum`的， `with_v4_support`的，也有`with_ide_support`的， 还有`with_lvgl`的，\n这些固件可能用在不同的场合。比如：\n\n* 裁剪 IDE 代码, 如果不需要连接 MaixPy IDE， 可以裁剪 IDE 部分以节省内存。\n\n* 裁剪 OpenMV 功能，固件兼容了 OpenMV 的部分功能，如果使用模型，这些功能可能不需要，就可以裁剪掉。\n\n* 裁剪多线程支持，若不需要多线程支持，即可裁剪该部分得到更多内存空间。\n\n所以，如果你在使用某个功能时， 发现提示`ImportError: no module named 'XXX'`，可能是你使用了不包含这个功能的固件，比如`minimum`固件不包含 IDE 和 `image.find_blobs`功能， 如果烧录了这个固件， 再去连接 `IDE` 就会长时间连接不上， 使用`iamge.find_blobs`这个函数也会提示找不到函数定义。"}, "/soft/maixpy/zh/SUMMARY.html": {"title": "Summary", "content": "---\ntitle: Summary\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Summary\n---\n\n\n* [简介](README.md)\n* [MaixPy 能做哪些事](./what_maix_do.html)\n* [MaixPy 发展历程](./maixpy_history.html)\n* [致谢](./thanks.html)\n\n\n## 入门必看指南\n\n* [如何正确阅读本文 (重要！！！)](./how_to_read.html)\n* [如何优雅提问 (重要！！！)](./how_to_ask.html)\n* 开发板和配件选购指南\n  - [开发板选购指南(对比)](./develop_kit_board/get_hardware.html)\n  - 开发板介绍\n    - [Maix Dock](./develop_kit_board/maix_dock.html)\n    - [Maix Bit](./develop_kit_board/maix_bit.html)\n    - [Maix Amigo](./develop_kit_board/maix_amigo.html)\n    - [Maix Duino](./develop_kit_board/maix_duino.html)\n    - [Maix Cube](./develop_kit_board/maix_cube.html)\n    - [Maix Go](./develop_kit_board/maix_go.html)\n    - [Maix Nano](./develop_kit_board/maix_nano.html)\n  - 外设模组（配件）\n    - [SP-MOD](./modules/sp_mod/index.html)\n    - [Grove](./modules/grove/index.html)\n    - [其它](./modules/others/index.html)\n* 基础知识\n  - [MaixPy 语法基础知识](./get_started/knowledge_micropython.html)\n  - [git 和 github](./get_started/knowledge_git_github.html)\n  - [MaixPy 图像基础知识](./get_started/knowledge_image.html)\n  - [MaixPy 音频基础知识](./get_started/knowledge_audio.html)\n* 开发环境准备\n  - [安装驱动](./get_started/env_install_driver.html)\n    - [Maix Dock](./get_started/install_driver/dock.html)\n    - [Maix Bit](get_started/install_driver/bit.md)\n    - [Maix Amigo](get_started/install_driver/amigo.md)\n    - [Maix Cube](get_started/install_driver/cube.md)\n    - [Maix Go](get_started/install_driver/go.md)\n    - [Maix Nano](get_started/install_driver/nano.md)\n  - [更新 MaixPy 固件](./get_started/upgrade_maixpy_firmware.html)\n  - [使用串口终端工具](./get_started/env_serial_tools.html)\n  - [MaixPy IDE 使用说明](./get_started/env_maixpyide.html)\n  - 更新 WIFI 模块固件\n    - [更新板载 ESP32 固件](./get_started/upgrade_esp32_firmware.html)\n    - [更新板载 ESP8285 固件](./get_started/upgrade_esp8285_firmware.html)\n* 上手\n  - [上电](/get_started/get_started_power_on.html)\n  - [第一个程序: 使用屏幕和摄像头](./get_started/get_started_cam_lcd.html)\n  - [第二个程序: 点亮 LED](./get_started/get_started_led_blink.html)\n  - [存储系统介绍](./get_started/get_started_fs.html)\n  - [编辑并运行脚本](./get_started/get_started_edit_file.html)\n  - [上传脚本到开发板](./get_started/get_started_upload_script.html)\n  - [开机自动运行脚本](./get_started/get_started_boot.html)\n  - [开发板配置文件](./api_reference/builtin_py/board_info.html)\n  - [上手视频教程](./get_started/maixpy_get_started_video.html)\n* 固件定制\n  - [为什么需要定制固件](./firmware/why_customize_firware.html)\n  - [在线编译](./firmware/online_compile.html)\n  - [源码编译](./firmware/compile.html)\n\n\n## MaixPy 手把手教程\n\n* [教程说明](./course/index.html)\n* 基本图像处理\n  * 图像获取和显示\n    * [图像获取](./course/image/basic/get_images.html)\n    * [图像显示](./course/image/basic/display_images.html)\n  * [MaixPy 图像及常用操作](./course/image/basic/vary.html)\n  * [基本画图、写字](./course/image/basic/draw.html)\n  * [硬件加速的图像处理](./course/image/basic/acc_image_deal.html)\n* MaixPy AI\n  * [深度神经网络基础知识](./course/ai/basic/dnn_basic.html)\n  * [MaixPy AI 硬件加速基础知识](./course/ai/basic/maixpy_hardware_ai_basic.html)\n  * 图像处理\n    * [人脸检测](./course/ai/image/face_detect.html)\n    * [1000 种物体分类](./course/ai/image/1000_type_classifier.html)\n    * [人脸识别](./course/ai/image/face_recognization.html)\n    * [自学习分类](./course/ai/image/self_learn_classifier.html)\n  * 音频处理\n    * [语音识别](./course/speech/recognizer_cnn.html)\n* 模型训练\n  * 训练自己的分类和检测模型\n    * [MaixHub 云端训练](./course/ai/train/maixhub.html)\n    * [本地训练](./course/ai/train/local.html)\n* 传统算法\n  * 图像处理\n    - [寻找色块](./course/image/find_color_blob.html)\n    - [二维码识别](course/image/find_qrcodes.md)\n  * 音频处理\n    - [FFT](course/speech/fft.md)\n    - [FFT 瀑布图](course/speech/fft_waterfall.md)\n    - [关键词识别](./course/speech/recognizer_mfcc.html)\n* 外设\n  * 片上外设\n    - [I2C](modules/on_chip/i2c.md)\n    - [PWM](modules/on_chip/pwm.md)\n    - [SPI](modules/on_chip/spi.md)\n    - [Timer](modules/on_chip/timer.md)\n    - [UART](modules/on_chip/uart.md)\n    - [I2S](modules/on_chip/i2s.md)\n    - [WDT](modules/on_chip/wdt.md)\n  * [SP-MOD](./modules/sp_mod/index.html)\n    - [BT 蓝牙透传](./modules/sp_mod/sp_bt.html)\n    - [LoRa 无线通信](./modules/sp_mod/sp_lora.html)\n    - [RFID 射频识别](./modules/sp_mod/sp_rfid.html)\n    - [TOF 测距](./modules/sp_mod/sp_tof.html)\n    - [Eink 电子墨水屏](./modules/sp_mod/sp_eink.html)\n    - [Lcd1.14 IPS屏](./modules/sp_mod/sp_lcd1.14.html)\n    - [Weather 气象模块](./modules/sp_mod/sp_weather.html)\n    - [Ethernet 有线网口](modules/sp_mod/sp_ethernet.md)\n  * [Grove](./modules/grove/index.html)\n    - [Ultrasonic Ranger 测距](modules/grove/grove_ultrasonic_ranger.md)\n    - [Chainable RGB LED 灯](modules/grove/grove_chainable_rgb_led.md)\n    - [RGB LED Ring 灯条](modules/grove/grove_rgb_led_ring.md)\n  * 更多外设\n    - [Sipeed 麦克风阵列](./develop_kit_board/module_microphone.html)\n    - [双摄模块](modules/others/binocular_camera.md)\n    - [MLX90640 串口红外镜头](modules/others/mlx90640.md)\n    - [HTPA 红外镜头](modules/others/htpa.md)\n    - [舵机](modules/others/servo.md)\n    - [ESP32 ADC](./modules/others/esp32_read_adc.html)\n    - [onwire 单总线](modules/others/onewire.md)\n* 更多功能\n  * 系统\n    - [主频、复位等](./course/others/system.html)\n    - [内存配置与查看](./course/others/mem.html)\n  * GUI\n    - [中文等多国语言支持](./course/image/image_draw_font/image_draw_font.html)\n    - [Maix UI](./course/others/maixui.html)\n    - [Lvgl](./course/others/lvgl.html)\n    - [编辑器 pye](./course/others/pye.html)\n  * 网络\n    - [配置 network 网卡](./course/network/network_config.html)\n    - [使用 socket 通信](./course/network/socket_usage.html)\n  * 多媒体\n    - [audio](./course/media/audio.html)\n    - [video](./course/media/video.html)\n  * 游戏\n    - [NES 游戏机](./api_reference/media/nes.html)\n\n## API手册\n\n* [标准库](./api_reference/standard/index.html)\n  - [cmath](./api_reference/standard/cmath.html)\n  - [gc](./api_reference/standard/gc.html)\n  - [math](./api_reference/standard/math.html)\n  - [sys](./api_reference/standard/sys.html)\n  - [ubinascii](./api_reference/standard/ubinascii.html)\n  - [ucollections](./api_reference/standard/ucollections.html)\n  - [uctypes](./api_reference/standard/uctypes.html)\n  - [uerrno](./api_reference/standard/uerrno.html)\n  - [uhashlib](./api_reference/standard/uhashlib.html)\n  - [uheapq](./api_reference/standard/uheapq.html)\n  - [ujson](./api_reference/standard/ujson.html)\n  - [uos](./api_reference/standard/uos.html)\n  - [ure](./api_reference/standard/ure.html)\n  - [usocket](./api_reference/standard/usocket.html)\n  - [ustruct](./api_reference/standard/ustruct.html)\n  - [utime](./api_reference/standard/utime.html)\n  - [uzlib](./api_reference/standard/uzlib.html)\n* [machine](./api_reference/machine/index.html)\n  - [I2C](./api_reference/machine/i2c.html)\n  - [PWM](./api_reference/machine/pwm.html)\n  - [SPI](./api_reference/machine/spi.html)\n  - [Timer](./api_reference/machine/timer.html)\n  - [UART](./api_reference/machine/uart.html)\n  - [network](./api_reference/machine/network.html)\n  - [WDT](api_reference/machine/wdt.md)\n* [Maix](./api_reference/Maix/index.html)\n  - [FPIOA](./api_reference/Maix/fpioa.html)\n  - [GPIO](./api_reference/Maix/gpio.html)\n  - [KPU](./api_reference/Maix/kpu.html)\n  - [FFT](./api_reference/Maix/fft.html)\n  - [I2S](./api_reference/Maix/i2s.html)\n  - [freq](./api_reference/Maix/freq.html)\n  - [utils](./api_reference/Maix/utils.html)\n* [helper](./api_reference/builtin_py/index.html)\n  - [fpioa_manager](./api_reference/builtin_py/fm.html)\n  - [board_info](./api_reference/builtin_py/board_info.html)\n  - [Micropython Editor](./api_reference/application/pye.html)\n* [media](./api_reference/machine_vision/index.html)\n  - [lcd](./api_reference/machine_vision/lcd.html)\n  - [sensor](./api_reference/machine_vision/sensor.html)\n  - [image](api_reference/machine_vision/image/image.md)\n  - [video](./api_reference/media/video.html)\n  - [audio](./api_reference/media/audio.html)\n  - [nes](./api_reference/media/nes.html)\n  - [lvgl](./course/others/lvgl.html)\n  - [isolated_word](./api_reference/machine_vision/isolated_word.html)\n  - [maix_asr](./api_reference/machine_vision/maix_asr.html)\n* [extend](./api_reference/extend/index.html)\n  - [touchscreen](./api_reference/extend/touchscreen.html)\n  - [modules.ultrasonic](./api_reference/extend/ultrasonic.html)\n  - [modules.ws2812](./api_reference/extend/ws2812.html)\n  - [modules.htpa](./api_reference/extend/htpa.html)\n  - [modules.onewire](./api_reference/extend/onewire.html)\n\n\n## 常见问题 FAQ\n\n* [MaixPy 常见问题 FAQ](./others/maixpy_faq.html)\n* [MaixHub 平台 FAQ](./others/maixhub_faq.html)\n\n\n## 进阶\n\n* 进阶开发\n  - [源码目录结构](./course/advance/project_framework.html)\n  - [如何编译 MaixPy 工程](course/advance/compile.md)\n  - [如何用 C 添加一个 MaixPy 模块](./course/advance/add_c_module.html)\n  - [打包文件系统](./course/advance/pack_fs.html)\n\n* 参与贡献\n  - [参与文档编写（规范）](./contribute/doc_convention.html)\n  - [代码编写规范](./contribute/code_convention.html)\n\n\n## 社区 & 分享\n\n- [精选文章](./share/recommend_articles.html)\n- [开源项目](./share/open_projects.html)\n- 大家的经验分享\n  * [参与经验分享/分享模板](./share/my_share/index.html)"}, "/soft/maixpy/zh/course/image/basic/acc_image_deal.html": {"title": "硬件加速的图像处理", "content": "---\ntitle: 硬件加速的图像处理\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 硬件加速的图像处理\n---\n\n\n使用硬件替换某些软件部分， 可以让计算更加快速，已经做了加速优化的方法如下：\n\n如下代码， 分别对图像进行了`边缘查找`，`锐化`，`浮雕化`， 利用了卷积计算快速得到结果。\n\n```python\nimport sensor\nimport image\nimport lcd\nimport time\n\nlcd.init(freq=15000000)\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\norigin = (0,0,0, 0,1,0, 0,0,0)\nedge = (-1,-1,-1,-1,8,-1,-1,-1,-1)\nsharp = (-1,-1,-1,-1,9,-1,-1,-1,-1)\nrelievo = (2,0,0,0,-1,0,0,0,-1)\n\ntim = time.time()\nwhile True:\n    img=sensor.snapshot()\n    img.conv3(edge)\n    lcd.display(img)\n    if time.time() -tim >10:\n        break\ntim = time.time()\nwhile True:\n    img=sensor.snapshot()\n    img.conv3(sharp)\n    lcd.display(img)\n    if time.time() -tim >10:\n        break\ntim = time.time()\nwhile True:\n    img=sensor.snapshot()\n    img.conv3(relievo)\n    lcd.display(img)\n    if time.time() -tim >10:\n        break\n\nlcd.clear()\n```"}, "/soft/maixpy/zh/course/image/basic/get_images.html": {"title": "获得图像", "content": "---\ntitle: 获得图像\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: 获得图像\n---\n\n\n可以从摄像头获得图像，也可以从文件系统读取图片文件， 也可以从网络获取图片\n\n## 从摄像头获取\n\n\n这部分已经在前面的教程有提过\n\n``` python\nimport sensor, lcd\n\nsensor.reset()\nsensor.set_pixformat(sensor.RGB565)\nsensor.set_framesize(sensor.QVGA)\nsensor.run(1)\nsensor.skip_frames()\n\nimg = sensor.snapshot()\nprint(img)\n```\n\n* `import sensor`: 首先导入内置的`sensor`（摄像头）库\n* `sensor.reset()`: 初始化摄像头，这里失败需要检查硬件\n* `sensor.set_pixformat(sensor.RGB565)`: 设置摄像头为`RGB565`格式，默认都是用`RGB565`即可\n* `sensor.set_framesize(sensor.QVGA)`: 分辨率为`QVGA`，即`320x240`\n* `sensor.run(1)`: 开始运行，在现在的版本中也可以不调用，在上面设置完成后，摄像头会自动开始运行\n* `sensor.skip_frames()`: 摄像头刚启动时，图像质量还没稳定，所以跳过一些图像\n* `sensor.snapshot()`:从摄像头取一帧图像数据，返回值是一张图像的对象\n\n除了以上的函数， 你可能还需要设置图像为镜像（`hmirror`)，比如前置摄像头； 或者上下翻转(`vflip`)， 以及白平衡等等， 具体看 [sensor 模块的 API 手册](./../../../api_reference/machine_vision/sensor.html)\n\n\n## 从文件读取\n\n```python\nimport image\n\nimg = image.Image(\"/sd/test.jpg\")\nprint(img)\n```\n\n当然你也可以把图片保存到文件系统`\n```python\nimg.save(\"/sd/test2.jpg\", quality=95)\n```\n\n\n## 从内存读取（或者网络读取）\n\n可以先将文件读取到内存， 具体是从哪里读取的看你的应用了， 比如网络，或者串口 SPI 等等， \n构造一个 `bytes`对象\n\n```python\nimport image\n\njpeg_buff = b'\\xFF'   # jpeg buffer\nimg = image.Image(jpeg_buff, from_bytes = True)\nprint(img)\n```\n\n## 直接创建一个空白图像\n\n```python\nimport image\n\nimg = image.Image(size=(320, 240))\n```\n\n这张图片是全黑的空白图像"}}