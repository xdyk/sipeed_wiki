{"/hardware/en/lichee/index.html": {"title": "Sipeed LicheePi series hardware", "content": "---\ntitle: Sipeed LicheePi series hardware\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载, Maix系列\ndesc: 矽速科技(Sipeed) Maix 系列开源硬件产品\n---\n\n\nCurrently Only have Chinese version, see [LicheePi series hardware Chinese doc](/hardware/zh/lichee/index.html), you can install google tranlate plugin to tranlate pages"}, "/hardware/en/maixIII/index.html": {"title": "", "content": "Coming soon"}, "/hardware/en/maixII/index.html": {"title": "Sipeed MaixII series hardware", "content": "---\ntitle: Sipeed MaixII series hardware\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载, Maix系列\ndesc: 矽速科技(Sipeed) Maix 系列开源硬件产品\n---\n\n\nCurrently Only have Chinese version, see [maixII series hardware Chinese doc](/hardware/zh/maixII/index.html), you can install google tranlate plugin to tranlate pages"}, "/hardware/en/longan/index.html": {"title": "Sipeed Longon series hardware", "content": "---\ntitle: Sipeed Longon series hardware\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载, Maix系列\ndesc: 矽速科技(Sipeed) Maix 系列开源硬件产品\n---\n\n\nCurrently Only have Chinese version, see [Longan series hardware Chinese doc](/hardware/zh/longan/index.html), you can install google tranlate plugin to tranlate pages"}, "/hardware/en/index.html": {"title": "Sipeed Hardware", "content": "---\ntitle: Sipeed Hardware\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载, 深度学习, 人工智能, K210\ndesc: 矽速科技的硬件资料站\n---\n\n# Sipeed HardWare WIKI\n\n[English](./README_en.html)[中文]\n\n## K210 核心模组\n\n* [K210 核心模块](./core_modules/k210_core_modules.html)\n    - [M1/M1w](./core_modules/k210_core_modules.html)\n    - [M1n](./core_modules/k210_core_modules.html)\n\n## MaixPy 系列开发板\n\n* [MaixPy boards](./maixpy_develop_kit_board/develop_kit_board.html)\n  - [Maix Go](./maixpy_develop_kit_board/maix_go.html)\n  - [Maix Dock(M1/M1W)](./maixpy_develop_kit_board/maix_dock.html)\n  - [Maix Bit](./maixpy_develop_kit_board/maix_bit.html)\n  - [Maix Duino](./maixpy_develop_kit_board/maix_duino.html)\n  - [Maix Nano](./maixpy_develop_kit_board/maix_nano.html)\n  - [Maix Cube](./zh/maixpy_develop_kit_board/maix_cube.html)\n  - [Maix Amigo](./maixpy_develop_kit_board/maix_Amigo.html)\n\n\n\n### MaixPy 外设模块\n\n* [扩展接口 Grove](./)\n    - [Grove-RGB LED](./)\n* [扩展接口 SP-MOD](./)\n    - [转接板类](./)\n    - [SP-Extender](./modules_spmod/spmod_extender.html)\n    - [SP-Grove](./modules_spmod/spmod_grove.html)\n    - [SP-FPC](./modules_spmod/spmod_fpc.html)\n    - [SP-MicArray](./modules_spmod/spmod_micarray.html)\n    - [SP-JoyStick](./modules_spmod/spmod_joystick.html)\n    - [SP-JoyStick2](./zh/modules_spmod/spmod_joystick.html)\n    - [SP-Servo](./modules_spmod/spmod_servo.html)\n    - [SP-Type-C](./)\n    - 传感器类\n    - [SP-Weather](./modules_spmod/spmod_weather.html)\n    - [SP-TOF-1P](./modules_spmod/spmod_tof.html)\n    - 通信类\n    - [SP-BLE](./modules_spmod/spmod_bt.html)\n    - [SP-LoRa](./modules_spmod/spmod_lora.html)\n    - [SP-PSRAM](./modules_spmod/spmod_psram.html)\n    - [SP-RFID](./modules_spmod/spmod_rfid.html)\n    - [SP-Ethernet](./modules_spmod/spmod_ethernet.html)\n    - 显示类\n    - [SP-LCD 1.14](./modules_spmod/spmod_lcd1.14.html)\n    - [SP-Eink](./modules_spmod/spmod_eink.html)\n\n## 模块&&调试器\n\n### 调试器\n\n- [Sipeed RV Debugger](./)\n- [双串口 USB 模块](./)\n\n### 模块\n\n- Camera(Sensor)\n\n    - [OV2640](./)\n    - [OV2640-M12](./)\n    - [双摄像头模块(OV2640)](./)\n    - [GC0328](./)\n    - [双摄像头模块(GC0328)](./)\n    - [OV7740](./)\n\n- [麦克风模块](./)\n  - [单麦克风模块](./)\n  - [麦克风阵列](./)\n\n- [LCD 1.3/2.4/2.8/4.3/5 寸](./)"}, "/hardware/en/maixIV/index.html": {"title": "", "content": "Coming soon"}, "/hardware/en/tang/index.html": {"title": "Sipeed Tang series hardware", "content": "# Sipeed Tang series hardware\n\nCurrently Only have Chinese version, see [Tang series hardware Chinese doc](/hardware/zh/tang/index.html), you can install google tranlate plugin to tranlate pages"}, "/hardware/en/maix/modules_spmod/spmod_joystick.html": {"title": "SPMOD - JoyStick", "content": "# SPMOD - JoyStick\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_joystick/sp_joystick.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_JoyStick (JoyStick module).\n\n## SPMOD - JoyStick Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Connect to the board through the SP-MOD SPI interface\n- 7.2V~9V DC can be connected via external adapter，power the vibration motor of the handle\n- Built-in step-up circuit，easy to drive the handle\n- Compatible with PSX/PS2\n- Size:35.0\\*20.0\\*13.3mm\n\n\n###  SPMOD_JoyStick pin description:\n\n| Pin  | Name | Type  | Description  |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G | Ground |\n| 2 | CS | I | Chip Select input pin |\n| 3 | SO | I/O | Master In Slave Out |\n| 4 | NC | NC | Not connected |\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I | SPI clock pin |\n| 7 | SI | I/O | Master Out Slave In |\n| 8 | ACK | O | data ready output pin |\n\n<img src=\"\" width=\"500\" />\n\n\n## Introduction\n\n- 待更新\n\n## Outlook\n\n- SPMOD_JoyStick Size drawing:\n\n<img src=\"../../assets/spmod/spmod_joystick/sipeed_spmod_joystick.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_psram.html": {"title": "SPMOD - PSRAM", "content": "# SPMOD - PSRAM\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_psram/sp_psram.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_PSRAM(PSRAM module) uses IPS6404L-SQ PSRAM.\n\n## SPMOD - PSRAM Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Connect to the board through the SP-MOD SPI/QPI interface\n- Pseudo−SRAM:IPS6404L-SQ is 64 Mbit of SPI/QPI (serial/quad parallel interface) Pseudo−SRAM device.\n- Working frequency:104MHz\n- CLK period:30.3ns\n- Size:15.0\\*10.0\\*13.3mm\n\n###  IPS6404L-SQ Introduction：\n\n| Features: | --- |\n| --- | -- |\n| Supply voltage of external power supply | 2.7V~3.6V |\n| Supply current of external power supply | 10mA |\n| Range of working temperature | -30℃~85℃ |\n| Sleep Status of Current | <250μA |\n| Working frequency | 104Mhz |\n| Response time of SPI read | 30.3ns |\n| Response time of other operations | 9.3ns |\n| interface | PI/QPI optional, default SPI |\n\n\n###  SPMOD_PSRAM pin description:\n\n| Pin  | Name | Type  | Decription    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND  | G | Ground |\n| 2 | CS | I  | Chip Select input pin |\n| 3 | D1 | I/0 | Master In Slave Out |\n| 4 | D3 | I/O | No function (IO3 in QSPI mode) |\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I | SPI clock pin |\n| 7 | D0 | I/0 | Master Out Slave In (IO0 in QSPI mode) |\n| 8 | D2 | I/O | No function (IO2 in QSPI mode) |\n\n\n<img src=\"\" width=\"300\" />\n\n\n## Usage\n\n- wait upgrade\n\n## Outlook\n\n- SPMOD_PSRAM Size drawing:\n\n<img src=\"../../assets/spmod/spmod_psram/sipeed_spmod_psram.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_lora.html": {"title": "SPMOD - LoRa", "content": "# SPMOD - LoRa\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_lora/sp_lora.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_LoRa(LoRa Module) uses M-XL8 module.\n\n## SPMOD - LoRa Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-MOD SPI to communicate with LoRa module\n- LoRa module:The SP_LoRa module uses M-XL8 module with LoRaTM modem and LoRa module with adjustable power amplifier. It has high performance and reliability and is connected by SP_MOD.\n- 370MHz-1200MHz, Maximum 20dBm (100mW) continuous transmit power\n- Size:25.0\\*10.0\\*4.3mm\n\n### M-XL8 SX1276 LoRa module Introduction\n\n| Features： | --- |\n| --- | -- |\n| Working frequency | 370MHz-1200Mhz |\n| Transmission power | 20dBm(Maximum) |\n| Communication interface | SPI |\n| Supply voltage of external power supply | 1.8V~6.3V |\n| Range of working temperature | -40℃ - 80℃ |\n| antenna | external，IPEX |\n| Reception Sensitivity | -148dbm |\n| RSSI value | 127dB |\n| Maximum link budget | 168dB |\n| Send and receive status of current | 9.9mA |\n| Sleep status of current | 50nA |\n| Modulation method | FSK, GFSK, MSK, GMSK, LoRaTM及OOK |\n> Built-in LoRaTM modem, built-in CRC, inherited +12dBm adjustable PA+LNA\n\n\n###  SPMOD_lora pin description:\n\n| Pin  | Name | Type  | Description    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G  | Ground |\n| 2 | CS | I/O | Chip Select input pin |\n| 3 | SO | I/O | Master In Slave Out |\n| 4 | RST | I | Reset (active low) |\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I | SPI clock pin|\n| 7 | SI | I/O | Master Out Slave In |\n| 8 | IRQ | I | Connected to DIO0 of the module,，Programmable decision function |\n\n<img src=\"../../assets/spmod/spmod_lora/back.png\" width=\"300\" />\n\n- Mode of communication\n\n|   MCU:FUN(IO)   | SP_LCD |\n| :-------------: | :----: |\n|  GPIOHS7(IO_7)  |  RST   |\n| SPI:MISO(IO_15) |   SO   |\n| SPI:SS0(IO_20)  |   CS   |\n| SPI:SCK(IO_21)  |  SCK   |\n| SPI:MOSI(IO_8)  |   SI   |\n|   GPIOH(IO_6)  |  IRQ   |\n|  1.8-6.3V    |  3.3V  |\n|   GND      |  GND   |\n\n<img src=\"../../assets/spmod/spmod_lora//connection.png\" height=\"250\">\n\n## Usage\n\n* Process\n\n  1. Create the LoRa object and initialize it\n  2. Send or receive data\n\n### C :\n\n  ```c\n\n  fpioa_set_function(SPI_LoRa_SX127X_CS_PIN_NUM, FUNC_SPI1_SS0);   // CS: 20\n  fpioa_set_function(SPI_LoRa_SX127X_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SCLK: 21\n  fpioa_set_function(SPI_LoRa_SX127X_MOSI_PIN_NUM, FUNC_SPI1_D0);  // MOSI: 8\n  fpioa_set_function(SPI_LoRa_SX127X_MISO_PIN_NUM, FUNC_SPI1_D1);  // MISO: 15\n\n  fpioa_set_function(SPI_LoRa_SX127X_IRQ_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_IQR_GPIO_NUM); // IQR: 6\n  fpioa_set_function(SPI_LoRa_SX127X_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_RST_GPIO_NUM); // RST: 7\n\n  spi_init(SPI_DEVICE_1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  sx1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LoRa_SF_8,\n                 SX1278_LoRa_BW_20_8KHZ, 10);\n\n  if (master == 1)\n  {\n      printf(\"====MASTER====\\r\\n\");\n      ret = sx1278_LoRaEntryTx(&SX1278, 16, 2000);\n  }\n  else\n  {\n      printf(\"====SALAVE====\\r\\n\");\n      ret = sx1278_LoRaEntryRx(&SX1278, 16, 2000);\n  }\n\n  ```\n\n### MaixPy :\n\n  ```python\n\n  fm.register(20, fm.fpioa.GPIOHS20, force=True) # RST\n  fm.register(7, fm.fpioa.GPIOHS7, force=True) # CS\n\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.IN)\n  # The other pins are configured at SPI initialization time\n\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=100 * 1000,\n               polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8, miso = 15)\n\n  lora = SX127x(spi=spi1, pin_ss=cs)\n  lora.init()\n\n  #######receiver###########\n  receive(lora)\n\n  ########sender###########\n  # send(lora)\n\n\n  ```\n\n### Runtime environments:\n\n|  Language  |  Board  | SDK/Firmware version |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*The MaixPy firmware is recommended to compile from the latest source*\n\n### Result\n\n* C\n\n  <center class=\"third\">\n\t  <img src=\"../../assets/spmod/spmod_lora/lora_send_log_c.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_lora/lora_recv_log_c.png\" height=\"250\"/>\n  </center>\n\n* MaixPy\n\n  <center class=\"third\">\n\t  <img src=\"../../assets/spmod/spmod_lora/lora_send_log.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_lora/lora_recv_log.png\" height=\"250\"/>\n  </center>\n\n### Transplant\n\nThe following parameters need to be modified\n\n* C\n\n  ```c\n    // board_config.h\n    #define SPI_INDEX           1\n    #define SPI_SCLK_RATE       600*1000\n    #define SPI_CHIP_SELECT_NSS 0//SPI_CHIP_SELECT_0\n\n    #define SPI_LoRa_SX127X_CS_PIN_NUM      20\n    #define SPI_LoRa_SX127X_SCK_PIN_NUM     21\n    #define SPI_LoRa_SX127X_MOSI_PIN_NUM    8\n    #define SPI_LoRa_SX127X_MISO_PIN_NUM    15\n\n    #define SPI_LoRa_SX127X_IRQ_PIN_NUM     6\n    #define SPI_LoRa_SX127X_RST_PIN_NUM     7\n\n    #define SPI_LoRa_SX127X_IQR_GPIO_NUM    6\n    #define SPI_LoRa_SX127X_RST_GPIO_NUM    7\n  ```\n\n* MaixPy\n\n  ```python\n    ################### config ###################\n    LoRa_RST = const(20)\n    LoRa_CS = const(7)\n    LoRa_SPI_SCK = const(21)\n    LoRa_SPI_MOSI = const(8)\n    LoRa_SPI_MISO = const(15)\n    LoRa_SPI_NUM = SPI.SPI1\n    LoRa_SPI_FREQ_KHZ = const(100)\n    ##############################################\n  ```\n\n## Outlook\n\n- SPMOD_LoRa Size drawing:\n\n<img src=\"../../assets/spmod/spmod_lora/sipeed_spmod_lora.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_micarray.html": {"title": "SPMOD - MicArray", "content": "# SPMOD - MicArray\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_micarray/sp_micarray.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_MicArray(Microphone array module) uses RY3708(DC-DC)Boost Module\n\n## SPMOD - MicArray Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Transfer the SP-MOD interface to the FPC, and use the FPC to connect to the microphone array board\n- 3.3V to 5V boost regulator(DC-DC)(RY3708)，easily drive microphone arrays.\n- Use the Grove interface to control the LED on the microphone array module.\n- It needs to be used with the SIPEED MICARRAY module.\n- Size:35.0\\*10.0\\*11.2mm\n\n\n###  BOOST DC-DC RY3708 module Introduction\n\n| Features： | --- |\n| --- | -- |\n| Output voltage range | 5.1V ±0.2V |\n| Supply voltage of external power supply |\t3.3V ±0.2V |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 500mA |\n| Range of working temperature | -40℃ ~ 85℃ |\n> 1.2MHz Fixed Switching Frequency,Internal 4A Switch Current Limit,\nThermal Shutdown,Integrated 80mΩ Power MOSFET\n\n\n###  SPMOD_MicArray pin description:\n\n| Pin  | Name | Type  | Description    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G |Ground |\n| 2 | D2 | I | Mic_D0 |\n| 3 | D3 | I | Mic_D2 |\n| 4 | D0 | I | Mic_WS |\n| 5 | 3V3 | V |Power supply(3.3V) |\n| 6 | D4 | I | Mic_D1 |\n| 7 | D5 | I | Mic_D3 |\n| 8 | D1 | I | Mic_BCK |\n| 9 | CK | I | Serial clock pin to control LED |\n| 10 | DA | I | Data clock pin to control LED |\n<img src=\"\" width=\"300\" />\n\n\n## Usage\n\n- 待补充\n\n## Outlook\n\n- SPMOD_MicArray Size drawing:\n\n<img src=\"../../assets/spmod/spmod_micarray/sipeed_spmod_micarray.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_extender.html": {"title": "SPMOD - Extender", "content": "# SPMOD - Extender\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_extender/sp_extender.png\" align=\"right\" width=\"\" height=\"300\" />\n\n\nSPMOD_Extender(8PIN SP-MOD Expander)\n\n## SPMOD - Extender Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-Extender to divide SP-MOD into four interface，including three Two-wire SP-MOD interface and a Four-wire SP-MOD interface\n- Size:35.0\\*20.0\\*1.6mm\n\n## Introduction\n\n| Features: | --- |\n| --- | -- |\n| Two-wire SP-MOD interface*3 | Connect to the D0 and D1 on the SP-MOD，Used as UART interface (Connect at most one device)\nor I2C interface(Connect at most three device) , can also be used as two independent GPIO |\n| Four-wire SP-MOD interface |  Connect to the D2-D5 on the SP-MOD，Uusually used as SPI interface，\ncan also be used as four independent GPIO |\n| Supply voltage of external power supply | Depends on connected modules |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 1000mA |\n| Range of working temperature | -40℃ ~ 85℃ |\n\n\n## Outlook\n\n- SPMOD_Extender Size drawing:\n\n<img src=\"../../assets/spmod/spmod_extender/sipeed_spmod_extender.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/README_en.html": {"title": "Sipeed HardWare WIKI", "content": "# Sipeed HardWare WIKI\n\n[English|[中文](./index.html)]\n\n## K210 Mocules\n\n* [K210 Mocules](./en/core_modules/k210_core_modules.html)\n    - [M1/M1w](./en/core_modules/k210_core_modules.html)\n    - [M1n](./en/core_modules/k210_core_modules.html)\n\n\n## MF face recognition module\n\n* [MF face recognition module]\n  - [MF0 && MF0 Dock](./en/mf_ml_module/mf0_ml_module.html)\n  - [MF1 && MF2](./en/mf_ml_module/mf1_ml_module.html)\n  - [MF4 && MF5](./en/mf_ml_module/mf5_product.html)\n\n\n- [MF face recognition module Precautions](./mf_ml_module/mf_precautions.html)\n- [MF module update firmwave](./en/mf_ml_module/mf_update_firmwave.html)\n\n-----\n\n## MaixPy Develop Kit Board\n\n* [MaixPy Develop Kit Board](./en/maixpy_develop_kit_board/develop_kit_board.html)\n  - [Maix Go](./en/maixpy_develop_kit_board/maix_go.html)\n  - [Maix Dock](./en/maixpy_develop_kit_board/maix_dock.html)\n  - [Maix Bit](./en/maixpy_develop_kit_board/maix_bit.html)\n  - [Maix Duino](./en/maixpy_develop_kit_board/maix_duino.html)\n  - [Maix Cube](./en/maixpy_develop_kit_board/maix_cube.html)\n  - [Maix Amigo](./en/maixpy_develop_kit_board/maix_Amigo.html)\n\n\n## LicheePi (Linux)\n\nLicheePi Zero\n\n- [LicheePi Zero]()\n- [LicheePi Zero Plus]()\n\n- [LicheePi Nano]()\n\n## Lichee Tang(FPGA)\n\n- [Lichee Tang Primer]()\n- [Lichee Tang Nano]()\n\n## Longan (MCU)\n\n- [longan Nano]()\n\n-----\n\n## Peripheral Module\n\n* [Grove Module]()\n    - [Grove-RGB LED]()\n* [SP-MOD Module]()\n    - Adapter\n      - [SP-Extender](./en/modules_spmod/spmod_extender.html)\n      - [SP-Grove](./en/modules_spmod/spmod_grove.html)\n      - [SP-FPC](./en/modules_spmod/spmod_fpc.html)\n      - [SP-MicArray](./en/modules_spmod/spmod_micarray.html)\n      - [SP-JoyStick](./en/modules_spmod/spmod_joystick.html)\n      - [SP-Servo](./en/modules_spmod/spmod_servo.html)\n      - [SP-Type-C]()\n    - Sensor\n      - [SP-Weather](./en/modules_spmod/spmod_weather.html)\n      - [SP-TOF-1P](./en/modules_spmod/spmod_tof.html)\n    - Communication\n      - [SP-BLE](./en/modules_spmod/spmod_bt.html)\n      - [SP-LoRa](./en/modules_spmod/spmod_lora.html)\n      - [SP-PSRAM](./en/modules_spmod/spmod_psram.html)\n      - [SP-RFID](./en/modules_spmod/spmod_rfid.html)\n      - [SP-Ethernet](./en/modules_spmod/spmod_ethernet.html)\n    - Display\n      - [SP-LCD 1.14](./en/modules_spmod/spmod_lcd1.14.html)\n      - [SP-Eink](./en/modules_spmod/spmod_eink.html)\n\n\n## Module && Debugger\n\n### Debugger\n\n- [Sipeed RV Debugger]()\n- [Dual serial port USB module]()\n\n### Module\n\n- Camera(Sensor)\n    - [OV2640]()\n    - [OV2640-M12]()\n    - [(GC0328)]()\n    - [Dual camera module(GC0328)]()\n    - [OV7740]()\n\n- [Microphone module]()\n  - [Single microphone module]()\n  - [Microphone array]()\n\n- [LCD 1.3'/2.4'/2.8'/4.3'/5']()"}, "/hardware/en/maix/modules_spmod/spmod_bt.html": {"title": "SPMOD - BT", "content": "# SPMOD - BT\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_bt/sp_bt.png\" alt=\"XXX\" style=\"zoom:40%;\" />\n\nSPMOD-BT(Bluetooth module) uses YDJ-23.\n\n## SPMOD - BLE Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-MOD UART to communicate with Bluetooth module\n- JDY-23 Bluetooth module:Support BLE 5.0(Compatible with BLE4.0、BLE4.2).Communication interface adopts UART interface. The module supports AT command control. It has ultra-low power design and high reliability design.\n- Two built-in LED，making module status easier to see.\n- Size:25.6\\*20.2\\*3.2mm\n\n### JDY-23 Introduction:\n\n| Features: | --- |\n| --- | -- |\n| Working Frequency:| 2.4GHz|\n| Transmission Power:| 4db(maixmun) |\n| Communication Interface:| UART |\n| Supply voltage of external power supply :| 1.8V~3.6V |\n| Range of working temperature :| -40℃ - 80℃ |\n| Antenna:| Built-in PCB antenna\n| Reception Sensitivity:| -97dbm |\n| Support master-slave: | Slave |\n| Bluetooth Version:| BLE 5.0(Compatible with BLE4.0、BLE4.2) |\n| Awakening Current State:| 800uA(Transmission) |\n| Sleep Status of Current:| <50uA (Transmission) |\n| Deep Sleep of Current:| 9uA (Not transmission) |\n| Default baud rate:| 9600 |\n\n### SPMOD_BT pin description :\n\n| Pin | Name | Type | Description |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G | Ground |\n| 2 | AWK | I/O | Sleep wake-up pin (active low) |\n| 3 | STA | I/O |  The status of the pin connection |\n| 4 | RX | I | Serial input pin (TTL level) |\n| 5 | 3V3 | V |  Power supply(3.3V) |\n| 6 | --- | NC | Not connected |\n| 7 | RST | I/O | Reset (active low) |\n| 8 | TX  | O | Serial output pin (TTL level) |\n\n<img src=\"../../assets/spmod/spmod_bt/back.jpg\" height=\"250\" />\n\n- Mode of connection:\n\n| MCU:FUN(IO) | SP_BT |\n| :---------: | :---: |\n| UART:TX(IO_7) | RX |\n| USRT:RX(IO_6) | TX |\n| 1.8-3.3V | 3.3V |\n| GND | GND |\n\n<img src=\"../../assets/spmod/spmod_bt/connection.png\" height=\"250\">\n\n### AT instruction list:\n\n| Order | Description |\n| --- | --- |\n|AT+POWR | Get transmit power |\n|AT+RST\t| Soft reset |\n|AT+MAC\t| Display MAC address |\n|AT+NAME | Display Transmission name |\n|AT+HOSTEN | Slave mode or IBEACON work mode |\n|AT+IBUUID | UUID of IBEACON |\n|AT+DISC | Disconnect |\n|AT+SLEEP | Configures the Sleep mode |\n|AT+MTU | Set the serial port for the APP to send a long number of packets |\n\n*See [JDY-23-V2.1.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_bt) for more information*\n\n## Usage\n\n* Process\n  1. Send AT instruction\n  2. Receive the reply\n  3. Determines whether the setup was successful\n\n### C :\n\n  ```c\n  // set uart rx/tx func to io_6/7\n  fpioa_set_function(6, FUNC_UART1_RX + UART_NUM * 2);\n  fpioa_set_function(7, FUNC_UART1_TX + UART_NUM * 2);\n  uart_init(UART_DEVICE_1);\n  uart_configure(UART_DEVICE_1, 9600, 8, UART_STOP_1, UART_PARITY_NONE);\n\n  //change the name of sp_bt module to MAIXCUBE\n  uart_send_data(UART_NUM, \"AT+NAMEMAIXCUBE\\r\\n\", strlen(\"AT+NAMEMAIXCUBE\\r\\n\")); //send AT order\n  msleep(100);\n  ret = uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response\n  if(ret != 0 && strstr(rcv_buf, \"OK\"))\n  {\n     printk(LOG_COLOR_W \"set name success!\\r\\n\");\n  }\n\n  // get the name of sp_bt module\n  uart_send_data(UART_NUM, \"AT+NAME\\r\\n\", strlen(\"AT+NAME\\r\\n\")); //send AT order\n  msleep(100);\n  ret = uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response\n  if(ret != 0 && strstr(rcv_buf, \"NAME\"))\n  {\n     printk(LOG_COLOR_W \"get name success!\\r\\n\");\n  }\n  ```\n\n### MaixPy :\n\n  ```python\n    # set uart rx/tx func to io_6/7\n  fm.register(6,fm.fpioa.UART1_RX)\n  fm.register(7,fm.fpioa.UART1_TX)\n  uart = UART(UART.UART1,9600,8,1,0,timeout=1000, read_buf_len=4096)\n\n  #change the name of sp_bt module to MAIXCUBE\n  uart.write(\"AT+NAMEMAIXCUBE\\r\\n\") #send AT order\n  time.sleep_ms(100)\n  read_data = uart.read() #receive response\n  if read_data:\n      read_str = read_data.decode('utf-8')\n      count = read_str.count(\"OK\")\n      if count != 0:\n          uart.write(\"set name success\\r\\n\")\n\n  # get the name of sp_bt module\n  uart.write(\"AT+NAME\\r\\n\") #send AT order\n  time.sleep_ms(100)\n  read_data = uart.read() #receive response\n  if read_data:\n      read_str = read_data.decode('utf-8')\n      count = read_str.count(\"NAME\")\n      if count != 0:\n          uart.write(\"get name success\\r\\n\")\n  ```\n\n*Note that you must add \\r\\n after sending AT instruction*\n\n### Result:\n\n  Using [BLE Utility](../../tools/bledebugger.apk) to connect the device to do the send and receive test results are as follows:\n\n\n  <center class=\"third\">\n      <img src=\"../../assets/spmod/spmod_bt/res.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_bt/res1.png\" height=\"250\"/>\n  </center>\n\n### Runtime environments:\n\n  |  Language  |  Board  | SDK/Firmware version |\n  | :----: | :------: | :----------------------------- |\n  |   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n  | MaixPy | MaixCube | maixpy v0.5.1                  |\n\n## Outlook\n\n- SPMOD_BLE Size drawing:\n\n<img src=\"../../assets/spmod/spmod_bt/sipeed_spmod_bt.png\" height=\"250\" />\n\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_fpc.html": {"title": "SPMOD - FPC", "content": "# SPMOD - FPC\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_fpc/sp_fpc.png\" align=\"right\" width=\"\" height=\"300\" />\n\n\nSPMOD_FPC( SPMOD extension module )\n\n## SPMOD - FPC Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- As an extension module, easily extend the SP-MOD interface with FPC.\n- Provide a pair of SP-MOD to FPC adapters(Male and female), one FPC cable(10P).\n- Size:15.0\\*10.0\\*3.3mm\n\n## Introduction\n\n| Features: | --- |\n| --- | -- |\n| SP-MOD-to-FPC10-Adapters(Male and female)\t| Bi-directional transformation of SP-MOD to FPC |\n| FPC\tcable(10P) | Connect two adapters |\n| Supply voltage of external power supply | Depends on connected modules |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 1000mA |\n| Range of working temperature | -30℃ ~ 85℃ |\n\n\n## Outlook\n\n- SPMOD_FPC Size drawing:\n\n<img src=\"../../assets/spmod/spmod_fpc/sipeed_spmod_fpc.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_rfid.html": {"title": "SPMOD - RFID", "content": "# SPMOD - RFID\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_rfid/sp_rfid.png\" style=\"padding-right:100px;\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_RFID (NFC module) uses  FM17510 IC.\n\n## SPMOD - RFID Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-MOD SPI to communicate with RFID module\n- 64Byte TRANSCeiver buffer FIFO\n- The RIFC IC is FM17510.\n- Size:25.0\\*20.1\\*6.2mm\n\n### FM17510 Introduction\n\nThe FM17510 used in this module is a highly integrated non-contact reader chip working at 13.56MHz.\nSupports non-contact reader mode in accordance with ISO/IEC 14443 protocol,\n\n\n| Features： |\n| --- |\n| Supports non-contact reader mode in accordance with ISO/IEC 14443 protocol, |\n| Reader mode supports M1 encryption algorithm |\n| ISO14443 TYPEA supports communication rate: 106kbps， 212kbps， 424kbps |\n| Support SPI serial interface, up to 10Mbps |\n| Host interface independent power supply，voltage range: 2.2~3.6V |\n| Range of working temperature -40℃ ~ 85℃ |\n| 64Byte TRANSCeiver buffer FIFO. |\n| Interrupt output mode can be equipped with flexible |\n| Multiple low-power modes: Soft powerdown Mode, Hard powerdown Mode, Deep powerdown Mode(Typical value 1uA) |\n| Support low-power external card detection |\n| Programmable timer |\n| Built-in oscillator circuit and external 27.12MHz crystal oscillator |\n| Wide voltage working range 2.2V~3.6V |\n| Built-in CRC coprocessor |\n| programmed I/O |\n\n\n\n###  SPMOD_RFID pin description:\n\n\n| Pin | Name | Type | Description | |\n| --- | --- | --- | --- | --- |\n| 1 | GND | G | Ground |\n| 2 | CS | I | Chip Select input pin |\n| 3 | SO | I/O | Master In Slave Out  |\n| 4 | NPD | I | Reset/Sleep control pin|\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I | SPI clock pin |\n| 7 | SI | I/O | Master Out Slave In |\n| 8 | IRQ | O | Interrupt output pin |\n\n<img src=\"../../assets/spmod/spmod_rfid/back.png\" height=\"300\" />\n\n- Mode of connection:\n\n|   MCU:FUN(IO)   | SP_RFID |\n| :-------------: | :-----: |\n| NC(IO_7)     |   NPD   |\n| SPI:MISO(IO_15) |   SO    |\n| SPI:SS0(IO_20)  |   CS    |\n| SPI:SCK(IO_21)  |   SCK   |\n| SPI:MOSI(IO_8)  |   SI    |\n| NC(IO_6)    |   IRQ   |\n| 2.2~3.6V    |  3.3V   |\n| GND       |   GND   |\n\n<img src=\"../../assets/spmod/spmod_rfid/connection.png\" height=\"250\">\n\n\n## Usage\n\n* Process\n  1. Initialization\n  2. Detected and bind card\n  3. Read or write data\n\n### C:\n\n  ```c\n\n  fpioa_set_function(RFID_CS_PIN, FUNC_GPIOHS0 + RFID_CS_HSNUM); // RFID_CS_PIN: 20;\n  fpioa_set_function(RFID_CK_PIN, FUNC_GPIOHS0 + RFID_CK_HSNUM); // RFID_CK_PIN: 21;\n  fpioa_set_function(RFID_MO_PIN, FUNC_GPIOHS0 + RFID_MO_HSNUM); // RFID_MO_PIN: 8;\n  fpioa_set_function(RFID_MI_PIN, FUNC_GPIOHS0 + RFID_MI_HSNUM); // RFID_MI_PIN: 15;\n\n  gpiohs_set_drive_mode(spi_io_cfg.hs_cs, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_clk, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_mosi, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_miso, GPIO_DM_INPUT);\n\n  // detected card\n  PcdRequest(0x52, type)\n\n  // auth and bind...\n\n  // read or write 16 bytes data from sector 0x11\n  PcdWrite(0x11, w_buf)\n  PcdRead(0x11, &r_buf)\n\n  ```\n\n### MaixPy:\n\n  ```python\n\n  # 20: CS_NUM;\n  fm.register(20, fm.fpioa.GPIOHS20, force=True)\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n\n  # RFID_SCK: 21; RFID_SI:8; RFID_SO: 15;\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n          polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8, miso=15)\n\n  # Create an object of the class MFRC522\n  MIFAREReader = MFRC522(spi1, cs)\n\n  # detected and auth, bind...\n\n  # read or write 16 bytes data from sector 0x11\n  MIFAREReader.MFRC522_Write(0x11, data)\n  MIFAREReader.MFRC522_Read(0x11)\n\n  ```\n### Runtime environments:\n\n|  语言  | 开发板   | SDK/固件版本                   |\n| :----: | :------- | :----------------------------- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1                  |\n\n### Result:\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_rfid/c_log.png\" height=\"200\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_rfid/maixpy_log.png\" height=\"200\" />\n\n### Transplant:\n\nThe following parameters need to be modified\n\n* C\n\n  ```c\n    // board_config.h\n    #define RFID_CS_PIN (20)\n    #define RFID_CK_PIN (21)\n    #define RFID_MO_PIN (8)\n    #define RFID_MI_PIN (15)\n\n    #define RFID_CS_HSNUM (20)\n    #define RFID_CK_HSNUM (21)\n    #define RFID_MO_HSNUM (8)\n    #define RFID_MI_HSNUM (15)\n  ```\n\n* MaixPy\n\n  ```python\n    ################### config ###################\n    CS_NUM = const(20)\n    SPI_FREQ_KHZ = const(600)\n    SPI_SCK = const(21)\n    SPI_MOSI = const(8)\n    SPI_MISO = const(15)\n    #############################################\n  ```\n\n\n## Outlook\n\n\n- SPMOD_RFID Size drawing:\n\n<img src=\"../../assets/spmod/spmod_rfid/sipeed_spmod_rfid.png\" height=\"250\" />\n\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_tof.html": {"title": "SPMOD - TOF", "content": "# SPMOD - TOF\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_tof/sp_tof.png\" style=\"padding-right:100px;\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_TOF(TOF module) uses VL53L0X .\n\n## SPMOD - TOF Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-MOD I2C to communicate with TOF module\n- ToF module:The VL53L0X sensor used in this module is an I2C interface and a long distance single point flight time measurement (ToF) sensor. It has high performance and high reliability,\n- With the longest distance of 4m and the highest refresh rate of 50Hz\n- With the red laser pointer, the laser is activated through XSHUT and connected by SP_MOD.\n- Size:25.0\\*10\\*3.15mm\n\n### VL53L0X Introduction:\n\n| Features: | --- |\n| --- | -- |\n| Max ranging distance | 4000mm |\n| Refresh rate | 50Hz |\n| Measuring angle | 27°|\n| Communication Interface | I2C |\n| Range of working temperature | -40℃ - 80℃ |\n| Sleep Status of Current | 5uA |\n| Supply voltage of external power supply | 2.8~3.5V |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 20mA |\n\n###  SPMOD_TOF pin description:\n\n| Pin | Name | Type | Description | |\n| --- | --- | --- | --- | --- |\n| 1 | GND | G  | Ground |\n| 2 | IRQ | I  | Interrupt input pin, connected to GPIO1 of VL53L0X |\n| 3 | NC  | NC | Not connected |\n| 4 | SDA | I/O | Receive data signal |\n| 5 | 3V3 | V  | Power supply(3.3V) |\n| 6 | NC  | NC | Not connected |\n| 7 | SHT | I  | Xshutdown pin(active low)|\n| 8 | SCL | I  | Transmit clock signal |\n\n\n<img src=\"../../assets/spmod/spmod_tof/back.png\" height=\"300\" />\n\n- Mode of connection:\n\n|  MCU:FUN(IO)  | SP_RFID |\n| :-----------: | :-----: |\n| I2C:SDA(IO_7) |   SDA   |\n|   NC(IO_15)   |   NC    |\n|   NC(IO_20)   |   IRQ   |\n|   NC(IO_21)   |   NC    |\n| GPIOHS(IO_8)  |   SHT   |\n| I2C:SCL(IO_6) |   SCL   |\n|   2.8~3.5V    |  3.3V   |\n|      GND      |   GND   |\n\n<img src=\"../../assets/spmod/spmod_tof/connection.png\" height=\"250\">\n\n\n## Usage\n\n* Process\n\n  1. Initializatin\n  2. Adjust(option)\n  3. Get distance\n\n### C:\n\n  ```c\n\n  //set io mux\n    fpioa_set_function(VL53L0X_SCL, FUNC_I2C0_SCLK + VL53L0X_I2C_DEVICE * 2);\n    fpioa_set_function(VL53L0X_SDA, FUNC_I2C0_SDA + VL53L0X_I2C_DEVICE * 2);\n    fpioa_set_function(VL53L0X_SHT, FUNC_GPIOHS0 + VL53L0X_SHT);\n\n    gpiohs_set_drive_mode(VL53L0X_SHT, GPIO_DM_OUTPUT);\n\n    //i2c init\n    maix_i2c_init(VL53L0X_I2C_DEVICE, 7, VL53L0X_I2C_FREQ_KHZ * 1000);\n\n    while (vl53l0x_init(&vl53l0x_dev)) {\n          printf(\"VL53L0X init error!!!\\r\\n\");\n          msleep(500);\n    }\n\n    printf(\"VL53L0X init success!\\r\\n\");\n\n    // adjusting\n    printf(\"VL53L0X adjusting\\r\\n\");\n    vl53l0x_calibration_test(&vl53l0x_dev);\n\n    // get distance\n    printf(\"VL53L0X start work\\r\\n\");\n    vl53l0x_general_test(&vl53l0x_dev);\n\n  ```\n\n### MaixPy:\n\n  ```python| 工作电压 | 2.6V~3.5V (选用红色激光时： 2.8V~3.3V) |\n\n    fm.register(VL53L0X_SHT, fm.fpioa.GPIOHS0, force=True)\n    XSHUT = GPIO(GPIO.GPIOHS0, GPIO.OUT)\n\n    i2c = I2C(VL53L0X_I2C_NUM, freq=VL53L0X_FREQ, scl=VL53L0X_SCL, sda=VL53L0X_SDA)\n\n    # create obj and read distance\n\t  tof = VL53L0X(i2c)\n\t  while True:\n      mm = tof.read()\n      utime.sleep_ms(100)\n      print(mm)\n\n  ```\n## Runtime enviroments\n\n| Language |  Boards  |      SDK/firmware version      |\n| :------: | :------: | :----------------------------: |\n|    C     | MaixCube | kendryte-standalone-sdk v0.5.6 |\n|  MaixPy  | MaixCube |         maixpy v0.5.1          |\n\n### Result\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_tof/log_c.png\" height=\"200\" />\n\n* MaixPy\n\n  - [None]\n\n## Transplant\n\nModify the following parameters to fit other K210 boards.\n\n* C\n\n```c\n  // board_config.h\n  #define VL53L0X_I2C_DEVICE 0 // i2c device number\n  #define VL53L0X_I2C_FREQ_KHZ 100 // i2c frequence\n  #define VL53L0X_SCL 6 // scl\n  #define VL53L0X_SDA 7 // sda\n  #define VL53L0X_SHT 8 // sht\n```\n\n* MaixPy\n\n```python\n  ################### config ###################\n  VL53L0X_I2C_NUM = const(I2C.I2C0)\n  VL53L0X_FREQ = const(100000)\n  VL53L0X_SCL = const(6)\n  VL53L0X_SDA = const(7)\n  VL53L0X_SHT = const(8)\n  ##############################################\n```\n\n\n## Outlook\n\n- SPMOD_TOF Size drawing:\n\n<img src=\"../../assets/spmod/spmod_tof/sipeed_spmod_tof.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_eink.html": {"title": "SPMOD - Eink", "content": "# SPMOD - Eink\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_eink/sp_eink.png\" alt=\"XXX\" style=\"zoom:40%;\" />\n\nSPMOD_Eink(E-paper display module) uses GDEW0154M09 E-paper display.\n\n## SPMOD - Eink Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Connect to the screen through the SP-MOD SPI interface\n- E-paper display module：GDEW0154M09 is a 1.54\" E-paper display，with SPI interface，and has 24P FPC(0.5mm pitch).\n- Support 1 bit Black/Write full display capabilities\n- Display Resolution：200x200\n- Size：35*30*3.8mm\n\n### GDEW0154M09 E-paper display Introduction\n\n| Features： | --- |\n| --- | -- |\n| Supply voltage of external power supply | 2.3V~3.6V |\n| Supply current of external power supply | 1~3mA |\n| Range of working temperature | -40℃~85℃ |\n| Sleep Status of Current | <5uA |\n| Screen Size | 1.54 inch |\n| Active Area | 27.6mm*27.6mm |\n| Display Resolution | 200*200 |\n| Color | 1 bit Black/Write full display capabilities|\n| interface | 24P FPC (0.5mm pitch) |\n> An integrated circuit contains gate buffer, source buffer, interface, timing control logic, oscillator,\nDC-DC, SRAM, LUT, VCOM, and border are supplied with each panel.\n\n\n###  SPMOD_Eink pin description ：\n\n| Pin | Name | Type | Description |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G | Ground |\n| 2 | CS | I | Chip Select input pin |\n| 3 | D/C | I | Data/Command control pin |\n| 4 | RES | I | Reset (active low) |\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I |  SPI clock pin |\n| 7 | SI | I/O | Master Out Slave In |\n| 8 | BSY | O | Busy status output pin |\n\n<img src=\"../../assets/spmod/spmod_eink/sp_eink_back.png\" height=\"300\" />\n\n- Mode of connection:：\n\n|  MCU:FUN(IO)   | SP_Eink |\n| :------------: | :-----: |\n|  GPIOHS(IO_7)  |   RES   |\n| SPIOHS(IO_15)  |   D/C   |\n| SPIOHS(IO_20)  |   CS   |\n| SPI:SCK(IO_21) |   SCK   |\n| SPI:MOSI(IO_8) |   SI    |\n|  GPIOHS(IO_6) |   BSY   |\n|  2.3-3.6V   |  3.3V   |\n|   GND    |   GND   |\n\n<img src=\"../../assets/spmod/spmod_eink/connection.png\" height=\"250\">\n\n### AT instruction list\n\n| Instruction |       description        |\n| :---------: | :----------------------: |\n|    0x10     | start transport b/w data |\n|    0x13     | start transport r/w data |\n|    0x12     |  refresh data to screen  |\n\n\n*See [GDEW0154M09.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_eink) for more information*\n\n## Usage\n\n* Process\n\n  1.initializatin\n  2.create an image and fill it\n  3.send image and refresh\n\n\n### C：\n\n  ```c\n\n  spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  fpioa_set_function(SPI_Eink_CS_PIN_NUM, FUNC_SPI1_SS0);   // SPI_Eink_CS_PIN_NUM: 20;\n  fpioa_set_function(SPI_Eink_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_Eink_SCK_PIN_NUM: 21;\n  fpioa_set_function(SPI_Eink_MOSI_PIN_NUM, FUNC_SPI1_D0);  // SPI_Eink_MOSI_PIN_NUM: 8;\n\n  fpioa_set_function(SPI_Eink_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_DC_GPIO_NUM);   // SPI_Eink_DC_PIN_NUM: 21;\n  fpioa_set_function(SPI_Eink_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_RST_GPIO_NUM); // SPI_Eink_RST_PIN_NUM: 7;\n  fpioa_set_function(SPI_Eink_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_BL_GPIO_NUM);   // SPI_Eink_BL_PIN_NUM: 6;\n\n  gpiohs_set_drive_mode(SPI_Eink_DC_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_Eink_RST_GPIO_NUM, GPIO_DM_OUTPUT);\n\n  gpiohs_set_pin(SPI_Eink_DC_GPIO_NUM, GPIO_PV_HIGH);\n  gpiohs_set_pin(SPI_Eink_RST_GPIO_NUM, GPIO_PV_HIGH);\n\n  gpiohs_set_drive_mode(SPI_Eink_BL_PIN_NUM, GPIO_DM_INPUT_PULL_UP);\n  gpiohs_set_pin_edge(SPI_Eink_BL_PIN_NUM, GPIO_PE_BOTH);\n\n    EPD_DisplayInit(); //EPD init\n\n  //Paint initialization\n  Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE); //Set screen size and display orientation\n  Paint_SelectImage(BlackImage);                                 //Set the virtual canvas data storage location\n\n  Paint_Clear(WHITE); //clear paint\n  Paint_DrawString_EN(0, 0, \"sipeed\", &Font8, WHITE, BLACK);   //5*8\n  Paint_DrawString_EN(0, 10, \"sipeed\", &Font12, WHITE, BLACK); //7*12\n  Paint_DrawString_EN(0, 25, \"sipeed\", &Font16, WHITE, BLACK); //11*16\n  Paint_DrawString_EN(0, 45, \"sipeed\", &Font20, WHITE, BLACK); //14*20\n  Paint_DrawString_EN(0, 80, \"sipeed\", &Font24, WHITE, BLACK); //17*24\n  EPD_FullDisplay(BlackImage, BlackImage, 0);                  //display image\n\n  ```\n\n### MaixPy：\n\n  ```python\n\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n              polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8)\n\n  fm.register(20, fm.fpioa.GPIOHS20, force=True) # SPI_Eink_SS_PIN_NUM: 20;\n  fm.register(15, fm.fpioa.GPIOHS15, force=True) # SPI_Eink_DC_PIN_NUM: 15;\n  fm.register(6, fm.fpioa.GPIOHS6, force=True) # SPI_Eink_BUSY_PIN_NUM: 6;\n  fm.register(7, fm.fpioa.GPIOHS7, force=True) # SPI_Eink_RST_PIN_NUM: 7;\n\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  dc = GPIO(GPIO.GPIOHS15, GPIO.OUT)\n  busy = GPIO(GPIO.GPIOHS6, GPIO.IN, GPIO.PULL_DOWN)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.OUT)\n\n  epd = SPEink(spi1, cs, dc, rst, busy, SPEink_WIDTH, SPEink_HEIGHT, SPEink_ROTATION)\n  epd.init()\n\n  img = image.Image()\n  img = img.resize(200, 200)\n  img.draw_line(0, 0, 100, 100)\n\n  epd.display(img)\n\n  ```\n\n### Runtime environments:\n\n|  Language  |  Board  | SDK/Firmware version |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*The MaixPy firmware is recommended to compile from the latest source*\n\n### Result\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_eink/sp_eink_c.png\" height=\"250\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_eink/sp_eink_py.png\" height=\"250\" />\n\n### Transplant\n\nThe following parameters need to be modified\n\n* C\n\n  ```c\n    // board_config.h\n    #define SPI_INDEX 1\n    #define SPI_SCLK_RATE 600 * 1000\n    #define SPI_CHIP_SELECT_NSS 0 //SPI_CHIP_SELECT_0\n\n    #define SPI_Eink_CS_PIN_NUM 20\n    #define SPI_Eink_SCK_PIN_NUM 21\n    #define SPI_Eink_MOSI_PIN_NUM 8\n\n    #define SPI_Eink_DC_PIN_NUM 15\n    #define SPI_Eink_BL_PIN_NUM 6\n    #define SPI_Eink_RST_PIN_NUM 7\n\n    #define SPI_Eink_DC_GPIO_NUM 15\n    #define SPI_Eink_BL_GPIO_NUM 6\n    #define SPI_Eink_RST_GPIO_NUM 7\n  ```\n\n* MaixPy\n\n  ```python\n  ################### config ###################\n    SPI_Eink_NUM = SPI.SPI1\n    SPI_Eink_DC_PIN_NUM = const(15)\n    SPI_Eink_BUSY_PIN_NUM = const(6)\n    SPI_Eink_RST_PIN_NUM = const(7)\n    SPI_Eink_CS_PIN_NUM = const(20)\n    SPI_Eink_SCK_PIN_NUM = const(21)\n    SPI_Eink_MOSI_PIN_NUM = const(8)\n    SPI_Eink_FREQ_KHZ = const(600)\n  ##############################################\n\n\n## Outlook\n\n- SPMOD_Eink Size drawing:\n\n<img src=\"../../assets/spmod/spmod_eink/sipeed_spmod_eink.png\" height=\"250\" />\n\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed)  |"}, "/hardware/en/maix/modules_spmod/spmod_weather.html": {"title": "SPMOD - Weather", "content": "# SPMOD - Weather\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_weather/demo.gif\" align=\"right\" width=\"500\" />\n\nSPMOD - Weather (Weather station module), Integrated Magnetic sensor (QMC7983) and Humidity sensor (BME280)\n\n\n## SPMOD - Weather Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN ),unified MaixPy board interface\n- Connect to the board through the SP-MOD I2C interface\n- Magnetic sensor: QMC7983 is a 3-axis single chip magnetic sensor integrated with AMR and ASIC,\nI2C interface with standard mode and rapid mode,Stable sensitivity in a large operating temperature range,\nlow power consumption (75uA).\n- Sensitivity: ±30 Gauss\n- Humidity sensor: BME280 is a humidity sensor that can measure relative humidity, barometric pressure and ambient temperature\n- Size:25.0\\*10\\*2.9mm\n\n\n## Sensor Introduction:\n\n| Magnetic sensor | QMC7983 |\n| --- | --- |\n| Supply voltage of external power supply | 2.6V~3.6V |\n| Supply current of external power supply | 70uA |\n| Sleep Status of Current | <1uA |\n| Sensitivity | ±30 Gauss |\n| humidity sensor | LSB/mG|\n| RMS Noise | 2 mG |\n| Interface | I2C,default address 0x2C (Select resistance adjustment) |\n\n-----\n\n| Humidity sensor | BME280 |\n| --- | --- |\n| Supply voltage of external power supply | 1.71V~3.6V |\n| Supply current of external power supply | <633uA |\n| Sleep Status of Current | <5uA |\n| Humidity sensor： | --- |\n| Response time（𝜏63％）| 1s |\n| Accuracy tolerance | ±3％  relative humidity |\n| Hysteresis | < 2％  relative humidity |\n| Pressure sensor： | --- |\n| RMS Noise | 0.2 Pa(equiv. to 1.7cm) |\n| Temperature coefficient offset | ±1.5 Pa/K(equiv. to ±12.6cm at 1 °C temperature change) |\n| Interface | I2C,default address 0x76 Select resistance adjustment) |\n\n###  SPMOD_Weather pin description :\n\n| Pin | Name | Type | Description |\n| -------- | -------- | ---- | --- |\n| 1  | GND | G | Ground |\n| 2  | NC | NC | Not connected |\n| 3  | NC | NC | Not connected |\n| 4  | SDA | I/O | Receive data signal |\n| 5  | 3V3 | V | Power supply(3.3V) |\n| 6  | NC | NC | Not connected |\n| 7  | NC | NC | Not connected |\n| 8  | SCL | I | Transmit clock signal |\n\n<img src=\"../../assets/spmod/spmod_weather/back.png\" width=\"300\" />\n\n## Mode of connection:\n\n|  MCU:FUN(IO)  | SP_RFID |\n| :-----------: | :-----: |\n| I2C:SDA(IO_7) |   SDA   |\n|   NC(IO_15)   |   NC    |\n|   NC(IO_20)   |   IRQ   |\n|   NC(IO_21)   |   NC    |\n| GPIOHS(IO_8)  |   SHT   |\n| I2C:SCL(IO_6) |   SCL   |\n|   2.8~3.5V    |  3.3V   |\n|      GND      |   GND   |\n\n<img src=\"../../assets/spmod/spmod_weather/connection.png\" height=\"250\">\n\n## Usage\n\n* Process\n  1. Send AT instruction\n  2. Receive the reply\n  3. Determines whether the setup was successful\n\n### C:\n\n  ```c\n\n    fpioa_set_function(Weather_SCL, FUNC_I2C0_SCLK + Weather_I2C_DEVICE * 2); // Weather_SCL: 6;\n    fpioa_set_function(Weather_SDA, FUNC_I2C0_SDA + Weather_I2C_DEVICE * 2); // Weather_SDA: 7;\n\n    maix_i2c_init(Weather_I2C_DEVICE, 7, 400000); // Weather_I2C_DEVICE: 0;\n\n    rslt = qmc_init(); // Magnetic sensor QMC7983 init\n    rslt = bme280_init(&dev); // Temperature, humidity and pressure sensors BME280 init\n    stream_sensor_data_normal_mode(&dev); // read and print sensor data\n\n  ```\n\n### MaixPy:\n\n  ```python\n\n    i2c_bus = I2C(I2C.I2C0, freq=100*1000, scl=6, sda=7) # scl: io_6, sda: io_7\n\n    weather=SPWeather(i2c=i2c_bus) # create sp_weather\n    while 1:\n        time.sleep_ms(500)\n        print(weather.qmc_read_xyz) # QMC7983 read data\n        print(weather.bme_values) # BME280 read data\n\n  ```\n\n## Runtime environments:\n\n|  Language  |  Board  | SDK/Firmware version |\n| :----: | :------: | :----------------------------- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1                  |\n\n## Result\n\n* C\n\n    <img src=\"../../assets/spmod/spmod_weather/log_c.png\" height=\"200\">\n\n* MaixPy\n\n    <img src=\"../../assets/spmod/spmod_weather/log_py.png\" height=\"200\">\n\n## Outlook\n\n- SPMOD_Weather Size drawing:\n\n<img src=\"../../assets/spmod/spmod_weather/sipeed_spmod_weather.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_grove.html": {"title": "SPMOD - Grove", "content": "# SPMOD - Grove\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_grove/sp_grove.png\" align=\"right\" width=\"\" height=\"400\" />\n\n\nSPMOD_Grove(GROVE module)\n\n## SPMOD - Grove Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Ass an Expansion board，it povides three standard Grove interfaces.\n- All data cables are provide external pull-ups.\n- The power supply can handle up to 1000mA\n- Size:35.0\\*10.0\\*2.1mm\n\n## Introduction\n\n| Features: | --- |\n| --- | -- |\n| Grove connector (HY 2.0mm 4P connector)*3 | Used to connect Grove  |\n| 4*2 pin，2.54mm pitch: *1 | Used to connect with SP-MOD interface |\n| Supply voltage of external power supply | Depends on connected modules |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 1000mA |\n| Range of working temperature | -30℃ ~ 85℃\n\n## Outlook\n\n- SPMOD_Grove Size drawing:\n\n<img src=\"../../assets/spmod/spmod_grove/sipeed_spmod_grove.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_servo.html": {"title": "SPMOD - SERVO", "content": "# SPMOD - SERVO\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_servo/sp_servo.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_SERVO (SERVO module).\n\n## SPMOD - SERVO Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using SP-MOD to control up to 6 independent 9g servos\n- Servo interface uses 3P 2.54 pitch pin header\n- Independent external 5V power supply, will not take power from SP-MOD\n- Built-in LED，making module status easier to see.\n- Size:35.0\\*20\\*1.6mm\n\n| Features: | --- |\n| --- | -- |\n| PWM 9g servo interface *6 | In the case of an external 4.8-6V power supply, 6 servos can be connected and controlled separately |\n| Supply voltage of external power supply | 4.8V-6.0V |\n| Supply current of external power supply | Depends on the working conditions of the module, usually less than 1500mA |\n| Range of working temperature | -40℃ ~ 85℃ |\n\n\n###  SPMOD_SERVO pin description:\n\n\n<img src=\"../../assets/spmod/spmod_servo/sp_servo_pin.png\" width=\"500\" />\n\n\n## Usage\n\n- 待更新\n\n## Outlook\n\n- SPMOD_SERVO Size drawing:\n\n<img src=\"../../assets/spmod/spmod_servo/sipeed_spmod_servo.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_lcd1.14.html": {"title": "SPMOD - LCD 1.14", "content": "# SPMOD - LCD 1.14\n\n\n## Outline\n\n<img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_LCD1.14(1.14 inch LCD) uses ST7735S TFT LCD.\n\n## SPMOD - LCD1.14 Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Using commom LCD driver IC ST7735S(4-wire SPI communicate)\n- Display Resolution:240\\*135\n- Size:35.0\\*20.0mm\n\n### ST7735S TFT LCD Introduction\n\n| Features： | --- |\n| --- | -- |\n| Supply voltage of external power supply | 2.5V~4.8V |\n| Supply current of external power supply | <20mA |\n| Range of working temperature | -30℃ ~ 85℃ |\n| Sleep Status of Current | <0.1mA |\n| Screen Size | 1.14 inch |\n| Active Area | 1.7mm * 10.8mm |\n| Display Resolution | 160*80 |\n| Color | 132 RGB channels |\n| Interface | 8P FPC (0.5mm pitch) |\n> DC/DC Converter,\nAdjustable VCOM Generation,\nNon-volatile (NV) Memory to Store Initial Register Setting,\nOscillator for Display Clock Generation,\nFactory default value (module ID, module version, etc) are stored in NV memory,\nTiming Controller,\n\n\n###  SPMOD_LCD1.14 pin description :\n\n| Pin | Name | Type | Description |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G  | Ground |\n| 2 | CS | I  | Chip Select input pin |\n| 3 | D/C | I  | Data/Command control pin |\n| 4 | RST | I  | Reset (active low) |\n| 5 | 3V3 | V  | Power supply(3.3V) |\n| 6 | SCK | I  | SPI clock pin |\n| 7 | SI | I/O  | Master Out Slave In |\n| 8 | BL | I  | BackLight control pin (active high) |\n\n<img src=\"../../assets/spmod/spmod_lcd1.14/back.png\" width=\"300\" />\n\n- Mode of connection:\n\n|   MCU:FUN(IO)   | SP_LCD |\n| :-------------: | :----: |\n|  GPIOHS7(IO_7)  |  RST   |\n| GPIOHS15(IO_15) |  D/C   |\n| SPI:SS0(IO_20)  |   CS   |\n| SPI:SCK(IO_21)  |  SCK   |\n| SPI:MOSI(IO_8)  |   SI   |\n|  GPIOHS6(IO_6)  |   BL   |\n|  2.5~4.8V   |  3.3V  |\n|  GND   |  GND   |\n\n<img src=\"../../assets/spmod/spmod_lcd1.14//connection.png\" height=\"250\">\n\n## Usage\n\n* Process\n  1. Send AT instruction\n  2. Receive the reply\n  3. Determines whether the setup was successful\n\n### C :\n\n  ```c\n\n  fpioa_set_function(SPI_IPS_LCD_CS_PIN_NUM, FUNC_SPI1_SS0);   // SPI_IPS_LCD_CS_PIN_NUM: 20;\n  fpioa_set_function(SPI_IPS_LCD_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_IPS_LCD_SCK_PIN_NUM: 21;\n  fpioa_set_function(SPI_IPS_LCD_MOSI_PIN_NUM, FUNC_SPI1_D0);  // SPI_IPS_LCD_MOSI_PIN_NUM: 8;\n  fpioa_set_function(SPI_IPS_LCD_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_DC_GPIO_NUM);   // SPI_IPS_LCD_DC_PIN_NUM: 15; SPI_IPS_LCD_DC_GPIO_NUM: 15;\n  fpioa_set_function(SPI_IPS_LCD_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_RST_GPIO_NUM); // SPI_IPS_LCD_RST_PIN_NUM: 7; SPI_IPS_LCD_RST_GPIO_NUM: 7;\n  fpioa_set_function(SPI_IPS_LCD_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_BL_GPIO_NUM);   // SPI_IPS_LCD_BL_PIN_NUM: 6; SPI_IPS_LCD_BL_GPIO_NUM: 6;\n\n  // set gpiohs work mode to output mode\n  gpiohs_set_drive_mode(SPI_IPS_LCD_DC_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_IPS_LCD_RST_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_IPS_LCD_BL_GPIO_NUM, GPIO_DM_OUTPUT);\n\n  spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  ips_lcd_init(); // init\n  LCD_ShowPicture(0, 0, LCD_W, LCD_H, gImage_nanke); // display\n\n  ```\n\n### MaixPy :\n\n  ```python\n\n  # 20: SPI_LCD_CS_PIN_NUM;\n  fm.register(SPI_LCD_CS_PIN_NUM, fm.fpioa.GPIOHS20, force=True)\n  # 15: SPI_LCD_DC_PIN_NUM;\n  fm.register(SPI_LCD_DC_PIN_NUM, fm.fpioa.GPIOHS15, force=True)\n  # 6: SPI_LCD_BUSY_PIN_NUM;\n  fm.register(SPI_LCD_BUSY_PIN_NUM, fm.fpioa.GPIOHS6, force=True)\n  # 7: SPI_LCD_RST_PIN_NUM;\n  fm.register(SPI_LCD_RST_PIN_NUM, fm.fpioa.GPIOHS7, force=True)\n\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  dc = GPIO(GPIO.GPIOHS15, GPIO.OUT)\n  busy = GPIO(GPIO.GPIOHS6, GPIO.OUT)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.OUT)\n\n  # 21: SPI_LCD_SCK_PIN_NUM; 8: SPI_LCD_MOSI_PIN_NUM;\n  spi1 = SPI(SPI_LCD_NUM, mode=SPI.MODE_MASTER, baudrate=SPI_LCD_FREQ_KHZ * 1000,\n              polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=SPI_LCD_SCK_PIN_NUM, mosi=SPI_LCD_MOSI_PIN_NUM)\n\n  ips = SPLCD114(spi1, cs, dc, rst, busy, IPS_WIDTH, IPS_HEIGHT, IPS_MODE)\n\n  # create an 'image' and fill it\n  img = image.Image()\n  img.draw_rectangle(80, 80, 30, 30)\n\n  # display\n  ips.display(img)\n\n\n  ```\n\n## Runtime environments\n\n| Language |  Board   |      SDK/Firmware version      |\n| :------: | :------: | :----------------------------  |\n|    C     | MaixCube | kendryte-standalone-sdk v0.5.6 |\n|  MaixPy  | MaixCube |         maixpy v0.5.1          |\n\n*The MaixPy firmware is recommended to compile from the latest source*\n\n### Result\n\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_c.png\" height=\"250\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_py.png\" alt=\"sp_lcd1.14_py\" height=\"250\" />\n\n### Transplant\n\nThe following parameters need to be modified.\n\n* C\n\n```c\n  // board_config.h\n  #define SPI_INDEX           1\n  #define SPI_SCLK_RATE       600*1000\n  #define SPI_CHIP_SELECT_NSS 0 // SPI_CHIP_SELECT_0\n\n  #define SPI_IPS_LCD_CS_PIN_NUM      20\n  #define SPI_IPS_LCD_SCK_PIN_NUM     21\n  #define SPI_IPS_LCD_MOSI_PIN_NUM    8\n\n  #define SPI_IPS_LCD_DC_PIN_NUM     15\n  #define SPI_IPS_LCD_BL_PIN_NUM      6\n  #define SPI_IPS_LCD_RST_PIN_NUM     7\n\n  #define SPI_IPS_LCD_DC_GPIO_NUM     15\n  #define SPI_IPS_LCD_BL_GPIO_NUM     6\n  #define SPI_IPS_LCD_RST_GPIO_NUM    7\n\n  #define USE_HORIZONTAL 3    // 0/1 is horizontal, and 2/3 is vertical.\n```\n\n* Maixpy\n\n```python\n  ################### config ###################\n  SPI_LCD_NUM = SPI.SPI1\n  SPI_LCD_DC_PIN_NUM = const(15)\n  SPI_LCD_BUSY_PIN_NUM = const(6)\n  SPI_LCD_RST_PIN_NUM = const(7)\n  SPI_LCD_CS_PIN_NUM = const(20)\n  SPI_LCD_SCK_PIN_NUM = const(21)\n  SPI_LCD_MOSI_PIN_NUM = const(8)\n  SPI_LCD_FREQ_KHZ = const(600)\n  ##############################################\n```\n\n\n## Outlook\n\n- SPMOD_LCD1.14 Size drawing:\n\n<img src=\"../../assets/spmod/spmod_lcd1.14/sipeed_spmod_lcd1.14.png\" height=\"250\" />\n\n\n-----\n\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed) |"}, "/hardware/en/maix/modules_spmod/spmod_ethernet.html": {"title": "SPMOD - Ethernet", "content": "# SPMOD - Ethernet\n\n\n## Overview\n\n<img src=\"../../assets/spmod/spmod_ethernet/sp_ethernet.png\" align=\"right\" width=\"\" height=\"500\" />\n\nSPMOD_Ethernet(Ethernet module) uses W5500 chip.\n\n## SPMOD - Ethernet Introduction\n\n- Using **Sipeed-SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface\n- Connect to the board through the SP-MOD SPI interface\n- Master chip:The W5500 chip is a Hardwired TCP/IP embedded Ethernet controller\n- The theoretical SPI design speed is 80MHz\n-\t10BaseT/100BaseTX Ethernet PHY embedded, Supports Auto Negotiation (Full and half duplex, 10 and 100-based )\n- Size:35.76\\*19.74\\*8.7mm\n\n###  W5500 chip Introduction\n\n| Features: | --- |\n| --- | -- |\n| Supply voltage of external power supply | 2.97V~3.63V |\n| Supply current of external power supply | <132mA |\n| Range of working temperature | -40℃~85℃ |\n| Sleep Status of Current | <15mA |\n| SPI Clock | The theoretical design speed is 80MHz |\n| TCP/IP protocol | Support TCP,UDP,ICMP,IPv4,ARP,IGMP,PPPoE protocols |\n\n> - Supports 8 independent sockets simultaneously\n,Internal 32Kbytes Memory for TX/RX Buffers\n,Supports Wake on LAN over UDP\n,10BaseT/100BaseTX Ethernet PHY embedded\n,Support Auto Negotiation (Full and half duplex, 10 and 100-based )\n,Not support auto-MDIX feature\n\n\n###  SPMOD_Ethernet pin description:\n\n| Pin  | Name | Type  | Description  |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G |  Ground |\n| 2 | CS | I | Chip Select input pin |\n| 3 | SO | I/0 | Master In Slave Out  |\n| 4 | NC | NC | Not connected |\n| 5 | 3V3 | V | Power supply(3.3V) |\n| 6 | SCK | I | SPI clock pin |\n| 7 | SI | I/0 | Master Out Slave In |\n| 8 | NC | NC | Not connected |\n\n\n<img src=\"\" width=\"300\" />\n\n\n## Usage\n\n- 待更新\n\n## Outlook\n\n- SPMOD_Ethernet Size drawing:\n\n<img src=\"../../assets/spmod/spmod_ethernet/sipeed_spmod_ethernet.png\" height=\"250\" />\n\n-----\n\n## Resource Link\n\n| Resource | --- |\n| --- | --- |\n| Website | www.sipeed.com |\n| Github | [https://github.com/sipeed](https://github.com/sipeed) |\n| BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n| Wiki | [http://maixpy.sipeed.com](http://maixpy.sipeed.com) |\n| Sipeed model shop | [https://maixhub.com/](https://maixhub.com/) |\n| SDK Relevant information | [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) |\n| HDK Relevant information | [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) |\n| E-mail(Technical Support and Business Cooperation) | [Support@sipeed.com](mailto:support@sipeed.com) |\n| telgram link | [https://t.me/sipeed](https://t.me/sipeed)  |"}, "/hardware/en/maix/index.html": {"title": "Sipeed Maix series hardware", "content": "---\ntitle: Sipeed Maix series hardware\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载, Maix系列\ndesc: 矽速科技(Sipeed) Maix 系列开源硬件产品\n---\n\n\nCurrently Only have Chinese version, see [maix series hardware Chinese doc](/hardware/zh/maix/index.html), you can install google tranlate plugin to tranlate pages"}, "/hardware/en/maix/maixpy_develop_kit_board/maix_cube.html": {"title": "MaixCube", "content": "# MaixCube\n\n## Overview\n\n  SIPEED MaixCube is a face recognition product developed based on our M1n module (main control: Kendryte K210) that integrates learning, development and commercial use.\n  <br/>MaixCube integrates camera, TF card slot, user buttons, TFT display, lithium battery, speaker microphone, expansion interface, etc. Users can use Maix Cube to easily build a face recognition access control system, and also reserve development and debugging Interface, it can also be used as a powerful AI learning development board.\n\n## MaixCube appearance and function introduction\n\n### Appearance list\n\n![maixcube_product_appearance](maix_cube.assets/maixcube_product_appearance.png)\n\n-1.3 inch **IPS** screen: resolution** 240*240**\n-Reset button\n-Power button: short press to turn on, long press *8S* to turn off\n-Grove interface: **Grove** digital interface, sensor, controller expansion possibilities~\n-SP-MOD interface: equipped with a more powerful and scalable **SP-MOD** digital interface, I2C, SPI (standard, two-wire, four-wire mode) and other interfaces can be used\n-TF card slot: multimedia resource expansion, support large capacity storage\n-Camera: equipped with **0V7740** **30W** pixels **Sensor**\n-Type-C interface:\n-Three-way button:\n\n### Introduction to onboard functions\n\n![maixcube_resources](maix_cube.assets/maixcube_resources.png)\n\n\n-Power management control unit: AXP173\n  -Onboard 200mAh lithium battery, support user charge and discharge control\n-Audio driver IC: ES8374\n  -Support audio recording and playback\n-Three-axis acceleration sensor: MSA301\n-Camera OV7740:\n-1.3 IPS LCD:\n-RGB: Two RGB LEDs on board\n-USB Type-C: Type-C interface, positive and negative blind plug\n\n\n### Onboard expansion interface\n\nMaix Cube opens two highly expanded interfaces to users: SP-MOD and Grove interfaces,\nUsers can easily DIY\n\n#### SP-MOD interface\n\nSP-MOD is sipeed module, simplify PMOD, super module\n\n| Interface | Interface description |\n|---|---|\n|SP-MODE interface description|![spmod_interface_1](maix_cube.assets/spmod_interface_1-1595819569921.png)|\n|Hardware Interface|![spmod_interface_2](maix_cube.assets/spmod_interface_2.png)|\n\n#### Grove interface\n\n-Grove module interface\n\nThe Grove interface cable has 4 colors, users can quickly distinguish according to the color\n![grove_interface](maix_cube.assets/grove_interface.jpg)\n\n| --- | Color | Description |\n| --- | --- | --- |\n| pin 1 | Yellow | (e.g. SCL on I2C Grove Connectors) |\n| pin 2 | White | (For example, SDA on I2C Grove Connectors) |\n| pin 3 | Red | VCC (All Grove ports are VCC in red) |\n| pin 4 | black | GND (all Grove ports are GND in red) |\n\nGrove module mainly has 4 kinds of interfaces:\n\n1. Grove Digital digital interface:<br/>\n    The Grove digital interface consists of four standard wires of Grove plugs.<br/>\n    The two signal lines are usually called D0 and D1.<br/>\n    Most modules only use D0, but some (like LED Bar Grove displays) use both. Usually the core board will call the first Grove connector on the board as D0, and the second as D1. The connector will be connected to the DO/D1 pin of the main control chip, the second connector will be connected to the D1/D2 pin of the main control chip, and the following connectors will be deduced by analogy.\n\n|pin |Function | Note |\n| ---|---|---|\n|pin1 | Dn First digital input |\n|pin2 | Dn+1 Second digital input |\n|pin3 | VCC power supply pin 5V/3.3V |\n|pin4 | GND ground |\n\n\n1. Grove UART :<br/>\n    The Grove UART is a special digital input and output interface.<br/>\n    It uses pins 1 and 2 for serial input and transmission. <br/>\n    Pin 1 is the RX line (used to receive data, so it is input),\n    Among them, pin 2 is the TX line (used to transmit data to the Grove module).\n\n|pin |Function|Note|\n| ---|---|---|\n|pin1 |RX|Serial Receive|\n|pin2 |TX|Serial transmission|\n|pin3 |VCC|Power supply pin 5V/3.3V|\n|pin4 |GND |Ground|\n\n1. Grove I2C:<br/>\n    There are many types of I2C Grove sensors available.<br/>The Grove on MaixCube only supports 3.3V sensors\n\n  The Grove I2C connector has a standard layout. Pin 1 is the SCL signal, and pin 2 is the SDA signal\n\n|pin | Function | Note |\n| ---|---|---|\n|pin1 | SCL |I2C clock |\n|pin2 | SDA |I2C data |\n|pin3 | VCC |Power supply pin, 5V/3.3V |\n|pin4 | GND |Ground |\n\n### Onboard I2C device\n\nMaixCube onboard I2C sensor/IC\n\n| IC | Device id | I2C address (7-bit address) | Configuration: SCL: IO_30, SDA: IO_31|\n| --- | --- | --- | --- |\n|---|I2C Address| <<1|MaixPy read address|\n|ES8374|0x08|0x10|D(16)|\n|MSA301|0x13|0x26|D(38)|\n|AXP173|0x68|0x34|D(52)|"}, "/hardware/en/maix/maixpy_develop_kit_board/maix_Amigo.html": {"title": "1MaixAmigo", "content": "# 1MaixAmigo\n\n## Overview\n\nSIPEED MaixAmigo is a face recognition product developed based on our M1n module (main CPU: Kendryte K210) that integrates learning, development and commercial use. \nMaixAmigo integrates front and rear cameras, TF card slots, user buttons, TFT displays, a lithium battery, speakers, microphone, expansion interface, etc., Users can use MaixAmigo to easily build a face recognition access control system. It also serves as a development and debugging interface, which can also be used as a powerful AI learning development board.\n## MaixAmigo Introduction\n\n### Hardware at a Glance\n\n![MaixAmigo](maix_Amigo.assets/image-20200730120223557.png)\n\n### Onboard Hardware\n\n- 3.5 inch **TFT** screen: resolution **320x480***\n- 3.5 inch resistive touch screen：[FT6X36](https://focuslcds.com/content/FT6236.pdf)\n- Chip reset button\n- Power button: Short press to turn on, long press for 8S to turn off\n- Three function buttons\n- Grove interface: Onboard 3 Grove digital interfaces, sensors and controllers have unlimited possibilities for expansion\n- SP-MOD interface: Onboard 3 more powerful and more scalable SP-MOD digital interfaces, I2C, SPI (standard, two-wire, four-wire mode) and other interfaces can be used\n\n- Support gamepad\n- TF card slot: multimedia resource expansion, supports large-capacity storage\n- Camera: Equipped with **OV7740 30W** pixel and **GC0328 30W pixel Sensor**\n- Type-C interface: USB-TypeC power supply, debugging interface, blind plug\n- Power management control unit: AXP173\n  - Onboard 600mAh lithium battery, support user charge and discharge control\n- Audio driver IC: ES8374\n  - Support audio recording and playback\n- Three-axis acceleration sensor: MSA301\n\n### Onboard expansion interface\n\nMaixAmigo offers two highly expandable interfaces to users: SP-MOD and Grove interfaces, allowing users ease DIY projects.\n\n#### SP-MOD interface\n\nSP-MOD is sipeed module, simplify PMOD, super module\n\n| interface | interface description |\n|---|---|\n|SP-MODE interface description|![spmod_interface_1](maix_cube.assets/spmod_interface_1-1595819569921.png)|\n|Hardware interface![spmod_interface_2](maix_cube.assets/spmod_interface_2.png)|\n\n#### Grove interface\n\n- Grove module interface\n\nThe Grove interface cable has 4 colors, letting users quickly distinguish lines according to their color\n\n![grove_interface](maix_cube.assets/grove_interface.jpg)\n\n| --- | Color | Description |\n| --- | --- | --- |\n| pin 1 | yellow | (For example, SCL on I2C Grove Connectors) |\n| pin 2 | white | (For example, SDA on I2C Grove Connectors) |\n| pin 3 | red |   VCC (All Grove interfaces have VCC in red) |\n| pin 4 | black |   GND (All Grove interfaces have GND in black |\n\nThe Grove module mainly has 4 kinds of interfaces:\n\n1. Grove Digital digital interface: <br/> \nThe Grove digital interface consists of four standard wires of Grove plugs. The \ntwo signal wires are usually called D0 and D1. \nMost modules only use D0, but some (like the LED Bar Grove displays) use both. Usually The core board will call the first Grove connector on the board as D0, and the second as D1. The first connector will be connected to the DO/D1 pin of the main control chip, and the second connector will be connected to The D1/D2 pins of the main control chip, the connectors at the back and so on.\n\n|pin  |Function | Note |\n| ---|---|---|\n|pin1 | Dn first digital input |\n|pin2 | Dn+1 second digital input |\n|pin3 | VCC power supply 5V/3.3V |\n|pin4 | GND ground |\n\n\n1. Grove UART:<br/>\n    The Grove UART is a special digital input and output interface. \nIt uses pins 1 and 2 for serial input and transmission. \nPin 1 is the RX line (used to receive data, so it is input), where Pin 2 is the TX line (used to transmit data to the Grove module).\n\n|pin  |Function|Note|\n| ---|---|---|\n|pin1 |RX|Serial receive|\n|pin2 |TX|Serial transmit|\n|pin3 |VCC|Power supply 5V/3.3V|\n|pin4 |GND|ground|\n\n1. Grove I2C:<br/>\n    There are many types of I2C Grove sensors available.<br/>\n    Grove on MaixAmigo only supports 3.3V sensors\n\n    The Grove I2C connector has a standard layout. Pin 1 is the SCL signal, and pin 2 is the SDA signal\n\n\n|pin  | Function | Note |\n| ---|---|---|\n|pin1 | SCL |I2C clock |\n|pin2 | SDA |I2C data |\n|pin3 | VCC |Power supply, 5V/3.3V |\n|pin4 | GND |Ground |\n\n### Onboard I2C device\n\nMaixAmigo onboard I2C sensor/IC\n\n| IC | Device id | I2C address(7bits) |Configuration：SCL: IO_24, SDA: IO_27|\n| --- | --- | --- | --- |\n|---|I2C Address| <<1|MaixPy read address|\n|ES8374 [audio](http://www.everest-semi.com/pdf/ES8374%20PB.pdf)|0x08|0x10|D(16)|\n|MSA301 [accelerometer](https://learn.adafruit.com/msa301-triple-axis-accelerometer)|0x13|0x26|D(38)|\n|AXP173 [power](http://www.datasheet-pdf.com/PDF/AXP173-Datasheet-X-Powers-966875)|0x68|0x34|D(52)|"}, "/hardware/en/maix/maixpy_develop_kit_board/maix_duino.html": {"title": "MaixDuino Development Board", "content": "# MaixDuino Development Board\n\n## Overview\n\n  SIPEED MaixDuino is an Arduino-compatible development board developed based on our M1 module (main control: Kendryte K210)\n  <br/>MaixDuino integrates camera, TF card slot, user buttons, TFT display, MaixDuino expansion interface, etc., users can use MaixDuino to easily build a face recognition access control system, and also reserve development and debugging interfaces, which can also be used As a powerful AI learning development board.\n\n## MaixDuino appearance and function introduction\n\n### Appearance list\n\n![MaixDuino](../../assets/dk_board/maix_duino/maixduino_0.png)\n![MaixDuino](../../assets/dk_board/maix_duino/maixduino_1.png)\n![MaixDuino](../../assets/dk_board/maix_duino/maixduino_2.png)\n\n### Introduction to onboard functions\n\n-Power input DC05: 6~12V DC\n-Power input + program download debugging interface: USB Type-C interface\n-DVP 24PIN: Standard Camera DVP 24PIN interface\n-TF expansion slot:\n-ESP32: ESP32 SPI connection (ESP32 supports WIFI and Bluetooth)\n-I2C DAC\n-PA PAM8403A\n\nMaixDuino pin diagram\n\n### Information related links\n\n-[MaixDuino schematic](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maixduino)"}, "/hardware/en/maix/maixpy_develop_kit_board/develop_kit_board.html": {"title": "MaixPy Development Board", "content": "# MaixPy Development Board\n\n\n## MaixPy Development Board\n\nAt present, MaixPy series development boards have the following models:\n\n- Maix Go\n\n- Maix Dock\n\n- Maix Duino\n\n- Maix Bit\n\n- Maix Cube\n\n- Maix Amigo\n\n\n\n## Difference comparison\n\n| Model | USB IC | Core Module | WIFI Function |Remarks |---| --- |\n|---| --- | --- | --- | --- | --- | -- |\n| Maix Go <img src=\"../../assets/dk_board/maix_go/Go.jpg\" width=\"260\"> | STM32 | M1W | M1W module integrates ESP8285 | New version of go onboard mic |||\n| Maix Dock <img src=\"../../assets/dk_board/maix_dock/Dan_Dock.png\" width=\"260\"> | CH340 | M1/M1W | Dock M1 (No support WIFI)<br/>Dock M1W(Support, M1W module integrates ESP8285) | --- | --- ||\n| Maix Duino <img src=\"../../assets/dk_board/maix_duino/maixduino_0.png\" width=\"260\"> | CH552 | M1 |Onboard ESP32 (support WIFI, Bluetooth function is not supported temporarily)| --- | --- ||\n| Maix Bit <img src=\"../../assets/dk_board/maix_bit/BiT.png\" width=\"260\"> | CH552/CH340 | --- | None | --- | --- ||\n| Maix Cube <img src=\"../../assets/dk_board/maix_cube/maixcube_2020-06-13_06-31-29.png\" width=\"260\"> | GD32/CH552 | M1n | None | --- | --- ||\n|Maix Amigo <img src=\"\" width=\"260\"> | GD32 | M1n | --- | --- | --- ||"}, "/hardware/en/no_translate.html": {"title": "no translation", "content": "---\ntitle: no translation\nclass: md_page\n---\n\n\n<div id=\"visit_from\"></div>\n<div id=\"no_translate_hint\">This page not translated yet</div>\n<div>\n    <span id=\"visit_hint\">Please visit</span>\n    <a id=\"translate_src\"></a>\n</div>\n\n<div>\n    <script>\n        function getQueryVariable(variable)\n        {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    if(pair[0] == variable){return pair[1];}\n            }\n            return(false);\n        }\n        var ref = getQueryVariable(\"ref\");\n        var from = getQueryVariable(\"from\");\n        var link = document.getElementById(\"translate_src\");\n        var fromDis = document.getElementById(\"visit_from\");\n        link.href = ref;\n        link.text = ref;\n        fromDis.innerHTML = from;\n    </script>\n</div>"}}