{"/soft/Tang/zh/get_started/td.html": {"title": "TD简要使用说明", "content": "---\ntitle: TD简要使用说明\n---\n\n待补充。。。"}, "/soft/Tang/zh/get_started/fpga_download.html": {"title": "FPGA码流烧录", "content": "# FPGA码流烧录\n\n----\n\n<font size = 5>**Attention!! 下载码流需要先保证驱动安装成功**</font>\n\n1. 打开TD软件，选择 download\n![](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/migrate/E203_TD_download.png)\n\n2. 添加 bitstream文件，选择 [LicheeTangNewIoMap_BitStream.bit](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/LicheeTangNewIoMap_BitStream.bit) 或其他码流文件\n![](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/migrate/E203_TD_add.png)\n\n3. 如果 Mode 为 JTAG，断电后则恢复默认，所以为了上电自动启动，需要选择 PROGRAM FLASH 。（时间较长）\n\n4. E203源码已开放，如果需要进行IO修改，或者功能修改，请使用源码自行进行修改。可以到 [Github](https://github.com/Lichee-Pi/Tang_E203_Mini.git) 下载。\n\n5. FPGA例程已上传，请到 [Tang_FPGA_Examples](https://github.com/Lichee-Pi/Tang_FPGA_Examples.git) 下载。"}, "/soft/Tang/zh/get_started/install_TD_win.html": {"title": "Windows的开发环境配置", "content": "# Windows的开发环境配置\n\n## 安装TD\n\n想要进行FPGA开发需要安装TD，可以通过[下载站](https://dl.sipeed.com/shareURL/TANG/Premier/IDE)，下载TD安装包和license，如果下载速度过慢的时候，建议使用[百度网盘](https://eyun.baidu.com/s/3i6FbQzr)进行下载\n\n![TD_1](./../../assets/get_started/TD_1.png)\n![TD_2](./../../assets/get_started/TD_2.png)\n\n双击打开第一个文件进行安装，建议使用默认的安装路径，安装结束之后，将 Anlogic_20220130.lic 修改成Anlogic.lic放到C:\\Anlogic\\TD5.0.27252\\license中\n\n然后打开TD就可以了\n\n## 安装usb串口\n\n将 Tang Primer 插入您的计算机并打开设备管理器以查看信息。 根据 Windows 版本，它可能被命名为 WinUsb Device 或 USB-JTAG-Cable。 确保 USB VID:PID 为 0547:1002\nwin7系统没有安装驱动时\n![no_driver](./../../assets/get_started/no_driver.png)\n\nwin10系统没有安装驱动时\n![no_driver_win10](./../../assets/get_started/no_driver_win10.png)\n\n### win7安装驱动\n\n双击 WinUsb Device 选择更新驱动程序 \n![update_drive1](./../../assets/get_started/update_driver1.png)\n![update_drive2](./../../assets/get_started/update_driver2.png)\n\n浏览文件夹，选择TD安装目录下的驱动目录。 单击确定开始安装\n![choosefolder](./../../assets/get_started/choosefolder.png)\n\n安装成功，在设备管理器中可以看到 \n![installsuccess](./../../assets/get_started/installsuccess.png)\n\n### win10安装驱动\n\n> 在安装驱动程序本身之前，请确保首先禁用驱动程序签名强制，否则 Windows 10 将不允许您安装来自 Anlogic 的未签名驱动程序\n\n双击 WinUsb Device 选择更新驱动程序 \n![update_drive1](./../../assets/get_started/update_driver1_win10.png)\n![update_drive2](./../../assets/get_started/update_driver2_win10.png)\n\n浏览文件夹，选择TD安装目录下的driver\\win8_10_64目录。 单击确定。 然后单击让我从计算机上的可用驱动程序列表中选择\n![choosefolder](./../../assets/get_started/choosefolder_win10.png)\n\n单击Have Disk...，然后选择您在上一步中选择的目录，然后单击OK  \n![install_from_disk_win10](./../../assets/get_started/install_from_disk_win10.png)\n\n安装成功，在设备管理器中可以看到\n![installsuccess](./../../assets/get_started/installsuccess.png)\n\n## 验证安装\n打开TD，点击下载,如图所示\n![](./../../assets/get_started/87078310026779781.jpg)\n\n将 Tang Primer 插入您的计算机，然后点击下载对话框上的刷新按钮\n![](./../../assets/get_started/1823555291194601.jpg)\n\n出现上图的信息，则表示安装成功"}, "/soft/Tang/zh/get_started/driver_linux_en.html": {"title": "Install TD driver on Linux", "content": "# Install TD driver on Linux\n\n\n\n##  Insert LicheeTang into your computer   and execute lsusb to see the information. Make sure USB VID:PID is 0547:1002 as shown in image below.</font>\n\n    ![Check for default linux driver](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/get_started/237929105611360081.jpg)\n    Check for default linux driver. \n## Set udev rules to enable LicheeTang to be accessed by the plugdev group\n\n> Execute the following command in terminal to create a new udev rules file.\n> ```\n> sudo nano /etc/udev/rules.d/91-anlogic-jtag.rules\n> ```\n> Copy the following code into text editor and save it, as shown in following image.\n> ```\n> SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0547\", ATTRS{idProduct}==\"1002\", \\\n  GROUP=\"plugdev\", \\\n  MODE=\"0660\"\n>```\n\n![Create a new udev rule file.](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/get_started/572316008299057820.jpg)\n\nExecute the following command in terminal to restart the udev service.\n\n## Open Tang Dynasty IDE.\nGo to <TD installation directory>/bin/ and execute the following command to open TD IDE in GUI mode.\n\n    ./td -gui\n\nClick on Download buttion as shown in following image.\n![Tang Dynasty SDK in GUI Mode](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/get_started/87078310026779781.jpg)\n\n## Plugin LicheeTang into your computer and hit Refresh buttion on Download Dialog box.\n\n![](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/get_started/1823555291194601.jpg)\n\n>Note Due to some unknown bug, JTAG work only with 400kbps or lower speed.\n\nCongratulations, you have setup the TD driver on Linux."}, "/soft/Tang/zh/get_started/install_Linux.html": {"title": "Linux的开发环境配置", "content": "# Linux的开发环境配置\n\n## 安装TD \n\n想要进行FPGA开发需要安装TD，可以通过[下载站](https://dl.sipeed.com/shareURL/TANG/Premier/IDE)，下载TD安装包和license，如果下载速度过慢的时候，建议使用[百度网盘](https://eyun.baidu.com/s/3i6FbQzr)进行下载\n\n![install_TD_linux](./../../assets/get_started/install_TD_linux.png)\n\n下载安装程序存档后，打开终端并 cd 进入该目录。 \n\n```\ncd <安装程序存档目录的路径 >\n```\n\n/opt 目录是为所有不属于默认安装的软件和附加包保留的。 为您的 TD IDE 安装创建一个目录\n\n```\nsudo mkdir /opt/TD_DECEMBER2018\n```\n\n将 TD 解压到 /opt/TD_DECEMBER2018 目录中：\n\n```\nsudo tar -xvf  TD_5.0.3_28716_NL_Linux.zip -d /opt/TD_DECEMBER2018/\n```   \n\n<div>\n    <script>\n    </script>\n</div>"}, "/soft/Tang/zh/get_started/E203.html": {"title": "搭建蜂鸟开发环境", "content": "# 搭建蜂鸟开发环境\n\n>Note 现已经做好了 虚拟机镜像 链接：[https://dl.sipeed.com/shareURL/TANG/Primer/vmware](https://dl.sipeed.com/shareURL/TANG/Primer/vmware)，可直接使用\n\n## 下载交叉编译工具链\n\n百度网盘链接为: [https://pan.baidu.com/s/1eUbBlVc](https://pan.baidu.com/s/1eUbBlVc)\n\n由于这里提供的openocd不支持LicheeTang使用的flash型号，所以进行了一些修改，请 [下载](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/get_started/openocd) 新的进行替换\n\n## 配置工作环境\n\n1. 从github下载e200_opensource\n>git clone https://github.com/SI-RISCV/e200_opensource.git \n\n2. 将 [sirv-e203-lichee.tar.gz](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/get_started/sirv-e203-lichee.tar.gz) 解压至 e200_opensource/sirv-e-sdk/bsp/env 目录下\n\n+ 将下载好的交叉工具编译链以及 openocd 解压(记得使用新的openocd替换)，在 e200_opensource/sirv-e-sdk/work 目录下将其分别软连接到:\n  \n```\n.. code-block:: sh\n    :emphasize-lines: 5,9\n\n    .\n    └── build\n    ├── openocd\n    │   └── prefix\n    │       └── bin -> /opt/riscv/gnu-mcu-eclipse/openocd/0.10.0-6-20180112-1448/bin/\n    └── riscv-gnu-toolchain\n    └── riscv32-unknown-elf\n    └── prefix\n    └── bin -> /opt/riscv/gnu-mcu-eclipse/riscv-none-gcc/7.2.0-2-20180111-2230/bin/\n```\n\n## 蜂鸟的调试\n我们使用ft2232d与openocd进行蜂鸟的调试，所以需要进行一些配置\n将ft2232d插入电脑，执行lsusb，可看到一下信息\n\n    Bus 003 Device 019: ID 0403:6010 Future Technology Devices International, Ltd FT2232C Dual USB-UART/FIFO IC\n\n设置 udev rules,使 ft2232d 能够被 plugdev group 访问\n\n    vim /etc/udev/rules.d/45-ft2232.rules\n    ATTR{idVendor}==\"0403\", ATTR{idProduct}==\"6010\", MODE=\"660\", GROUP=\"plugdev\"\n\n查看该设备是否属于 plugdev\n\n    ls -l /dev/ttyUSB1\n    crw-rw---- 1 root plugdev 188, 1 7月  11 09:13 /dev/ttyUSB1\n\n将你自己的用户添加到 plugdev group 中\n\n    whoami\n    sudo usermod –a –G plugdev your user name\n    \n确认你自己的用户是否属于 plugdev group\n\n    groups\n\n## 编译下载demo程序\n\n编译下载demo程序，可参考文件夹下的demo_gpio.tar.gz在e200_opensource/sirv-e-sdk目录下执行\n>编译： make software PROGRAM=demo_gpio BOARD=sirv-e203-lichee\n>上传： make upload PROGRAM=demo_gpio BOARD=sirv-e203-lichee\n\n## 调试\n打开两个terminal，一个运行openocd，另外一个运行gdb\n\n>openocd: make run_openocd PROGRAM=demo_gpio BOARD=sirv-e203- lichee\n>GDB: make run_gdb PROGRAM= demo_gpio BOARD=sirv-e203- lichee\n\n`Tip 可能写的不是很清楚，如果有任何疑问欢迎提出，或者参看胡大的《手把手教你设计CPU：RISC-V处理器》（已经上市，请在京东、淘宝、当当上搜索 RISC-V关键字）`"}, "/soft/Tang/zh/e203/led.html": {"title": "蜂鸟点灯", "content": "---\ntitle: 蜂鸟点灯\n---\n\n> maxdepth\n> :   2\n>\n> led/led led/pwm\\_led led/ws2812"}, "/soft/Tang/zh/e203/ft2232.html": {"title": "FT2232使用简明教程", "content": "---\ntitle: FT2232使用简明教程\n---\n\n待补充。。。"}, "/soft/Tang/zh/e203/peripherals.html": {"title": "蜂鸟外设简介", "content": "---\ntitle: 蜂鸟外设简介\n---\n\n待补充。。。"}, "/soft/Tang/zh/e203/display.html": {"title": "蜂鸟驱动屏幕", "content": "---\ntitle: 蜂鸟驱动屏幕\n---\n\n> maxdepth\n> :   2\n>\n> display/lcd1602 display/oled display/spi\\_tft"}, "/soft/Tang/zh/e203/rv_ip.html": {"title": "蜂鸟添加外设", "content": "---\ntitle: 蜂鸟添加外设\n---\n\n待补充。。。"}, "/soft/Tang/zh/e203/sensor.html": {"title": "蜂鸟外挂传感器", "content": "---\ntitle: 蜂鸟外挂传感器\n---\n\n待补充。。。"}, "/soft/Tang/zh/e203/int.html": {"title": "蜂鸟的中断", "content": "---\ntitle: 蜂鸟的中断\n---\n\n待补充。。。"}, "/soft/Tang/zh/e203/display/lcd1602.html": {"title": "1602屏幕", "content": "---\ntitle: 1602屏幕 \n---\n\n待补充。。。"}, "/soft/Tang/zh/e203/display/spi_tft.html": {"title": "'SPI\\_MCU彩屏'", "content": "---\ntitle: 'SPI\\_MCU彩屏' \n---\n\n待补充。。。"}, "/soft/Tang/zh/e203/display/oled.html": {"title": "OLED屏幕", "content": "---\ntitle: OLED屏幕 \n---\n\n待补充。。。"}, "/soft/Tang/zh/e203/led/led.html": {"title": "RGB LED", "content": "---\ntitle: RGB LED\n---\n\n待补充。。。"}, "/soft/Tang/zh/e203/led/pwm_led.html": {"title": "呼吸灯", "content": "---\ntitle: 呼吸灯\n---\n\n待补充。。。"}, "/soft/Tang/zh/e203/led/ws2812.html": {"title": "WS2812灯带", "content": "---\ntitle: WS2812灯带\n---\n\n待补充。。。"}, "/soft/Tang/zh/index_bak.html": {"title": "荔枝糖 全流程指南", "content": "# 荔枝糖 全流程指南\n\n\n荔枝糖，一款极致打磨的国产开源RISC-V开发板。\n\n荔枝糖萌生于国内芯片振荡之潮，历经三个月的生长与蜕变，终于在七月，登上开源的舞台。\n\n荔枝糖不仅担起开源开发者们的期待，更志向于在国内推广RISC-V架构相关的开发与教育，向世界介绍中国的一款优秀开发板。\n\n![](./../assets/material.png)\n\n\n荔枝糖使用 安路科技(Anlogic Technologies) 的 EG4S20 作为核心单元, **20K逻辑单元(LUT4/LUT5混合架构)，约130KB SRAM，内置32bit位宽 64MBit SDRAM，丰富的LVDS引脚，内置12-bit 1MSPS ADC**，这为荔枝糖提供了无限的可能性：\n-   FPC40P座，可接 RGB LCD，VGA转接板，高速DAC模块\n-   FPC24P座，可接DVP摄像头，高速ADC模块\n-   I2C接口的电阻触摸屏控制器，配合RGB LCD使用\n-   3路DCDC电源芯片，稳定高效的电源供应，Bank0 IO电平独立可调\n-   FPGA 配置Flash，8Mbit\n-   用户Flash，nor/nand可选\n-   板载FPGA JTAG下载调试器\n-   RGB LED\n-   相邻插针LVDS等长引出，引出8路GCLK，全引出8路ADC。\n-   双排插针间距900mil， **兼容面包板开发** \n-   半孔引出额外 **40 IO**，整板引出 **130+ IO** 。\n\n![荔枝糖资源图](./../assets./../assets./../assets/E203_function.png)\n\n\n![荔枝糖引脚图(旧板,底面丝印较小版本)](./../assets./../assets/E203_pin.png)\n\n\n![ 荔枝派引脚图(新板,底面丝印较大版本)](./../assets/Lichee-tang_NewIoMap.png)\n\n\n2018年8月15日之前收到的板子预烧录的码流为旧版本IO分配，需要烧录[新版本码流](./../assets/LicheeTangNewIoMap_BitStream.bit)\n\n您可能需要这些来进一步了解荔枝糖： \n[EG4S20Datasheet](https://dl.sipeed.com/shareURL/TANG/Premier/HDK/Datasheet/EG4S20_DataSheet_V1.4.pdf)|[荔枝糖原理图](https://dl.sipeed.com/fileList/TANG/Premier/HDK/LicheeTang_RV(Schematic).pdf)\n\n荔枝糖仍在不断地成长，对于外观、电路设计、文档内容甚至于荔枝糖的发展方向，我们欢迎您到[荔枝糖 | 建议与讨论帖](https://bbs.sipeed.com/category/3?search_ids=3&search_ids=36&search_ids=28&search_ids=31&search_ids=30) 提出您宝贵的建议。\n\n同时欢迎各位加入[荔枝派交流群826307240](https://jq.qq.com/?_wv=1027&k=5uWO21P) | [荔枝派Telegram电报群](https://t.me/sipeed)与众多开发者、爱好者即时交流，并获取 FPGA 开发环境 TD (Tang Dynasty)，其中 TD 软件自带全系列的参考文档。\n\n另外，TD 亦可在如下网址下载：\n[https://eyun.baidu.com/s/3i6FbQzr](https://eyun.baidu.com/s/3i6FbQzr)\n下载站文件->TANG->Primer->IDE\n\n![](./../assets/QQ_Group_2.jpg)"}, "/soft/Tang/zh/fpga/led.html": {"title": "FPGA点灯", "content": "---\ntitle: FPGA点灯\n---\n\n# 源码下载\n\n\n请到github下载，地址为\n[\\<<https://github.com/Lichee-Pi/Tang_FPGA_Examples/tree/master/0.LED>\\>](<https://github.com/Lichee-Pi/Tang_FPGA_Examples/tree/master/0.LED>)\n\n# 代码简析\n```\nmodule led\n(\n    input wire CLK_IN, //时钟输入，24MHz\n    input wire RST_N, //复位按键输入，低有效\n    output wire [2:0]RGB_LED //RGB led输出\n);\n\nparameter time1 = 24’d24_000_000;//晶振为24Mhz，这里表示计数一秒\n\nreg [2:0]rledout;\nreg [23:0] count;\nreg [1:0]shift_cnt;\n\ninitial\nbegin\n    count=24’b0;\n    rledout=3’b1;\n    shift_cnt=2’b0;\nend\n\nalways @(posedge CLK_IN)begin\n    if(RST_N==0)begin //复位按键按下就清空计数并清空输出\n        count <= 24’b0;\n        rledout <= 3’b1;\n        shift_cnt <=2’b0;\n    end\n\n    if(count == time1) //计数时间到\n    begin\n        count<= 24’d0; //清空计数值\n\n        if(shift_cnt==2’b10)begin //移位3次\n            rledout <= 3’b1;\n            shift_cnt <=2’b0;\n        end\n        else begin\n            rledout <= {rledout[1:0],1’b0}; //led输出移位\n            shift_cnt <= shift_cnt + 1’b1;\n        end\n    end\n    else\n        count <= count + 1’b1; //计数累加\nend\n\nassign RGB_LED = rledout;\nendmodule\n```\n将代码综合，下载码流到fpga，可以看到板上的rgb led会移位闪烁。（emmm，闪烁效果太差，如果你有更好的可以发过来。(╯︵╰)"}, "/soft/Tang/zh/fpga/opencores.html": {"title": "FPGA 运行其他软核", "content": "---\ntitle: FPGA 运行其他软核\n---\n\n待补充。。。"}, "/soft/Tang/zh/fpga/ics/codec.html": {"title": "FPGA驱动CODEC", "content": "---\ntitle: FPGA驱动CODEC\n---\n\n待补充。。。"}, "/soft/Tang/zh/fpga/ics/adc9288.html": {"title": "FPGA驱动ADC9288", "content": "---\ntitle: FPGA驱动ADC9288\n---\n\n待补充。。。"}, "/soft/Tang/zh/fpga/ics/usb3300.html": {"title": "FPGA驱动USB3300", "content": "---\ntitle: FPGA驱动USB3300\n---\n\n待补充。。。"}, "/soft/Tang/zh/fpga/ics/dac908.html": {"title": "FPGA驱动DAC908", "content": "---\ntitle: FPGA驱动DAC908\n---\n\n待补充。。。"}, "/soft/Tang/zh/fpga/sdram.html": {"title": "FPGA驱动SDRAM", "content": "---\ntitle: FPGA驱动SDRAM \n---\n\n待补充。。。"}, "/soft/Tang/zh/fpga/display.html": {"title": "FGPA外接常用显示接口", "content": "---\ntitle: FGPA外接常用显示接口 \n---\n\n\\> maxdepth \\> : 2 \\> \\> display/lcd display/vga display/av display/hdmi"}, "/soft/Tang/zh/fpga/ics.html": {"title": "FPGA驱动其他IC", "content": "---\ntitle: FPGA驱动其他IC \n---\n\n\\> maxdepth \\> : 2 \\> \\> ics/adc9288 ics/dac908 ics/codec ics/usb3300"}, "/soft/Tang/zh/fpga/dvp.html": {"title": "FPGA驱动DVP", "content": "---\ntitle: FPGA驱动DVP \n---\n\n待补充。。。"}, "/soft/Tang/zh/fpga/display/av.html": {"title": "FPGA驱动AV显示器", "content": "---\ntitle: FPGA驱动AV显示器\n---\n\n待补充。。。"}, "/soft/Tang/zh/fpga/display/vga.html": {"title": "FPGA驱动VGA", "content": "---\ntitle: FPGA驱动VGA\n---\n\n待补充。。。"}, "/soft/Tang/zh/fpga/display/lcd.html": {"title": "FPGA驱动LCD", "content": "---\ntitle: FPGA驱动LCD\n---\n\n待补充。。。"}, "/soft/Tang/zh/fpga/display/hdmi.html": {"title": "FPGA驱动HDMI", "content": "---\ntitle: FPGA驱动HDMI\n---\n\n待补充。。。"}, "/soft/Tang/zh/Tang-Nano-Doc/get_started/install-the-ide copy.html": {"title": "下载", "content": "# 下载\n\n进入官网 http://www.gowinsemi.com.cn/faq.aspx ，可以看到如下图的软件列表，选择适合电脑的系统的版本进行下载\n\n![1-1](./../../../assets/gowin_down.png)\n\n# 安装\n\n**Windows** 用户：\n\n双击下载好的 exe 安装文件，选择安装语言、安装位置，鼠标点击下一步就可以完成安装了\n\n完成安装时提示安装的驱动请务必安装\n\n![2-1](./../../../assets/gowin_install.png)\n\n勾选安装驱动后点击完成后，就会进行驱动的安装\n\n由于新版ide中的下载器是无法读取到Nano 4K中的flash，所以需要进行下载器的文件替换\n通过在[下载站](https://dl.sipeed.com/shareURL/TANG/Nano%204K/IDE)下载替换文件\n下载压缩包进行解压，得到三个文件夹![](./../../../assets/Nano-4K/4K-ide.png).将这个三个文件夹复制到`Gowin/Gowim_V*/Programmer/`下(*是你所安装ide的版本号)\n\n**Linux** 用户：\n\nTODO\n\n# license\n\n现目前有两种方式进行 license\n\n**第一种：使用单机版 licence(需要申请 licence)**\n\n发送申请邮件到 `Support@sipeed.com` ，标题为 `【Apply Tang Lic】MAC: xxxxxx`，内容模板如下\n\n```\n公司名称:\n公司网站:\n部门:\n联系人姓名:\n联系人电话:\n联系人邮箱:\n联系人省份:\n计算机MAC地址:\nlicense类型:共享型 仅本机\n操作系统类型:Windows Linus\n代理商推荐:群策电子 致远达科技 算科电子 欣华隆科技 北高智科技 晶立达科技 其他\n```\n\n在打开高云 IDE 的时候，在弹出的 licence 管理中，选择自己本地的 license 的路径，即可\n\n![3-5](./../../../assets/lic_file_5.png)\n\n然后需要添加 synplifypro 的 licence 的路径到系统变量，下面只简单的介绍一种添加方法，在 `第二种：使用 sipeed 的 licence 服务器联网激活` 中，有更详细的介绍\n\n**Windows** 用户在键盘上按 win+r 键，在弹出的运行窗口输入 `cmd`，点击确定后会弹出黑色命令行窗口，在里面输入下面命令，`path_to_the_file` 是你 `gowin_Synplifypro.lic` 的路径\n\n```\nsetx LM_LICENSE_FILE path_to_the_file\n```\n\n**第二种：使用 sipeed 的 licence 服务器联网激活**\n\n这种方式配置起来简单，不过没有网络的情况下无法使用软件\n\n下载好软件打开后，软件会提示需要 licence，在弹出框中填入服务器地址 `45.33.107.56` 即可，IDE端口：10559\n\n![3-6](./../../../assets/lic_remote_1.png)\n\nsynopsys 高级功能的激活需要在系统中添加环境变量 `LM_LICENSE_FILE=27020@45.33.107.56`\n\n**Windows** 用户在键盘上按 win+r 键，在弹出的运行窗口输入 `cmd`，点击确定后会弹出黑色命令行窗口，在里面输入下面命令\n\n```\nsetx LM_LICENSE_FILE 27020@45.33.107.56\n```\n\nWindows 除了命令行的方式添加，也可以通过 右键电脑->属性->环境变量 ，然后如下图进行添加\n\n![3-7](./../../../assets/lic_remote_2.png)\n\n**Linux** 用户需要在 `~/.bashrc` 中添加\n\n```\nexport LM_LICENSE_FILE 27020@45.33.107.56\n```\n\n进入 IDE 后，点击 Tools 中的 `Synplify Pro`\n\n![3-8](./../../../assets/lic_remote_3.png)\n\n随后会弹出界面如下图，这时需要等待一小会，等 licence 初始化完毕就可以使用\n\n![3-9](./../../../assets/lic_remote_4.png)\n\n# 使用方法\n\n参考官方文档[Gowin云源软件用户指南](http://cdn.gowinsemi.com.cn/SUG100-1.8_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)，第5章 云源软件使用\n\n# 参考文档\n\n+ [高云软件简介和安装](http://cdn.gowinsemi.com.cn/%E9%AB%98%E4%BA%91%E8%BD%AF%E4%BB%B6%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85.pdf)"}, "/soft/Tang/zh/Tang-Nano-Doc/get_started/install-the-ide.html": {"title": "下载", "content": "# 下载\n\n进入官网 http://www.gowinsemi.com.cn/faq.aspx ，可以看到如下图的软件列表，选择适合电脑的系统的版本进行下载\n\n![1-1](./../../../assets/gowin_down.png)\n\n# 安装\n\n**Windows** 用户：\n\n双击下载好的 exe 安装文件，选择安装语言、安装位置，鼠标点击下一步就可以完成安装了\n\n完成安装时提示安装的驱动请务必安装\n\n![2-1](./../../../assets/gowin_install.png)\n\n勾选安装驱动后点击完成后，就会进行驱动的安装\n\n由于新版ide中的下载器是无法读取到Nano 4K中的flash，所以需要进行下载器的文件替换\n通过在[下载站](https://dl.sipeed.com/shareURL/TANG/Nano%204K/IDE)下载替换文件\n下载压缩包进行解压，得到三个文件夹![](./../../../assets/Nano-4K/4K-ide.png).将这个三个文件夹复制到`Gowin/Gowim_V*/Programmer/`下(*是你所安装ide的版本号)\n\n**Linux** 用户：\n\nTODO\n\n# license\n\n现目前有两种方式进行 license\n\n**第一种：使用单机版 licence(需要申请 licence)**\n\n发送申请邮件到 `Support@sipeed.com` ，标题为 `【Apply Tang Lic】MAC: xxxxxx`，内容模板如下\n\n```\n公司名称:\n公司网站:\n部门:\n联系人姓名:\n联系人电话:\n联系人邮箱:\n联系人省份:\n计算机MAC地址:\nlicense类型:共享型 仅本机\n操作系统类型:Windows Linus\n代理商推荐:群策电子 致远达科技 算科电子 欣华隆科技 北高智科技 晶立达科技 其他\n```\n\n在打开高云 IDE 的时候，在弹出的 licence 管理中，选择自己本地的 license 的路径，即可\n\n![3-5](./../../../assets/lic_file_5.png)\n\n然后需要添加 synplifypro 的 licence 的路径到系统变量，下面只简单的介绍一种添加方法，在 `第二种：使用 sipeed 的 licence 服务器联网激活` 中，有更详细的介绍\n\n**Windows** 用户在键盘上按 win+r 键，在弹出的运行窗口输入 `cmd`，点击确定后会弹出黑色命令行窗口，在里面输入下面命令，`path_to_the_file` 是你 `gowin_Synplifypro.lic` 的路径\n\n```\nsetx LM_LICENSE_FILE path_to_the_file\n```\n\n**第二种：使用 sipeed 的 licence 服务器联网激活**\n\n这种方式配置起来简单，不过没有网络的情况下无法使用软件\n\n下载好软件打开后，软件会提示需要 licence，在弹出框中填入服务器地址 `45.33.107.56` 即可，IDE端口：10559\n\n![3-6](./../../../assets/lic_remote_1.png)\n\n\n# 使用方法\n\n参考官方文档[Gowin云源软件用户指南](http://cdn.gowinsemi.com.cn/SUG100-1.8_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)，第5章 云源软件使用\n\n# 参考文档\n\n+ [高云软件简介和安装](http://cdn.gowinsemi.com.cn/%E9%AB%98%E4%BA%91%E8%BD%AF%E4%BB%B6%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85.pdf)"}, "/soft/Tang/zh/Tang-Nano-Doc/SUMMARY.html": {"title": "Summary", "content": "Summary\n=====\n\n## 简介\n\n- [关于Tang Nano](README.md)\n\n## 准备\n\n- [IDE安装](get_started/install-the-ide.md)\n\n## 示例\n\n- [点灯教程](examples\\1_led.md)\n- [点LCD教程](examples\\2_lcd.md)\n- [使用PSRAM存储](examples\\3_psram.md)"}, "/soft/Tang/zh/Tang-Nano-Doc/examples/1_led.html": {"title": "点灯", "content": "# 点灯\n## 本实例的过程\n\n新建工程 -> 添加源代码文件 -> 添加时序、引脚约束 -> 综合 -> 烧录\n\n在看这篇文档前，请再次确定自己看过[Gowin云源软件用户指南](http://cdn.gowinsemi.com.cn/SUG100-1.8_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)，第5章 云源软件使用\n\n本实验的源码地址：[https://github.com/sipeed/Tang-Nano-examples/tree/master/example_led](https://github.com/sipeed/Tang-Nano-examples/tree/master/example_led)\n\n## Verilog 预备知识\n\n这里只介绍接下来会用到的相关语法，更多的可以参考《Verilog 数字系统设计教程》\n\nVerilog 的基本设计单元是模块，每个 Verilog 程序包括 4个 主要部分：端口定义、I/O说明、内部信号声明和功能定义\n\n模块就像我们平时提到的黑匣子，当我们实现了模块后，就不需要去关心模块内部，只需要根据模块定义的输入输出格式，将模块实例化，给模块提供输入，就可以让模块自己工作了\n\n一个模块长成这样\n\n```\nmodule block (input a, output b);\nreg [width-1:0] R_1;\n\nassign b = a;\nalways @(posedge clk or negedge reset_n)\nbegin\n// do something\nend\n\nendmodule\n```\n\n模块整体结构由 module 和 endmodule 组成，module 后面跟着的是模块接口的定义，声明了端口的方向是输入还是输出\n\n模块内部有时候会使用内部的信号，内部信号有 wire 和 reg 类型\n\n功能的定义可以通过 assign 和 always块 完成。 assign 是描述组合逻辑最常用的方法之一； always 块机可用于描述组合逻辑，也可描述时序逻辑\n\n## 引脚使用情况\n\n板载的是一颗三色 RGB 灯，原理图如下\n\n![](./../../../assets/examples/led_pjt_1.png)\n\n整个程序使用到的引脚分布如下\n\n| port      | I/O    | pin | desc       |\n| --------- | ------ | --- | ---------- |\n| sys_clk   | input  | 35  | 时钟输入脚 |\n| sys_rst_n | input  | 15  | 系统复位脚 |\n| led[0]    | output | 16  | 绿灯       |\n| led[1]    | output | 17  | 蓝灯       |\n| led[2]    | output | 18  | 红灯       |\n\n## 程序设计\n\n本系统时钟为 24Mhz，一个机器周期为 1/24M s，也就是说每过 12000000 个时钟周期为 0.5s\n\n在程序中通过 counter 计算 12000000 个时钟周期，实现 0.5s 的等待，等时间到了之后将 counter 置 0，并改变 LED 的颜色\n\n```\nmodule led (\n    input sys_clk,          // clk input\n    input sys_rst_n,        // reset input\n    output reg [2:0] led    // 110 G, 101 R, 011 B\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1200_0000)       // 0.5s delay\n        counter <= counter + 1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 3'b110;\n    else if (counter == 24'd1200_0000)       // 0.5s delay\n        led[2:0] <= {led[1:0],led[2]};\n    else\n        led <= led;\nend\n\nendmodule\n```\n\n## 引脚约束\n\n要想让 fpga 实现代码的功能，还需要将代码中涉及的引脚操作约束到 fpga 实际的引脚上\n\n如下图，在左边的工作区点击 process，然后双击 FloorPlanner\n\n![](./../../../assets/examples/led_pjt_2.png)\n\n在工程中第一次点击，可能会提示说创建文件，点击确定即可\n\n在弹出窗口中，切换到 Package View ，将 Ports 下的端口拖到 fpga 对应的引脚上，保存即可，如下图\n\n![](./../../../assets/examples/led_pjt_3.png)\n\n## 综合\n\n在左侧的工作区中，右键 Synthesize 或 Place&Route 时，会有 run 的选项，点击即可\n\n![](./../../../assets/examples/led_pjt_4.png)\n\n## 烧录到开发板\n\n有两种选择，一种是烧录到 sram 中，一种是烧录到 flash 中\n\n烧录到 sram 中比较快，但是掉电后 fpga 中就没有固件了；烧录到 flash 中可以在系统掉电后保存之前烧录的固件\n\n烧录是通过 Programer 完成的\n\n双击左侧工作区的 Program Device 就可以打开 Programer\n\n![](./../../../assets/examples/led_pjt_5.png)\n\n不过在使用 Programer 前需要注意，要在 Synthesize 和 Place&Route 都完成后才能使用 Programer ，否则软件会报错 `Bitstream file dose not exists`\n\n![](./../../../assets/examples/led_pjt_6.png)\n\nLinux 用户需要注意\n\n> Linux 安装包中的编程器适用于 Linux 版本 Red Hat 5.10，如需 Red Hat 6/7 版本的编程器，请到官网上下载安装后，将安装包替换为 Gowin 云源软件安装包中的文件夹“Programmer”。\n\n### 更改烧录位置\n\n要选择固件烧录的位置，可以在选中芯片的情况下，点击 Edit -> Configure Device\n\n![](./../../../assets/examples/led_pjt_7.png)\n\n在弹出窗口中选择自己需要烧录到的位置，这里选择的是 flash ，默认烧录位置是 sram\n\n![](./../../../assets/examples/led_pjt_8.png)\n\n### 烧录\n\n在选择好烧录位置后，就可以烧录固件了，点击菜单栏的烧录即可\n\n![](./../../../assets/examples/led_pjt_9.png)"}, "/soft/Tang/zh/Tang-Nano-Doc/examples/4K_led.html": {"title": "Nano 4K 点灯", "content": "# Nano 4K 点灯\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>\n\n## 本实例的过程\n\n新建工程 -> 添加源代码文件 -> 添加时序、引脚约束 -> 综合 -> 烧录\n\n在看这篇文档前，请再次确定自己看过[Gowin云源软件用户指南](http://cdn.gowinsemi.com.cn/SUG100-1.8_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)，第5章 云源软件使用\n\n本实验的源码地址：[TangNano-4K-example/led_test/project](https://github.com/USTHzhanglu/TangNano-4K-example/tree/USTHzhanglu/led_test/project)\n\n## Verilog 预备知识\n\n这里只介绍接下来会用到的相关语法，更多的可以参考《Verilog 数字系统设计教程》\n\nVerilog 的基本设计单元是模块，每个 Verilog 程序包括 4个 主要部分：端口定义、I/O说明、内部信号声明和功能定义\n\n模块就像我们平时提到的黑匣子，当我们实现了模块后，就不需要去关心模块内部，只需要根据模块定义的输入输出格式，将模块实例化，给模块提供输入，就可以让模块自己工作了\n\n一个模块长成这样\n\n```\nmodule block (input a, output b);\nreg [width-1:0] R_1;\n\nassign b = a;\nalways @(posedge clk or negedge reset_n)\nbegin\n// do something\nend\n\nendmodule\n```\n\n模块整体结构由 module 和 endmodule 组成，module 后面跟着的是模块接口的定义，声明了端口的方向是输入还是输出\n\n模块内部有时候会使用内部的信号，内部信号有 wire 和 reg 类型\n\n功能的定义可以通过 assign 和 always块 完成。 assign 是描述组合逻辑最常用的方法之一； always 块机可用于描述组合逻辑，也可描述时序逻辑\n\n## 引脚使用情况\n\n板载的是一颗红色LED 灯，原理图如下\n\n<img src=\"https://raw.githubusercontent.com/USTHzhanglu/picture/main/img/image-20210810160224782.png\" alt=\"image-20210810160224782\" style=\"zoom:50%;\" />\n\n整个程序使用到的引脚分布如下\n\n| port      | I/O    | pin  | desc       |\n| --------- | ------ | ---- | ---------- |\n| sys_clk   | input  | 45   | 时钟输入脚 |\n| sys_rst_n | input  | 15   | 系统复位脚 |\n| led       | output | 15   | 红灯       |\n\n## 程序设计\n\n本系统时钟为 27Mhz，一个机器周期为 1/27M s，也就是说每过 13500000 个时钟周期为 0.5s\n\n在程序中通过 counter 计算 13500000 个时钟周期，实现 0.5s 的等待，等时间到了之后将 counter 置 0，并改变 LED 的状态\n\n```\nmodule led (\n    input sys_clk,\n    input sys_rst_n,        // reset input\n    output   reg led        //R\n);\nreg [23:0] counter;\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1350_0000)       // 0.5s delay\n        counter <= counter + 1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 1'b1;\n    else if (counter == 24'd1350_0000)       // 0.5s delay\n        led <= ~led;                         // TogglePin\nend\n\nendmodule\n```\n\n## 引脚约束\n\n要想让 fpga 实现代码的功能，还需要将代码中涉及的引脚操作约束到 fpga 实际的引脚上\n\n如下图，在左边的工作区点击 process，然后双击 FloorPlanner\n\n![](./../../../assets/examples/led_pjt_2.png)\n\n在工程中第一次点击，可能会提示说创建文件，点击确定即可\n\n在弹出窗口中，切换到 Package View ，将 Ports 下的端口拖到 fpga 对应的引脚上，保存即可，如下图\n\n![image-20210810161650281](./../../../assets/Nano-4K/4K-led-1.png)\n\nLED对应的IO10默认是mode Pin，无法直接约束，需要打开Project>Configuration>Dual-Purpose Pin,勾选 Use MODE as regular IO,如下图\n\n<img src=\"(./../../../assets/Nano-4K/4K-led-2.png)\" alt=\"image-20210810161934170\" style=\"zoom:50%;\" />\n\n## 综合\n\n在左侧的工作区中，右键 Synthesize 或 Place&Route 时，会有 run 的选项，点击即可\n\n![](./../../../assets/examples/led_pjt_4.png)\n\n## 烧录到开发板\n\n有两种选择，一种是烧录到 sram 中，一种是烧录到 flash 中\n\n烧录到 sram 中比较快，但是掉电后 fpga 中就没有固件了；烧录到 flash 中可以在系统掉电后保存之前烧录的固件\n\n烧录是通过 Programer 完成的\n\n双击左侧工作区的 Program Device 就可以打开 Programer\n\n![](./../../../assets/examples/led_pjt_5.png)\n\n不过在使用 Programer 前需要注意，要在 Synthesize 和 Place&Route 都完成后才能使用 Programer ，否则软件会报错 `Bitstream file dose not exists`\n\n![](./../../../assets/examples/led_pjt_6.png)\n\nLinux 用户需要注意\n\n> Linux 安装包中的编程器适用于 Linux 版本 Red Hat 5.10，如需 Red Hat 6/7 版本的编程器，请到官网上下载安装后，将安装包替换为 Gowin 云源软件安装包中的文件夹“Programmer”。\n\n### 更改烧录位置\n\n要选择固件烧录的位置，可以在选中芯片的情况下，点击 Edit -> Configure Device\n\n![](./../../../assets/examples/led_pjt_7.png)\n\n在弹出窗口中选择自己需要烧录到的位置，这里选择的是 flash ，默认烧录位置是 sram\n\n![image-20210810162149938](./../../../assets/Nano-4K/4K-led-3.png)\n\n### 烧录\n\n在选择好烧录位置后，就可以烧录固件了，点击菜单栏的烧录即可\n\n![](./../../../assets/examples/led_pjt_9.png) \n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/soft/Tang/zh/Tang-Nano-Doc/examples/2_lcd.html": {"title": "", "content": "RGB LCD 示例\n\n# 先介绍时序\n\nRGB LCD 显示图像的原理和 VGA 类似，都是在计算机内部以数字的方式生成需要显示的图像信息，再通过模数转换的方式，将这些数字的图像信息转变为 RGB 三原色模拟信号，以及行、场同步信号。\n\n下面就介绍 VGA 的时序\n\n![](./../../../assets/examples/lcd_pjt_1.png)\n\n上图分别是 VGA 在数据传输中的行同步、场同步时序\n\n从时序图中可以看出，不论是显示一行数据还是一列数据，都需要一个同步(sync)信号，数据的传输需要在两个同步信号的脉冲之间完成\n\n每一行的数据包括显示前沿(back porch)、有效数据(active viedo)、显示后沿(front porch)\n\n其中的有效数据就是我们常说的分辨率，而显示前后沿的参数需要参考具体的分辨率与帧数进行设置，相关参数可以参考典型参数，链接在此： http://www.tinyvga.com/vga-timing\n\n这块屏幕的控制时序略有不同，相关参数的设置可以查看[规格书](./../../../assets/files/AT050TN43.pdf)\n\n下面提供了 LCD 相关时序的截图\n\n![](./../../../assets/examples/lcd_pjt_2.png)\n\n![](./../../../assets/examples/lcd_pjt_3.png)\n\n上面一张图是时序中的参数表，下面的图是时序图\n\n从时序图中看出，这块屏幕可以不用设置前后沿，可以只设置消影(blanking)时间，通过实际的程序证明，两种方式都是可以的\n\n# Verilog实现\n\n## pll\n\n板载的晶振时钟为 24MHz ，但是我们的屏幕要求 33.3MHZ 的时钟，所以我们需要使用 pll 产生我们需要的时钟\n\n这里需要使用到 `IP Core Generate` ，位置在 Tools -> IP Core Generate\n\n![](./../../../assets/examples/lcd_pjt_4.png)\n\n双击 `PLL` ，在弹出窗口 language 选择 Verilog ，CLKIN 为 24MHz ，CLKOUT 为 200MHz，CLKOUTD 要选择 Enable，然后生成时钟为 33.33MHz，Tolerance 选择 0.2%\n\n![](./../../../assets/examples/lcd_pjt_5.png)\n\n## osc\n\n系统的时钟可以使用外部时钟提供，也可以使用 OSC 生成的时钟\n\n同样也是使用 `IP Core Generate`\n\n找到 `OSC` 并双击打开进行分频的设置\n\n在帮助页面可以知道，GW1N-1 系列的 fpga 的 OSC 是从 240MHz 进行分频的，所以要产生 24MHz 的时钟，只需要进行 10 的分频\n\n## lcd时序产生\n\n```\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t//NOTE: 高像素时钟时，增加这里的延迟，方便K210加入中断\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n```\n\n首先是设置时序相关的参数：前沿、后沿、有效像素\n\n关于显示前沿、后沿，前面也说了，可以合并为一个消影时间，就是可以把其中一个设置为0，另一个设置为消影时间。反正前后沿的时间加起来符合表中的时间要求就可以\n\n```\nalways @(  posedge PixelClk or negedge nRST  )begin\n    if( !nRST ) begin\n        LineCount       <=  16'b0;    \n        PixelCount      <=  16'b0;\n        end\n    else if(  PixelCount  ==  PixelForHS ) begin\n        PixelCount      <=  16'b0;\n        LineCount       <=  LineCount + 1'b1;\n        end\n    else if(  LineCount  == LineForVS  ) begin\n        LineCount       <=  16'b0;\n        PixelCount      <=  16'b0;\n        end\nend\n\n//注意这里HSYNC和VSYNC负极性\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n这段代码产生同步信号，需要注意的是，这块屏幕的同步信号是负极性使能\n\n```\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //这里不减一，会抖动\n```\n\n这段代码设置 LCD 使能图像显示，这块屏幕需要控制一个管脚用作显示开关，实际这个信号就是传输图像有效的那 800*480 的数据时置 1\n\n```\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n这段代码用来产生 LCD 的测试数据，产生彩条显示\n\n```\nVGAMod\tD1\n(\n    .CLK\t\t(\tCLK_SYS     ),\n    .nRST\t\t(\tnRST\t\t),\n\n    .PixelClk\t(\tCLK_PIX\t\t),\n    .LCD_DE\t\t(\tLCD_DEN\t \t),\n    .LCD_HSYNC\t(\tLCD_HYNC \t),\n    .LCD_VSYNC\t(\tLCD_SYNC \t),\n\n    .LCD_B\t\t(\tLCD_B\t\t),\n    .LCD_G\t\t(\tLCD_G\t\t),\n    .LCD_R\t\t(\tLCD_R\t\t)\n);\n```\n\n最后就是在 TOP 中进行实例化\n\n整个工程可以在 [这里](https://github.com/sipeed/Tang-Nano-examples/tree/master/example_lcd) 下载"}, "/soft/Tang/zh/Tang-Nano-Doc/index.html": {"title": "Tang Nano", "content": "# Tang Nano\n\n## 什么是 Tang Nano \n\nLichee Tang Nano 是基于高云小蜜蜂系列 GW1N-1 FPGA 的简约型开发板。\n\n板载芯片为 GW1N-LV1QN48C6/I5，搭载了 1152 LUT4 的逻辑资源，1 PLL 和 4 Block 合计 72Kbit SRAM，封装为 QFN48。开发板引出了所有 I/O 接口，适用于小型数字逻辑的设计和实验。\n\n板载 64Mbits PSRAM，为 FPGA 提供了丰富的存储资源。\n\n同时，该开发板具有 RGB接口，能够与 LCD屏、VGA转换器 等外设连接，非常适合于屏幕显示等类型的应用。\n\n板子板载 24MHz 晶振和 USB转JTAG下载器，能够容易的连接电脑进行开发，而不需要外部的调试器和时钟输入。板载的 RGB LED 可用于指示和调试，同时 FPGA IOBANK 分组可调的IO电平使得开发板能够容易的对外部各种不同电平规范的器件接口。\n\n**板载资源:**\n\n+ GW1N-1\n+ 64Mbit QSPI PSRAM\n+ RGB LED\n+ RGB LCD 40P接口及驱动电路\n+ 24MHz晶振\n+ USB调试器，基于Type-C通讯接口\n\n## 引脚定义\n\n![Nano 引脚](./../../assets/tang_nano_pinout_v1.0.0_w5676_h4000_large.png)\n\n## 资源下载链接\n\n+ [高云官方下载站](http://www.gowinsemi.com.cn/faq.aspx)\n+ [dl 下载站](http://dl.sipeed.com/TANG/Nano)\n+ [Tang nano 原理图](../assets/files/Tang-NANO.pdf)"}, "/soft/Tang/zh/index.html": {"title": "Sipeed Hardware", "content": "---\ntitle: Sipeed Hardware\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载\ndesc: 矽速科技的硬件资料站\n---\n\n## LicheePi (Linux)\n\n- [LicheePi Zero](./)\n- [LicheePi Zero Plus](./)\n\n- [LicheePi Nano](./)"}}