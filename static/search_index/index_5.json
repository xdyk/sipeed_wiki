{"/soft/Tang/en/Tang-Nano-Doc/get_started/install-the-ide.html": {"title": "Download", "content": "# Download\n\nGo to the official website http://www.gowinsemi.com.cn/faq.aspx, you can see the software list below, select the version of the system suitable for the computer to download.\n\n![1-1](./../assets/gowin_down.png)\n\n# Installation\n\n**Windows** User:\n\nDouble-click the downloaded exe installation file, select the installation language, installation location, click the next step to complete the installation.\n\nBe sure to install the driver that prompts you to install when you complete the installation.\n\n![2-1](./../assets/gowin_install.png)\n\nCheck the installation driver and click Finish, the driver will be installed.\n\n**Linux** User:\n\nTODO\n\n# license\n\nThere are currently two ways to license.\n\n**The first type: use the stand-alone version of the licence (need to apply for license)**\n\nSend an application email to `Support@sipeed.com` under the heading `[Apply Tang Lic] MAC: XXXXXX`. The content template is as follows\n\n```\nCompany Name:\nCompany Website:\nDepartment:\nContact Person:\nContact No.:\nEmail:\nMedia Access Control Address(MAC):\nType of License: Shared Type, Local Only\nOperating System: Windows, Linux\n```\n\nWhen you open the High Cloud IDE, in the license management that pops up, select your local license path.\n\n![3-5](./../assets/lic_file_5.png)\n\nThen you need to add the path of the license of synplifypro to the system variable. The following is a brief introduction to an add method. In ` `The second: use the sipeed license server networking activation`, there is a more detailed introduction.\n\n**Windows** User press win+r on the keyboard, enter `cmd` in the pop-up window, click OK to pop up the black command line window, enter the following command, `path_to_the_file` is your `gowin_Synplifypro.lic Path of `.\n\n```\nsetx LM_LICENSE_FILE path_to_the_file\n```\n\n**Second: Network activation with license server using sipeed**\n\nThis method is simple to configure, but you can't use the software without a network.\n\nAfter downloading the software, the software will prompt you for a licence. Fill in the server address `45.33.107.56` in the pop-up box, IDE port: 10559.\n\n![3-6](./../assets/lic_remote_1.png)\n\nThe activation of the synopsys advanced function requires adding the environment variable `LM_LICENSE_FILE=27020@45.33.107.56` to the system.\n\n**Windows** User presses win+r on the keyboard, enter `cmd` in the pop-up window, click OK to pop up the black command line window, enter the following command.\n\n```\nsetx LM_LICENSE_FILE 27020@45.33.107.56\n```\n\nWindows can be added in addition to the command line. You can also add it by right-clicking Computer->Properties->Environment Variables and then adding it as shown below.\n\n![3-7](./../assets/lic_remote_2.png)\n\n**Linux** users need to add in `~/.bashrc`\n\n```\nExport LM_LICENSE_FILE 27020@45.33.107.56\n```\n\nAfter entering the IDE, click on `Synplify Pro` in Tools.\n\n![3-8](./../assets/lic_remote_3.png)\n\nThen the interface will pop up as shown below. At this time, you need to wait for a short time. After the license is initialized, you can use it.\n\n![3-9](./../assets/lic_remote_4.png)\n\n# Instructions\n\nRefer to the official documentation [Gowin Source Software User Guide] (http://cdn.gowinsemi.com.cn/SUG100-1.8_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf), Chapter 5 Cloud Source Software Usage.\n\n# Reference document\n\n+ [Gowin Software Introduction and Installation](http://cdn.gowinsemi.com.cn/%E9%AB%98%E4%BA%91%E8%BD%AF%E4%BB%B6%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85.pdf)"}, "/soft/Tang/en/Tang-Nano-Doc/examples/1_led.html": {"title": "Instance process", "content": "# Instance process\n\nNew Project -> Add Source Code File -> Add Timing, Pin Constraints -> Synthesis -> Programe\n\nBefore reading this document, please make sure you have seen [Gowin Cloud Source Software User Guide](http://cdn.gowinsemi.com.cn/SUG100-1.8_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf), Chapter 5 Cloud Source Software Usage\n\nThe source code of this experiment: [https://github.com/sipeed/Tang-Nano-examples/tree/master/example_led](https://github.com/sipeed/Tang-Nano-examples/tree/master/ Example_led)\n\n# Verilog Prerequisites\n\nHere only introduce the relevant syntax that will be used next, more can refer to [Verilog Tutorial](http://www.asic-world.com/verilog/veritut.html)\n\nThe basic design unit of Verilog is the module, and each Verilog program consists of four main parts: port definition, I/O description, internal signal declaration and function definition.\n\nThe module is like the black box we usually mentioned. When we implement the module, we don't need to care about the inside of the module. We only need to instantiate the module according to the input and output format defined by the module, and provide input to the module. Already working\n\na module grows like this\n\n```\nmodule block (input a, output b);\nreg [width-1:0] R_1;\n\nassign b = a;\nalways @(posedge clk or negedge reset_n)\nbegin\n// do something\nend\n\nendmodule\n```\n\nThe overall structure of the module consists of module and endmodule. The module is followed by the definition of the module interface, which declares whether the direction of the port is input or output.\n\nInternal signals are sometimes used inside the module, and the internal signals are of type wire and reg.\n\nThe definition of the function can be done through the assign and always blocks. Assign is one of the most common methods for describing combinatorial logic; always a block machine can be used to describe combinatorial logic, as well as to describe sequential logic\n\n# Pin usage\n\nThe onboard is a RGB(tri-color) LED, the schematic is as follows\n\n![](./../assets/examples/led_pjt_1.png)\n\nThe pin distribution used by the entire program is as follows\n\n| port | I/O | pin | desc |\n| --------- | ------ | --- | ---------- |\n| sys_clk | input | 35 | Clock Input Pin |\n| sys_rst_n | input | 15 | System Reset Foot |\n| led[0] | output | 16 | Green LED |\n| led[1] | output | 17 | Blue LED |\n| led[2] | output | 18 | Red LED |\n\n# Programming\n\nThe clock of this system is 24Mhz, one machine cycle is 1/24M s, which means 0.5s every 12000000 clock cycles.\n\nIn the program, calculate 12000000 clock cycles by counter, and wait for 0.5s. After the time is up, set counter to 0 and change the color of the LED.\n\n```\nmodule led (\n    input sys_clk, // clk input\n    input sys_rst_n, // reset input\n    output reg [2:0] led // 110 G, 101 R, 011 B\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1200_0000) // 0.5s delay\n        counter <= counter + 1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 3'b110;\n    else if (counter == 24'd1200_0000) // 0.5s delay\n        led[2:0] <= {led[1:0], led[2]};\n    else\n        led <= led;\nend\n\nendmodule\n```\n\n# Pin constraint\n\nIn order for fpga to implement the function of the code, it is also necessary to constrain the pin operations involved in the code to the actual pins of fpga.\n\nAs shown below, click process in the workspace on the left, then double-click FloorPlanner\n\n![](./../assets/examples/led_pjt_2.png)\n\nThe first click in the project, you may be prompted to create a file, click OK\n\nIn the pop-up window, switch to Package View, drag the port under Ports to the corresponding pin of fpga, save it, as shown below\n\n![](./../assets/examples/led_pjt_3.png)\n\n# Synthesis\n\nIn the workspace on the left, right-click Synthesize or Place&Route, there will be a run option, click\n\n![](./../assets/examples/led_pjt_4.png)\n\n# Programe\n\nThere are two options, one is to burn to sram, the other is to burn to flash.\n\nBurning to sram is faster, but there is no firmware in fpga after power-off; burning to flash can save the firmware before burning after the system is powered off.\n\nBurning is done through the Programer\n\nDouble-click on the Program Device in the left workspace to open the Programer.\n\n![](./../assets/examples/led_pjt_5.png)\n\nHowever, before using Programer, you need to be aware that you can use Programer after both Synthesize and Place&Route are completed, otherwise the software will report error `Bitstream file dose not exists`\n\n![](./../assets/examples/led_pjt_6.png)\n\nLinux users need to pay attention\n\n> The programmer in the Linux installation package is for Linux version Red Hat 5.10. For the Red Hat 6/7 version of the programmer, please download the installation on the official website and replace the installation package with the file in the Gowin cloud source software installation package. Clip \"Programmer\".\n\n## Change the burning position\n\nTo select the location where the firmware is programmed, you can click Edit -> Configure Device when the chip is selected.\n\n![](./../assets/examples/led_pjt_7.png)\n\nIn the pop-up window, select the location you want to burn. The flash is selected here. The default burning location is sram.\n\n![](./../assets/examples/led_pjt_8.png)\n\n## Burning\n\nAfter selecting the burning location, you can burn the firmware, click on the menu bar to burn.\n\n![](./../assets/examples/led_pjt_9.png)"}, "/soft/Tang/en/Tang-Nano-Doc/examples/2_lcd.html": {"title": "", "content": "RGB LCD example\n\n# Introduce timing first\n\nThe principle of RGB LCD display image is similar to that of VGA. It is to digitally generate the image information to be displayed inside the computer, and then convert the image information of these numbers into RGB three primary color analog signals through analog-to-digital conversion. Field sync signal.\n\nThe timing of VGA is introduced below.\n\n![](./../assets/examples/lcd_pjt_1.png)\n\nThe above figure is the line synchronization and field synchronization timing of VGA in data transmission.\n\nAs can be seen from the timing diagram, whether a line of data or a column of data is required, a synchronization (sync) signal is required, and the transmission of data needs to be completed between the pulses of the two synchronization signals.\n\nThe data for each line includes the back porch, active viedo, and front porch.\n\nThe valid data is the resolution we often say, and the parameters of the leading and trailing edges need to be set with reference to the specific resolution and number of frames. The relevant parameters can refer to the typical parameters, and the link is here: http://www.tinyvga.com /vga-timing\n\nThe control timing of this screen is slightly different. You can view the [Specifications] (../../assets/files/AT050TN43.pdf)\n\nScreenshots of LCD related timing are provided below\n\n![](./../assets/examples/lcd_pjt_2.png)\n\n![](./../assets/examples/lcd_pjt_3.png)\n\nThe above picture is the parameter table in the timing, and the following picture is the timing chart.\n\nAs seen from the timing diagram, this screen can be set without the front and rear edges, and only the blanking time can be set. It can be proved by the actual program that both methods are possible.\n\n# Verilog implementation\n\n## 1.pll\n\nThe onboard crystal clock is 24MHz, but our screen requires a 33.3MHZ clock, so we need to use pll to generate the clock we need.\n\nNeed to use `IP Core Generate` here, located in Tools -> IP Core Generate\n\n![](./../assets/examples/lcd_pjt_4.png)\n\nDouble-click `PLL`, select Verilog in the pop-up window language, CLKIN is 24MHz, CLKOUT is 200MHz, CLKOUTD should select Enable, then generate clock is 33.33MHz, Tolerance selects 0.2%\n\n![](./../assets/examples/lcd_pjt_5.png)\n\n## 2.osc\n\nThe system clock can be provided by an external clock or by using an OSC generated clock.\n\nAlso use `IP Core Generate`\n\nFind `OSC` and double-click to open the settings for crossover.\n\nAs you can see on the help page, the OSC of the GW1N-1 series fpga is divided from 240MHz, so to generate a 24MHz clock, only need to divide by 10\n\n## 3.lcd timing generation\n\n```\nlocalparam V_BackPorch = 16'd6; //0 or 45\nlocalparam V_Pluse = 16'd5;\nlocalparam HightPixel = 16'd480;\nlocalparam V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam H_BackPorch = 16'd182; //NOTE: When the high pixel clock is used, increase the delay here to facilitate the K210 to join the interrupt.\nlocalparam H_Pluse = 16'd1;\nlocalparam WidthPixel = 16'd800;\nlocalparam H_FrontPorch= 16'd210;\n\nlocalparam PixelForHS = WidthPixel + H_BackPorch + H_FrontPorch;\nlocalparam LineForVS = HightPixel + V_BackPorch + V_FrontPorch;\n```\n\nThe first is to set the timing related parameters: leading edge, trailing edge, effective pixels\n\nRegarding the display leading edge and trailing edge, as mentioned earlier, it can be combined into one erasing time, that is, one can be set to 0 and the other to the erasing time. Anyway, the time between the front and the back adds up to meet the time requirements in the table.\n\n```\nalways @( posedge PixelClk or negedge nRST ) begin\n    if( !nRST ) begin\n        LineCount <= 16'b0;\n        PixelCount <= 16'b0;\n        end\n    else if( PixelCount == PixelForHS ) begin\n        PixelCount <= 16'b0;\n        LineCount <= LineCount + 1'b1;\n        end\n    else if( LineCount == LineForVS ) begin\n        LineCount <= 16'b0;\n        PixelCount <= 16'b0;\n        end\nend\n\n/ / Note the HSYNC and VSYNC negative polarity here\nassign LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) 1'b0 : 1'b1;\nassign LCD_VSYNC = ((( LineCount >= V_Pluse )&&( LineCount <= (LineForVS-0) )) ) ) 1'b0 : 1'b1;\n```\n\nThis code generates a sync signal. It should be noted that the sync signal of this screen is negative polarity enabled.\n\n```\nassign LCD_DE = ( ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 )) ? 1'b1 : 1'b0;\n                    //This is not minus one, it will shake\n```\n\nThis code sets the LCD to enable image display. This screen needs to control one pin to be used as a display switch. The actual signal is set when the 800*480 data is valid for transmitting images.\n\n```\nassign LCD_R = (PixelCount<200)? 5'b00000 :\n                    (PixelCount<240 ? 5'b00001 :\n                    (PixelCount<280 ? 5'b00010 :\n                    (PixelCount<320 ? 5'b00100 :\n                    (PixelCount<360 ? 5'b01000 :\n                    (PixelCount<400 ? 5'b10000 : 5'b00000 )))));\n\nassign LCD_G = (PixelCount<400)? 6'b000000 :\n                    (PixelCount<440 ? 6'b000001 :\n                    (PixelCount<480 ? 6'b000010 :\n                    (PixelCount<520 ? 6'b000100 :\n                    (PixelCount<560 ? 6'b001000:\n                    (PixelCount<600 ? 6'b010000:\n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign LCD_B = (PixelCount<640)? 5'b00000 :\n                    (PixelCount<680 ? 5'b00001 :\n                    (PixelCount<720 ? 5'b00010 :\n                    (PixelCount<760 ? 5'b00100 :\n                    (PixelCount<800 ? 5'b01000 :\n                    (PixelCount<840 ? 5'b10000 : 5'b00000 )))));\n```\n\nThis code is used to generate test data for the LCD to produce a color bar display.\n\n```\nVGAMod D1\n(\n    .CLK ( CLK_SYS ),\n    .nRST ( nRST ),\n\n    .PixelClk ( CLK_PIX ),\n    .LCD_DE ( LCD_DEN ),\n    .LCD_HSYNC ( LCD_HYNC ),\n    .LCD_VSYNC ( LCD_SYNC ),\n\n    .LCD_B ( LCD_B ),\n    .LCD_G ( LCD_G ),\n    .LCD_R ( LCD_R )\n);\n```\n\nFinally, instantiate in TOP\n\nThe entire project can be found at [https://github.com/sipeed/Tang-Nano-examples/tree/master/example_lcd](https://github.com/sipeed/Tang-Nano-examples/tree/master/example_lcd)download"}, "/soft/Tang/en/Tang-Nano-Doc/index.html": {"title": "Tang Nano Document", "content": "Tang Nano Document\n======\n\n<div class=\"title_pic\">\n    <!-- <img src=\"../assets/sipeed_longan_logo.jpg\" height=\"60\"> -->\n    <img src=\"./assets/icon_sipeed2.png\"  height=\"60\">\n</div>\n\n\n## What is Tang Nano? \n\nThe Lichee Tang Nano is a compact development board based on the GW1N-1 FPGA from the Gaoyun Little Bee series.\n\nThe onboard chip is GW1N-LV1QN48C6/I5, equipped with 1152 LUT4 logic resources, 1 PLL and 4 Block total 72Kbit SRAM, packaged as QFN48. The development board brings out all I/O interfaces for the design and experimentation of small digital logic.\n\nOnboard 64Mbits PSRAM provides a rich storage resource for FPGAs.\n\nAt the same time, the development board has an RGB interface that can be connected to peripherals such as LCD screens and VGA converters, making it ideal for applications such as screen displays.\n\nThe board's onboard 24MHz crystal and USB to JTAG downloader make it easy to connect to a PC for development without the need for an external debugger and clock input. The onboard RGB LEDs can be used for indication and debugging, while the FPGA IOBANK group's adjustable IO levels allow the development board to easily interface with externally different level specifications.\n\n**Onboard resources:**\n\n+ GW1N-1\n+ 64Mbit QSPI PSRAM\n+ RGB LED\n+ RGB LCD 40P interface and drive circuit\n+ 24MHz crystal\n+ USB debugger, based on Type-C communication interface\n\n## Pinout Diagram\n\n![](./assets/tang_nano_pinout_v1.0.0_w5676_h4000_large.png)\n\n## Resource download link\n\n+ [GoWin official download station](http://www.gowinsemi.com.cn/faq.aspx)\n+ [dl Download station](http://dl.sipeed.com/TANG/Nano)\n+ [Tang nano Schematic.](http://dl.sipeed.com/TANG/Nano/HDK/)"}, "/soft/Tang/en/content/_index.cn.html": {"title": "Tang Primer Documentation", "content": "---\ntitle: Tang Primer Documentation\n---\n\n# Tang Primer Docs\n\nTang Primer, an extremely polished domestic open source RISC-V development board.\n\nLitchi sugar was born in the tide of domestic chip oscillations. After three months of growth and transformation, it finally reached the stage of open source in July 2018.\n\nLitchi sugar not only takes on the expectations of open source developers, but also promotes the development and education related to RISC-V architecture in China, and introduces an excellent development board in China to the world.\n\n![Tang](./images/tang.jpg)"}, "/soft/Tang/en/content/dev-guide/using-yosys/_index.en.html": {"title": "\"Using Yosys with Tang Primer\"", "content": "---\ntitle: \"Using Yosys with Tang Primer\"\ndate: 2019-03-10T15:51:32+05:30\n---\n\nThe Yosys now support Verilog synthesis for Anlogic's FPGA. Although support is partial, it progressing towards having full synthesis support.\n\n### Prerequisites\n\nFor Ubuntu Linux 16.04 LTS the following commands will install all prerequisites for building yosys:\n\n```\nsudo apt-get install build-essential clang bison flex \\\n\tlibreadline-dev gawk tcl-dev libffi-dev git \\\n\tgraphviz xdot pkg-config python3\n```\n\n### Download Yosys from Github\n\nClone the Yosys repository from Github.\n\n```\ngit clone https://github.com/YosysHQ/yosys.git\n```\n\n### Build and Install Yosys\n\nTo build Yosys simply type 'make' in this directory.\n\n```\nmake\nmake test\nsudo make install\n```\n\n### Compile the Anlogic Demo\n\nWe are going to compile an Anlogic example from Yosys examples directory.\n\n### Setup TD environment for demo\n\nFor Place and Route, we still need Official TD tools.\n\nset `TD_HOME` env variable to the full path to the TD <TD Install Directory> as follow.\n\n```\nexport TD_HOME=<TD Install Directory Path>\n```\n\nFinally, we are ready to build our demo.\n\n```\ncd examples/anlogic/\nbash build.sh\n```\nThis build will produce demo.bit that can be download into Tang Primer via TD Download tool."}, "/soft/Tang/en/content/dev-guide/_index.en.html": {"title": "", "content": "+++\ntitle = \"Developer Guide\"\ndate = 2019-02-25T13:53:55+05:30\nweight = 9\nchapter = true\npre = \"<b>5. </b>\"\n+++\n\n### Chapter 5\n\n# Developer Guide\n\nHere we’ll cover topics related to RISC-V and Tang Primer FPGA platform development.\n\n1. [Buinding RISC-V SoftCore](/en/dev-guide/building-rv-core)\n2. [Using Yosys with Tang Primer](/en/dev-guide/using-yosys)"}, "/soft/Tang/en/content/dev-guide/building-rv-core/_index.en.html": {"title": "\"Buinding RISC-V SoftCore\"", "content": "---\ntitle: \"Buinding RISC-V SoftCore\"\ndate: 2019-03-10T15:52:29+05:30\n---"}, "/soft/Tang/en/content/getting-started/Getting-to-Blinky/Getting-to-Blinky.html": {"title": "Getting to Blinky", "content": "---\ntitle: Getting to Blinky\ndate: 2019-02-15T19:23:03+05:30\ndraft: false\n---\n\nThe Blinky example is good way to test the setup. The following example will blink the Tang Primer's onboard RGB LED.\n\nGet the blinky example code from github.com \n\n```\ngit clone https://github.com/Lichee-Pi/Tang_FPGA_Examples\n\n```\n\n> You will need [**git**](https://git-scm.com/) for the above command to work.\n\n\nRun TD IDE in GUI mode\n\n```\n$ td -gui\n```\n\n## Open the Blinky example.\n\nIn the Menubar goto **Project -> Open Project** or use the shortcut key **Ctrl+Alt+O**.\n\n![Open project](./images/a.png \"Open project\")\n\nSelect the Project file **Tang_FPGA_Examples/0.LED/prj/led.al** in Open Dialog.\n\n![Open project dialog](./images/b.png \"Open project dialog\")\n\n## Generate the Bitstream file.\n\nClick on the **Run** icon to start the compilation process.\n\n![Start Compilation](./images/c.png \"Start Compilation\")\n\nIf the compilation is successful you will see the Console log as shown in picture below.\n\n![Console log](./images/d.png \"Console log\")\n\n## Download Bitstrean to Tang Primer.\n\nPlug in your Tang Primer board to USB and click on **Download** icon to open the Download dialog. \n\n![Open Download box](./images/d1.jpg \"Open Download box\")\n\nMake sure your device detacted by TD IDE. Add generated bitstream file by clicking on **Add** button.\n\n![Open Bitstream](./images/e.png \"Open Bitstream\")\n\n\n> If you can't see your device, try refreshing it by clicking on the **Refresh** button.\n\n\nSelect the Bitstream file **Tang_FPGA_Examples/0.LED/prj/led.bit** in the Downloading & Programming dialog, then click the **Open** button. (You may also double-click on **led.bit** to automatically open it.)\n\n![Open Bitstream dialog](./images/f.png \"Open Bitstream dialog\")\n\nClick on the **Run** button to start the download process.\n\n![Start download](./images/g.png \"Start download\")\n\n\n> Due to some unknown bug, JTAG only works with 400kbps or lower speed on Linux.\n\n\nWait for Download progress to reach 100%.\n\n![Download progress](./images/h.png \"Download progress\")"}, "/soft/Tang/en/content/getting-started/installing-TD-IDE/linux.html": {"title": "Install on Linux", "content": "---\ntitle: Install on Linux\ndate: 2019-02-15T19:16:47+05:30\ndraft: false\n---\n\nOnce you have downloaded the installer archive, open Terminal and cd into that directory.\n\n```\ncd <path to installer archive directory>\n```\n\n{{% notice note %}}\nIn this section, you will need **sudo** privileges.\n{{% /notice %}}\n\nThe /opt directory is reserved for all the software and add-on packages that are not part of the default installation. Create a directory for your TD IDE installation.\n\n```\nsudo mkdir /opt/TD_DECEMBER2018\n```\n\nand extract TD into the /opt/TD_DECEMBER2018 directory:\n\n```\nsudo tar -xvf TD_DECEMBER2018_GOLDEN_RHEL.tar.gz -d /opt/TD_DECEMBER2018/\n```\n\nCreate an ``/usr/bin/td`` executable by creating a new symbolic link from the ``/opt/TD_DECEMBER2018/bin/td``\n\n```\nsudo ln -s /opt/TD_DECEMBER2018/bin/td /usr/bin/td\n```\n\nRun TD IDE in GUI mode\n\n```\n$ td -gui\n```\n![TD GUI Mode](./../installing-USB-Driver/linux/87078310026779781.jpg \"Tang Dynasty SDK in GUI Mode.\")\n\nCongratulations, you have installed the TD IDE on Linux."}, "/soft/Tang/en/content/getting-started/installing-TD-IDE/windows.html": {"title": "Install on Windows", "content": "---\ntitle: Install on Windows\ndate: 2019-02-15T19:16:37+05:30\ndraft: false\n---\n\nOnce you have downloaded the installer, open it and you will see a welcome screen.\n\n![welcome](./images/a.png \"Welcome screen\")\n\nOn this screen you can choose where you want to install TD IDE. By default it installs to C:\\Anlogic\\TD4.3.633\\\n\n![Install location](./images/b.png \"Install location\")\n\nClick next, and the installer will begin copying the files it needs to install TD IDE.\n\n![Install process](./images/c.png \"Install process\")\n\nWhen it's finished installing you should see this following screen. Click Finish to complete the installation.\n\n![Install finish](./images/d.png \"Install finish\")\n\nGo to start menu and click on TD icon to start the IDE.\n\n![TD in Menu](./images/e.png \"TD in Menu\")\n\n![TD IDE welcome screen](./images/f.png \"TD IDE welcome screen\")\n\nCongratulations, you have installed the TD IDE on windows."}, "/soft/Tang/en/content/getting-started/installing-USB-Driver/linux.html": {"title": "Install TD driver on Linux", "content": "---\ntitle: Install TD driver on Linux\ndate: 2019-02-15T19:21:27+05:30\ndraft: false\n---\n\n## Check for default linux driver\n\nInsert Tang Primer into your computer and execute lsusb to see the information. Make sure USB VID:PID is `0547:1002` as shown in image below.\n\n![lsusb](./linux/237929105611360081.jpg \"Check for default linux driver.\")\n\n## Create a new udev rule file\n\nSet udev rules to enable Tang Primer to be accessed by the plugdev group\n\nExecute the following command in terminal to create a new udev rules file.\n\n```\nsudo nano /etc/udev/rules.d/91-anlogic-jtag.rules\n```\nCopy the following code into text editor and save it, as shown in following image.\n\n```toml\nSUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0547\", ATTRS{idProduct}==\"1002\", \\\n  GROUP=\"plugdev\", \\\n  MODE=\"0660\"\n```\n![udev edit](./linux/572316008299057820.jpg \"Create a new udev rule file.\")\n\nExecute the following command in terminal to restart the udev service.\n\n```\nsudo service udev restart\n```\n\n## Check if device detected by Tang Dynasty IDE\n\nGo to `<TD installation directory>/bin/` and execute the following command to open TD IDE in GUI mode.\n\n```\n./td -gui\n```\nClick on Download buttion as shown in following image.\n\n![TD GUI Mode](./linux/87078310026779781.jpg \"Tang Dynasty SDK in GUI Mode.\")\n\nPlugin Tang Primer into your computer and hit Refresh buttion on Download Dialog box.\n\n![TD Download Dialog](./linux/1823555291194601.jpg \"Bitstream Download Dialog\")\n\n\n> Due to some unknown bug, JTAG only works with 400kbps or lower speed.\n\n\nCongratulations, you have setup the TD driver on Linux."}, "/soft/Tang/en/content/getting-started/installing-USB-Driver/windows.html": {"title": "\"Install TD driver on Windows\"", "content": "---\ntitle: \"Install TD driver on Windows\"\ndate: 2019-02-15T19:21:19+05:30\ndraft: false\n---\n\n## Check for default windows driver\n\nInsert Tang Primer into your computer and open Device Manager to see the information. It may be named `WinUsb Device` or `USB-JTAG-Cable` depending on the Windows version. Make sure USB VID:PID is `0547:1002`.\n\n![device manager](./windows/no_driver.png \"Check for default windows driver.\")\n\n![device manager win10](./windows/no_driver_win10.png \"Check for default windows 10 driver.\")\n\n## Install drivers (Windows 7)\n\nDouble click on `WinUsb Device` to select update driver\n\n![update driver 1](./windows/update_driver1.png \"Update driver step 1\")\n\n![update driver 2](./windows/update_driver2.png \"Update driver step 2\")\n\nBrowse the folder and select the driver directory under the `TD installation directory`. Click OK to start the installation.\n\n![Choose driver folder](./windows/choosefolder.png \"Choose driver folder\")\n\nThe installation is successful and can be seen in the device manager.\n\n![Install success](./windows/installsuccess.png \"Install success\")\n\n## Install drivers (Windows 10)\n\n> Before installing the driver itself, make sure you [disable driver signature enforcement](https://social.technet.microsoft.com/wiki/contents/articles/51875.windows-10-how-to-install-drivers-which-are-not-digitally-signed.aspx) first, otherwise Windows 10 won't allow you to install the unsigned driver from Anlogic.\n\nDouble click on `USB-JTAG-Cable` to select update driver.\n\n![update driver 1](./windows/update_driver1_win10.png \"Update driver step 1\")\n\n![update driver 2](./windows/update_driver2_win10.png \"Update driver step 2\")\n\nBrowse the folder and select the `driver\\win8_10_64` directory under the `TD installation directory`. Click OK. Then click on `Let me pick from a list of available drivers on my computer`.\n\n![Choose driver folder](./windows/choosefolder_win10.png \"Choose driver folder\")\n\nClick on `Have Disk...`, then select the directory you selected in the last step, then click OK.\n\n![Install from disk](./windows/install_from_disk_win10.png \"Install from disk\")\n\nNow select the `Anlogic usb cable v0.1` in the driver list and click Next to start the installation.\n\n![Select driver](./windows/select_driver_win10.png \"Select driver\")\n\nThe installation is successful and can be seen in the device manager.\n\n![Install success](./windows/installsuccess.png \"Install success\")\n\n## Check if device detected by Tang Dynasty IDE\n\nClick on Download button as shown in following image.\n\n![TD GUI Mode](./linux/87078310026779781.jpg \"Tang Dynasty SDK in GUI Mode.\")\n\nPlugin Tang Primer into your computer and hit Refresh buttion on Download Dialog box.\n\n![TD Download Dialog](./linux/1823555291194601.jpg \"Bitstream Download Dialog\")\n\nCongratulations, you have setup the TD driver on Windows."}, "/soft/Tang/en/content/getting-started/requirements.html": {"title": "Requirements", "content": "---\ntitle: Requirements\n---\n\nThanks to the simplicity of Tang Dynasty FPGA development environment, Tang Primer needs very few things to get started.\n\n## Getting the Tang Dinasty IDE\n\nJust download the latest version of Tang Dynasty IDE for your OS (Windows, Linux) from [here](http://dl.sipeed.com/TANG/Primer/IDE): it’s that simple.\n\n## Getting Example Code\n\nTang Primer comes with a lot of examples. They can be downloaded from [here](https://github.com/Lichee-Pi/Tang_FPGA_Examples).\n\n## Other Resources\n\nTD IDE user manual and Datasheet in English can be found [here](https://github.com/kprasadvnsi/Anlogic_Doc_English)"}, "/soft/Tang/en/content/faq/_index.en.html": {"title": "", "content": "+++\ntitle = \"TroubleshootingFAQ\"\ndate = 2019-02-25T13:54:07+05:30\nweight = 10\nchapter = true\npre = \"<b>6. </b>\"\n+++\n\n### Chapter 6\n\n# Some Chapter title\n\nLorem Ipsum."}, "/soft/Tang/en/content/risc-v-core/picorv32/_index.en.html": {"title": "\"PicoRV32 Core\"", "content": "---\ntitle: \"PicoRV32 Core\"\ndate: 2019-02-23T13:51:40+05:30\nweight: 6\ndraft: false\n---"}, "/soft/Tang/en/content/risc-v-core/_index.en.html": {"title": "", "content": "+++\ntitle = \"Working with RISC-V\"\ndate = 2019-02-23T13:44:08+05:30\nweight = 8\nchapter = true\npre = \"<b>4. </b>\"\n+++\n\n### Chapter 4\n\n# Working with RISC-V\n\nHere you can learn more about different RISC-V Implementations ported to Tang Primer board. This chapter covers the basics of using these RV cores and some examples to get you started on awesome RISC-V ISA.\n\n1. [Hummingbird Core](/en/risc-v-core/hummingbird)\n2. [PicoRV32 Core](/en/risc-v-core/picorv32)"}, "/soft/Tang/en/content/risc-v-core/hummingbird/_index.en.html": {"title": "\"Hummingbrid Core\"", "content": "---\ntitle: \"Hummingbrid Core\"\ndate: 2019-02-23T13:51:21+05:30\nweight: 5\ndraft: false\n---\n\n## Download the SDK\n\nWe have assembled an All-In-One SDK that includes SiRV-SDK Toolchain, and OpenOCD. You can download the SDK from given link below.\n\n<i class=\"fas fa-download\"></i> [sirv-e-sdk.tar.lrz](https://github.com/kprasadvnsi/tang-doc/releases/download/1.0.0/sirv-e-sdk.tar.lrz)\n\n## Configuring the working environment\n\nExtract the downloaded archive to the current working directory.\n\n```\nlrzuntar sirv-e-sdk.tar.lrz \n```\n\n\n> You will need **lrzip** for the above command to work. Install it using the following command.\n> `sudo apt-get install lrzip`\n\n\n## Compile the demo program\n\nWe are going to Compile a GPIO demo that Blinks the Onboard LED on Tang Primer.\n\nUse the following cammand to compile the Demo.\n\n```\ncd sirv-e-sdk\n\nmake software PROGRAM=demo_gpio BOARD=sirv-e203-lichee\n```\n\n## Upload Demo to the board\n\nWe need to first setup proper permissions to access USB Debugger.\n\nAdd your username to plugdev group. Replace `<username>` with your present working system's username.\n\n```\nsudo usermod -a -G plugdev <username>\n```\n\nSet udev rules to enable Tang Primer to be accessed by the plugdev group,\n\nExecute the following command in terminal to create a new udev rules file.\n\n```\nsudo nano /etc/udev/rules.d/45-dt2232.rules\n```\nCopy the following code into the text editor and save it, as shown in the following image.\n\n```\nSUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6010\", \\\n  GROUP=\"plugdev\", \\\n  MODE=\"0660\"\n```\n\nExecute the following command in terminal to restart the udev service.\n\n```\nsudo service udev restart\n```\n\nPress `ctrl+x` to save the file\n\nConnect Tang Primer with RV Debugger as shown below.\n\n|   Tang Primer   | RV Debugger |\n| --------------- | ----------- |\n| U0_RX (Pin H13) | TX          |\n| U0_TX (Pin J13) | RX          |\n| E_TMS (Pin C9)  | TMS         |\n| E_TDI (Pin B6)  | TDI         |\n| E_TCK (Pin C5)  | TCK         |\n| E_TDO (Pin A4)  | TDO         |\n| GND   (Pin G)   | GND         |\n\n\n> Pin locations on the Tang board can be found in [Pinout Diagram](/en/hardware-overview/lichee-tang/#pinouts).\n\n\nExecute the following command in “sirv-e-sdk” folder to upload demo into the board.\n\n```\nmake upload PROGRAM=demo_gpio BOARD=sirv-e203-lichee\n```\n\n## Debugging the Demo\n\nOpenOCD provides us a nice way to debug our programs.\n\nRun the OpenOCD GDB server with the following command and leave it running.\n\n```\nmake run_openocd PROGRAM=demo_gpio BOARD=sirv-e203-lichee\n```\n\nIn the other Terminal run the following command to debug your code using familiar GDB Debugger.\n\n```\nmake run_gdb PROGRAM= demo_gpio BOARD=sirv-e203-lichee\n```"}, "/soft/Tang/en/content/using-tang/using-lcd/_index.en.html": {"title": "\"Using LCD display\"", "content": "---\ntitle: \"Using LCD display\"\ndate: 2019-02-15T20:16:10+05:30\nweight: 7\ndraft: false\n---"}, "/soft/Tang/en/content/using-tang/using-gpio/using-gpio.html": {"title": "Using Tang's GPIO", "content": "---\ntitle: Using Tang's GPIO\ndate: 2019-02-15T20:14:28+05:30\nweight: 5\ndraft: false\n---\n\n## Create a new project\n\nIn the Menubar goto **Project -> New Project** or uses the shortcut key **Ctrl+Alt+P**.\n\nFill in the **Project Name** and **Project Path** fields. Note that you may create a new directory (such as \"gpio_test\") by clicking on **Browse** and then clicking on the **Create New Folder** icon in the \"choose a directory\" window. It's generally recommended to keep each project in its separate directory.\n\nSelect **Device Family** and **Device Name** for Tang Primer as shown below. When done, click **OK**.\n\n![New Project](./images/a.png)\n\n## Create a new HDL source file.\n\nRight-click on **Hierarchy** and click on **New Source** to make a new HDL source file.\n\n![O](./images/b.png)\n\nSelect the HDL **File Type** and enter a source file name in the **File Name** field. Check **Add To Project** to add this file to your project. Click **OK**.\n\n![O](./images/c.png)\n\n**Copy** the following code into a text editor and **Save** it, as shown in the following image.\n\n```toml\nmodule gpio_main\n\t(\n\t\tinput wire RST_N,\n\t\toutput wire R_LED\t\n\t);\n\nassign R_LED = RST_N;\n\nendmodule\n```\n\n![O](./images/d.png \"O\")\n\nNow we need to assign physical Pins to our IO ports. In the **FPGA Flow** pane, if there is a \"+\" to the left of **User Constraints**, click on the \"+\" to show the **IO Constraint** and **SDC Constraint** items. Double click on **IO Constraint** to open the IO Constraint Dialog.\n\n![O](./images/e.png \"O\")\n\nSelect the **IO Bank** and **Pin Location** for Tang's onboard LED and Button then save it as an adc file in the project.\n\n![O](./images/f.png \"O\")\n![O](./images/g.png \"O\")\n\nClick on **Run** Icon to start the compilation process.\n\n![O](./images/h.png \"O\")\n\nPlugin your Tang Primer board to USB and click on **Download** icon to open Download Dialog. \n\n![Open Download box](./../../getting-started/Getting-to-Blinky/images/d1.jpg \"Open Download box\")\n\nMake sure your device detected by TD IDE. Add generated bitstream file by clicking on the **Add** button. Click on the **Run** button to start the download process.\n\n![O](./images/i.png \"O\")\n\nDownload the Bitstream into SPI Flash to make your design run after a power reset. \n\n![O](./images/j.png \"O\")"}, "/soft/Tang/en/content/using-tang/using-microSD/_index.en.html": {"title": "\"Using MicroSD Card\"", "content": "---\ntitle: \"Using MicroSD Card\"\ndate: 2019-02-15T20:15:43+05:30\nweight: 6\ndraft: false\n---"}, "/soft/Tang/en/content/using-tang/builtin-sdram/_index.en.html": {"title": "\"Using Built-in SDRAM\"", "content": "---\ntitle: \"Using Built-in SDRAM\"\ndate: 2019-02-15T20:15:08+05:30\nweight: 9\ndraft: false\n---"}, "/soft/Tang/en/content/using-tang/_index.en.html": {"title": "", "content": "+++\ntitle = \"Using Tang Primer\"\ndate = 2019-02-15T17:21:34+05:30\nweight = 7\nchapter = true\npre = \"<b>3. </b>\"\n+++\n\n### Chapter 3\n\n# Using Tang Primer\n\nHere you can find basics of using Tang Primer and it's peripherals. Learn with small examples on every step of the way.\n\n1. [Using Primer's GPIO](/en/using-tang/using-gpio)\n2. [Using MicroSD Card](/en/using-tang/using-microsd)\n3. [Using LCD display](/en/using-tang/using-lcd)\n4. [Using Camera Module](/en/using-tang/using-camera)\n5. [Using Built-in SDRAM](/en/using-tang/builtin-sdram)"}, "/soft/Tang/en/content/using-tang/using-camera/_index.en.html": {"title": "\"Using Camera Module\"", "content": "---\ntitle: \"Using Camera Module\"\ndate: 2019-02-15T20:16:04+05:30\nweight: 8\ndraft: false\n---"}, "/soft/Tang/en/content/contribute/_index.en.html": {"title": "", "content": "+++\ntitle = \"Contribute\"\ndate = 2019-02-25T13:54:24+05:30\nweight = 11\nchapter = true\npre = \"<b>7. </b>\"\n+++\n\n### Chapter 7\n\n# Some Chapter title\n\nLorem Ipsum."}, "/soft/Tang/en/content/hardware-overview/lichee-tang.html": {"title": "Tang Primer board", "content": "---\ntitle: Tang Primer board\ndate: 2020-06-09T09:26:04+02:00\nweight: 5\ndraft: false\n---\n\n## The Tang Primer at a Glance\n\n![Tang Primer at a Glance](./images/TANG_DD.jpg \"Tang Primer at a Glance\")\n\nTang Primer uses Anlogic's EG4S20 as the core unit, 20K logic unit (LUT4/LUT5 hybrid architecture), approximately 130KB SRAM, built-in 32bit bit width 64MBit SDRAM, rich LVDS pin, built-in 12-bit 1MSPS ADC This provides unlimited possibilities for Tang Primer:\n\n## Tang Primer features\n\n+ FPC40P socket, can be connected to RGB LCD, VGA adapter board, high speed DAC module.\n+ FPC24P socket, can be connected to DVP camera, high speed ADC module.\n+ Resistive touch screen controller for I2C interface, used with RGB LCD.\n+ 3-channel DCDC power supply chip, stable and efficient power supply, independent adjustment of Bank0 IO level.\n+ FPGA configuration Flash, 8Mbit User Flash, nor/nand optional.\n+ Onboard FPGA JTAG Download Debugger.\n+ Onboard RGB LED\n+ The adjacent pins LVDS are drawn in the same length, and 8 GCLKs are taken out, and 8 ADCs are all taken out.\n+ The double row pin spacing is 900 mils and is compatible with breadboard development.\n+ The half hole leads to an additional 40 IO and the entire board leads to 130+ IO.\n\n## Pinouts\n\nPinout for **New** Tang Primer Board.\n\n![Tang Primer at a Glance](./images/newtang_pinout.png?width=45pc \"Tang Primer at a Glance\")\n\nPinout for **Old** Tang Primer Board.\n\n![Tang Primer at a Glance](./images/E203_pin.png \"Tang Primer at a Glance\")\n\n## Resources\n\n#### Attachments:\n+ [EG4S20_DataSheet_V1.5_english.pdf](https://github.com/kprasadvnsi/tang-doc/releases/download/1.0.0/EG4S20_DataSheet_V1.5_english.pdf)\n\n+ [Eagle_DataSheet_V2.8_english.pdf](https://github.com/kprasadvnsi/tang-doc/releases/download/1.0.0/Eagle_DataSheet_V2.8_english.pdf)\n\n+ [LicheeTang+RV.pdf](https://github.com/kprasadvnsi/tang-doc/releases/download/1.0.0/LicheeTang+RV.pdf)\n\n+ [sipeed-tang-primer-pins.pdf](https://github.com/kprasadvnsi/tang-doc/releases/download/1.0.0/sipeed-tang-primer-pins.pdf)"}, "/soft/Tang/en/content/hardware-overview/RV-debugger.html": {"title": "\"RV Debugger\"", "content": "---\ntitle: \"RV Debugger\"\ndate: 2019-02-15T20:12:26+05:30\nweight: 8\ndraft: false\n---\n\n![RV Debugger](./images/rvdebugger.jpg \"RV Debugger\")\n\n## Resources\n\n#### Attachments:\n+ [FT2232D(Schematic).pdf](https://github.com/kprasadvnsi/tang-doc/releases/download/1.0.0/FT2232D.Schematic.pdf)"}, "/soft/Tang/en/content/hardware-overview/LCD-display.html": {"title": "LCD Display module", "content": "---\ntitle: LCD Display module\ndate: 2019-02-15T20:12:09+05:30\nweight: 7\ndraft: false\n---\n\n![lcd](./images/lcd.jpg \"lcd\")\n\nThis 5.0” TFT screen comes with 800x480 pixel resolution and an LED backlight. It's great for when you need a lot of space for graphics. These screens are commonly seen in consumer electronics, such as miniature TV’s, car displays, etc. A 40-pin connector has 8 red, 8 green, and 8 blue parallel pins, for 24-bit color capability\n\n## Resources\n\n#### Attachments:\n+ [AT050TN43_V_1_Pre_Ver01_20100511.pdf](https://github.com/kprasadvnsi/tang-doc/releases/download/1.0.0/AT050TN43.V.1.Pre.Ver01.20100511.A050-43-TT-11._201102115899.pdf)"}, "/soft/Tang/en/content/hardware-overview/OV2640-camera.html": {"title": "\"OV2640 Camera Module\"", "content": "---\ntitle: \"OV2640 Camera Module\"\ndate: 2019-02-15T20:11:43+05:30\nweight: 6\ndraft: false\n---\n\n![ov2640](./images/ov2640.jpg \"OV2640 module\")\n\n## Features\n\n+ 2 Megapixel\n+ Array size: UXGA 1600X1200\n+ Power supply: 3.3V\n+ IO voltage level: 1.7V~3.3V DC\n+ Output formats:\n    - YUV(422/420)/YCnCr422\n    - RGB565/555\n    - 8-bit compressed data\n+ Max image transfer rate:\n    - UXGA/SXGA 15fps\n    - UXGA/SXGA 30fps\n    - SVGA 30fps\n    - CIF 60fps\n\n## Resources\n\n#### Attachments:\n+ [2640-XT400G2.pdf](https://github.com/kprasadvnsi/tang-doc/releases/download/1.0.0/2640-XT400G2.pdf)\n\n+ [OV2640-DATASHEET.pdf](https://github.com/kprasadvnsi/tang-doc/releases/download/1.0.0/OV2640-DATASHEET.pdf)"}, "/soft/Tang/en/content/credits.en.html": {"title": "Credits", "content": "---\ntitle: Credits\ndisableToc: true\n---\n\n## Contributors\n\nThanks to them <i class=\"fas fa-heart\"></i> for making Open Source Software a better place !\n\n{{% ghcontributors \"https://api.github.com/repos/kprasadvnsi/tang-doc/contributors?per_page=100\" %}}"}, "/soft/Tang/en/index.html": {"title": "Tang Primer Documentation", "content": "---\ntitle: Tang Primer Documentation\n---\n\n# Tang Primer Docs\n\nTang Primer, an extremely polished open source RISC-V development board.\n\nTang Primer was born in the wake of RISC-V. After three months of development and iterations, it finally releases as an Open Source board in 2018.\n\nTang Primer not only takes on the expectations of open source developers, but also promotes the development and education related to RISC-V architecture in China, and introduces an excellent development board in China to the world.\n\n![Tang](./content/images/tang.jpg)"}}