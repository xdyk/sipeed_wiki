{"/soft/maixduino/zh/libs/ticker.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/sipeed_ov2640.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/wire.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/camera.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/spi.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/sd.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/msa300.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/littlevgl.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/wifiesp.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/ns2009.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/maix_kpu.html": {"title": "", "content": ""}, "/soft/maixduino/zh/index.html": {"title": "Maixduino 文档", "content": "Maixduino 文档\n======\n\n<div class=\"title_pic\">\n    <img src=\"./../assets/arduino.png\" height=\"60\">  <img src=\"./../assets/icon_sipeed_arduino.png\"  height=\"60\">\n</div>\n\n\n\n\n## 什么是 Maixduino\n\n让 Maix 系列的开发板（k210 芯片）支持 Arduino IDE及库， 方便使用大量已有的开源 Arduino 库， 从而快速进行开发和原型验证\n\n## 如何开发\n\nMaixduino支持原始 [Arduino IDE](./get_started/install.html) 的开发，同时也可以选择支持一键调试功能的 [Platform IDE](./get_started/install.html) 开发。"}, "/soft/maixduino/zh/get_started/arduinoide.html": {"title": "", "content": ""}, "/soft/maixduino/zh/get_started/platformio.html": {"title": "安装 platformio 环境", "content": "# 安装 platformio 环境\n\n----\n\n## 在VScode下安装Platformio\n\n1. 下载安装VSCode\n在VScode下，PlatformIO属于扩展组件一部分，只要在Vscode的Extensions中搜索PlatformIO即可点击在线安装\n![](./../../assets/platformIO_1.png)\n安装过程中时间过长，建议科学上网。"}, "/soft/maixduino/zh/get_started/get_hardware.html": {"title": "获得一块开发板", "content": "获得一块开发板\n========\n\n\n\n你可以在Sipeed官方淘宝网店购买到你喜欢的开发板： [Taobao](https://shop365481095.taobao.com/)\n\n\n\n## 获得硬件\n\n### -一块开发板\n\n点击[这里](../hardware/board.html)选择一块开发板\n\n### USB Type C 连接线\n\n![Type-C](../../assets/type_c.png)\n\n选用 Type-C 是因为它支持正反插，对开发十分友好。\n\n从淘宝官方购买可以询问是否附送， 目前大部分安卓机也在使用 Type C 连接线。\n\n### 屏幕\n\n默认使用 st7789驱动芯片的 LCD （24pin接口）， 分辨率为 320x240。\n\n从淘宝官方购买可以询问是否包含。\n\n### 摄像头\n\n默认使用 ov2640。\n\n从淘宝官方购买可以询问是否包含。\n\n\n\n### Micro SD卡 （TF 卡） （可选）\n\n不使用 SD 卡也是可以操作文件的， 在内部 Flash 上已经保留一部分来作为文件系统了，只是 Flash 速度很慢！\n\n为了方便图片文件快速操作，可以选择购买一张 Micro SD 卡，　 MaixPy　内置了 SPI SD卡协议驱动，\n\n购买时尽量选择速度快协议新的 Micro SD 卡， 比如 SD 2代协议， Class10 的内存卡\n\n因为 K210 没有 SDIO 硬件外设， 所以使用了 SPI 来与 SD 卡通信， 当然，市面上的 SD 卡品质参差不齐， SPI 模式不一定都能兼容， 尽量买正规的卡， 实在有需求请自行定制驱动～～\n\n如下图， 左边两张卡 MaixPy 的驱动不支持， 中间和右边的都支持， 但是中间的 class10 卡速度最快\n\n![](../../assets/TF.png)\n\n\n### ST-Link （用来给开发板 Maix Go 上的 STM32 更新固件） （可选）\n\n如果购买的是 `Maix Go`， 上面集成了一颗 `STM32` 芯片， 用来模拟`USB转串口`工具， 以及模拟`JTAG`, 如果想后期自行更新其固件，建议购买一个`ST-Link`备用。\n\n### JTAG 调试器 （可选）\n\n`K210` This chip supports `JTAG` debugging. If you need debugging function, you need to use `JTAG` debugger. Please consult the official `Sipeed` Taobao shop.\n\n`K210` 这款芯片支持`JTAG`调试， 如果需要调试功能， 需要使用`JTAG`调试器， 请在`Sipeed`官方淘宝店咨询购买。\n\n如果是`Maix Go`开发板，可以不用另外购买`JTAG`调试器，`Maix Go`开发板上面集成了一个 `STM32`芯片，可以模拟`JTAG`（`STM32`使用 `CMSIS-DAP`或者`open-ec`固件），`open-ec`固件目前还不支持，后续会支持，请以`open-ec`github 项目主页说明为准。"}, "/soft/maixduino/zh/get_started/install.html": {"title": "安装 Arduino 环境", "content": "安装 Arduino 环境\n================\n\n! 请使用**最新版本**的 Arduino IDE, 旧版本 IDE 无法解析 HTTP301，导致无法正确下载开发板元信息。 \n\n## Linux\n\n### 下载 Arduino IDE\n\nArduino IDE可以在 [官方下载页面](https://www.arduino.cc/en/Main/Software)找到。\n\n### 安装\n\n对于Ubuntu, 在终端执行以下命令：\n\n```shell\nsudo usermod -a -G dialout $(whoami)\nsudo apt install python3 python3-pip\nsudo pip3 install pyserial\n```\n\n注意，设置后你需要**注销** 或者 **重启** ,否则设计不会生效。\n### 在Arduino IDE中添加开发板\n\n* 添加URL\n\n打开 Arduino IDE, 选择 `文件` -> `首选项`, \n\n在`附加开发板管理器网址`中添加以下URL, 如果已经存在，请不要忘记要用逗号分隔。\n\n`http://dl.sipeed.com/MAIX/Maixduino/package_Maixduino_k210_index.json`\n\n如果下载过慢，也可以尝试这个链接。\n\n`http://dl.sipeed.com/MAIX/Maixduino/package_Maixduino_k210_dl_cdn_index.json`\n\n\n![](../../assets/arduino_settings.png)\n\n* 安装开发板工具和库\n\n选择 `工具` -> `开发板` -> `开发板管理器`， 搜索 `Maixduino`, 选择最新版本然后点击 `安装`。\n\n![](../../assets/arduino_board.png)\n\n![](../../assets/maixduino_install.png)\n\n\n### 更改开发板设置\n\n更改开发板设置，在Arduino IDE顶栏中的 `工具`栏下面可以找到。\n* `开发板`:选择你的开发板。\n* `烧录固件`:仅支持Maix GO, 默认 `open-ec`。\n* `烧录波特率`:如果烧录失败请降低波特率。\n* `端口`: 串口端口, e.g. `/dev/ttyUSB0`\n* **`程序员`**: 烧录工具,你 **必须** 选择 **`k-flash`**\n\n![](../../assets/arduino_board.png)\n\n\n\n\n\n## Windows\n\n\n\n### 下载Arduino IDE\n\n[official download page](https://www.arduino.cc/en/Main/Software)\n\n然后双击安装包进行安装\n\n\n### 在 Arduino IDE中添加开发板\n\n* 添加 URL\n\n打开Arduino IDE, 选择 `文件` -> `首选项`, \n\n添加 `附加开发板管理器网址`: \n\n`http://dl.sipeed.com/MAIX/Maixduino/package_Maixduino_k210_index.json` (推荐)\n\n或者\n\n`http://dl.sipeed.com/MAIX/Maixduino/package_Maixduino_k210_dl_cdn_index.json` (如果上面的链接下载过慢，请尝试这个链接)\n\n\n![](../../assets/arduino_settings.png)\n\n* 安装开发板工具和库\n\n选择`工具` -> `开发板` -> `开发板管理器`， 搜索 `Maixduino`, 点击 `安装`\n\n![](../../assets/arduino_board.png)\n\n![](../../assets/maixduino_install.png)\n\n\n### 重新设置开发板\n\n在Arduino IDE顶部的 `工具` 栏中重新设置开发板\n\n* `开发板`:选择你的开发板。\n* `烧录固件`:仅支持Maix GO, 默认 `open-ec`。\n* `烧录波特率`:如果烧录失败请降低波特率。\n* `端口`: 串口端口, e.g. `/dev/ttyUSB0`\n* **`程序员`**: 烧录工具,你 **必须** 选择 **`k-flash`**\n\n![](../../assets/arduino_board.png)"}, "/soft/maixduino/zh/contribute/index.html": {"title": "Contribute to the project", "content": "Contribute to the project\n=======\n\n由于是开源项目，欢迎大家参与进来共同改进Maixduino.\n\nFor a better readable documentation and code we need a code convention (including format, style, etc.)\n\n主要有以下几个方面可以参与进来：\n\n* [文档修改](./doc_convention.html)\n\n* [Code convention](./code_convention.html)"}, "/soft/maixduino/zh/contribute/code_convention.html": {"title": "", "content": "代码规范\n========"}, "/soft/maixduino/zh/contribute/doc_convention.html": {"title": "文档规范", "content": "文档规范\n=======\n\n文档使用 gitbook 进行构建， 并使用简单高效的 Markdown 编写内容\n\n文档源码托管在 [GitHub](https://github.com/sipeed/Maixduino_DOC)\n\n## Markdown 语法\n\nMarkdown 的基础语法如果没接触过， 请花半个小时进行学习， 推荐github的教程： [github Markdown 教程](https://guides.github.com/features/mastering-markdown/)\n\n在本文中， 以下几点我们需要注意：\n\n### 标题类的语法标记必须使用空格隔开，大标题与正文之间需要一个空行，比如：\n\n```markdown\n## 这是二级标题\n\n* 这是列表项1\n* 这是列表项2\n\n```\n而如下所示的则不是正确的，可能会导致解析器出现解析错误格式错乱等\n\n```markdown\n##这是二级标题\n*这是列表项1\n*这是列表项2\n```\n\n### 所有页面只有一个一级标题\n\n由于需要自动生成目录，主要是为了保证自动生成的目录正确。\n每个页面这样写\n```\n页面标题/一级标题\n=======         (这里等号至少需要三个)\n                ( 至少需要一个以上的空行，建议2行 )\n\n## 二级标题1     ( 这里不能使用一级标题，及不能用一个#号。 也不需要写序号，会自动生成序号)\n                ( 空一行 )\n正文\n                ( 至少空一行)\n### 三级标题      ( 类似二级标题, 也不需要写需要，会自动生成)\n\n正文\n\n## 二级标题2\n\n正文\n\n\n```\n\n### 链接\n\n由于页面众多，而且需要链接图片等资源，在写链接时，均使用相对路径，\n比如目录结构如下\n```\nassets/                                 (放公用的资源文件)\n      |\n      ----pic000.png\nen/\n   |\n   ----- get_started/\n                  |\n                  ---- assets/          (放get_started目录下md文件公用的资源文件)\n                             |\n                             ------ pic.png\n                  |\n                  ---- get_hardware.md\n                  |\n                  ---- how_to_read.md\nzh/\n```\n\n如果在`get_hardware.md`中贴图片，将图片放进`assets`文件夹后，使用如下代码引用图片\n```\n![pic](assets/pic.png)\n![pic](../../assets/pic000.png)\n```\n\n\n### 中英文混写\n\n在写中文文档时，在中文中夹杂英文尽量用空格隔开，标点符号尽量使用全角符号，\n主要是为了显眼，让文档更优雅。\n比如如下对比：\n\n---------\n\n```markdown\nThe `setup` function is called when a sketch starts. Use it to initialize variables, pin modes, start using libraries, etc.\n```\nThe `setup` function is called when a sketch starts. Use it to initialize variables, pin modes, start using libraries, etc.\n\n----------\n\n```markdown\nThe setup function is called when a sketch starts. Use it to initialize variables, pin modes, start using libraries, etc.\n```\nThe setup function is called when a sketch starts. Use it to initialize variables, pin modes, start using libraries, etc.\n\n---------\n\n## 目录和文件名\n\n* 生成的文档目录在对应语言的文件夹`SUMMARY.md`中编辑\n\n* 源文档的文件夹尽量一个功能模块对应一个文件夹，资源文件（图片）放置到对应 md 文档的当前路径的 `assets`文件夹目录下，这样在增删修改时更方便\n\n```\nassets/                                 (放公用的资源文件)\nen/\n   |\n   ----- get_started/\n                  |\n                  ---- assets/          (放get_started目录下md文件公用的资源文件)\n                  |\n                  ---- get_hardware.md\nzh/\n```\n\n* 文件名除了`README.md`特殊，其它文件名使用 小写+下划线 的命名方式，比如 `get_hardware.md`\n\n\n\n## 中英文（多语言）的页面文件目录结构和文件名相同\n\n由于最后生成的页面中有多语言切换选项，点击切换后会直接访问对应语言的相同路径，所以中英文的目录结构和文件名必须相同。\n\n比如英文正在访问`en/get_started/how_to_read.md`， 点击语言切换的按钮后，会自动访问`zh/get_started/how_to_read.md`， 如果这个文件不存在就会报`404`错误！\n\n\n## 目录和链接\n\n尽量引导阅读者使用目录，文内跳转链接慎用，如果链接跳得比较乱，会导致文档看起来比较乱，阅读会比较困难。\n\n## 模块文档内容\n\n* 需要在文件头部包含模块的介绍\n* 需要分点说明构造函数、函数、常量等\n* **说明不能偷懒只简单将函数名称翻译一遍，需要详细说明函数的功能、参数的取值范围以及注意点**\n\n## 多版本管理\n\n文档除了做了中英文（多语言）支持（不是自动翻译，需要手动修改）， 也做了多版本管理。\n\n每个版本是一个分支， 对分支名字有要求， 分别为： \n* `master` 分支为主分支\n* `dev`分支为开发分支\n* 其它的发布的历史版本均以小写 `v` 开头，比如创建一个分支叫 `v1.2`\n\n创建好新的分支后，需要在每个语言版本的目录下 `book.json`中修改版本链接，不然读者找不到入口\n\n可以在新建的分支下本地预览（预览方法见根目录 `README.md`）， 注意这时候预览的页面就是当前分支的内容，如果要本地预览其它分支内容，需要先切换到其它分之后再预览即可。\n\n确认无误修改完成后推送分支到远程（github）， 自动构建系统会自动构建并发布到 pages 分支， 等构建完毕访问网址即可看到效果。"}, "/soft/maixduino/zh/cores/serial.html": {"title": "Serial", "content": "Serial\n=====\n\nIn Maixduino, there are two types of serial devices, `UARTHSClass` and `UARTClass`.\nThe `Serial` corresponds to the `UARTHSClass`, and the remaining `Serial1`, `Serial2`, and `Serial3` are `UARTClass`. `Serial` uses the default pin as **4** (RX), **5** (TX).\nSo you can use it in the serial monitor on your computer.The default pins for the other three global serial ports are **6**(RX), and **7**(TX) (they are connected to the WiFi module),To use them correctly, set different pins for them in `begin()`.\n\n## Functions\n\nThe operation of the serial port is exactly the same as that of Arduino. You can find more information on the [Arduino website](https://www.arduino.cc/reference/en/language/functions/communication/serial/).\n\n`if(Serial)`\n\n`available()`\n\n`availableForWrite()`\n\n`begin()`\n\n`end()`\n\n`find()`\n\n`findUntil()`\n\n`flush()`\n\n`parseFloat()`\n\n`parseInt()`\n\n`peek()`\n\n`print()`\n\n`println()`\n\n`read()`\n\n`readBytes()`\n\n`readBytesUntil()`\n\n`readString()`\n\n`readStringUntil()`\n\n`setTimeout()`\n\n`write()`\n\n`serialEvent()`\n\n----\n## Serial port settings\n\nSerial.begin(BaudRate, RX , TX )\n\n### Notes\n\nFor `platform.io` change the serial monitor baudrate in `platform.ini`.\n\n```\n; serial monitor baudrate\nmonitor_speed = 115200\n```\n\n----\n## Serial.println()\n\n### 描述\n\nPrints data to the serial port as human-readable ASCII text followed by a carriage return character (ASCII 13, or '\\r') and a newline character (ASCII 10, or '\\n'). This command takes the same forms as `Serial.print()`.\n\n### 用法\n\n`Serial.println(val)`\n\n`Serial.println(val, format)`\n\n### 参数\n\n`Serial`: serial port object.\n\n`val`: the value to print. Allowed data types: any data type.\n\n`format`: specifies the number base (for integral data types) or number of decimal places (for floating point types).\n\n### 返回值\n\n`println()` returns the number of bytes written, though reading that number is optional. Data type: `size_t`.\n\n### 示例代码\n```\n#include <Arduino.h>\n\nvoid setup()\n{\n  Serial.begin(9600);\n}\n\nvoid loop()\n{\n  Serial.println(\"Hello world\");\n  delay(2000);\n}\n```\n----\n\n## Serial Monitor in `platform.io`\n```\n-- Available ports:\n---  1: /dev/ttyUSB0         'USB Debugger'\n---  2: /dev/ttyUSB1         'USB Debugger'\n--- Enter port index or full name: 2\n```"}, "/soft/maixduino/zh/cores/digital.html": {"title": "数字 I/O", "content": "数字 I/O\n=====\n\nMaixduino 支持基本的 Arduino 输入输出函数，你可以像使用其他 Arduino 开发板一样使用它们。\n\n* Maixduino 可以自由操作不超过 32 个数字 IO 口，并可以将它们同时映射到 48 个 FPIO 上。\n\n## digitalRead()\n\n### 描述\n\n    从选定的 IO 引脚读取电平, `HIGH`或者`LOW`.\n\n### 用法\n\n`digitalRead(pin)`\n\n### 参数\n\n`pin` : 你要读取的数字 IO 引脚。（0 - 47， Maixduino board 为 0 - 13*）\n\n### 返回值\n\n`HIGH` 或者 `LOW`\n\n### 注意事项\n\n* 只有在 `pinMode()` 初始化后的引脚才可以读取。\n* \\* Maixduino board 上的 SDA SCL 可作为普通数字引脚 14 15 号使用，BOOT key 作为 16 号引脚使用。\n\n-----\n\n## digitalWrite()\n\n### 描述\n\n将一个数字引脚设置为高电平或者低电平。\n\n### 用法\n\n`digitalWrite(pin, value)`\n\n### 参数\n\n`pin`: 引脚号\n\n`value`: `HIGH` 或者 `LOW`\n\n### 返回值\n\n无\n\n### 注意事项\n\n* 只有在 `pinMode()` 初始化后的引脚才可以改变状态。\n\n-----\n\n## pinMode()\n\n### 描述\n\n设置一个引脚为输入或输出模式。\n\n### 参数\n\n`pin`: 需要设置的引脚\n\n`mode`: `INPUT`, `OUTPUT`, `INPUT_PULLDOWN` 或者 `INPUT_PULLUP`. \n\n### 返回值\n\n无\n\n### 注意事项\n\n在使用 `digitalRead()` 或者 `digitalWrite()` 前，必须使用此函数初始化对应引脚。\n\n### 示例代码\n\n```\nvoid setup() {\n  pinMode(13, OUTPUT);    // sets the digital pin 13 as output\n}\n\nvoid loop() {\n  digitalWrite(13, HIGH); // sets the digital pin 13 on\n  delay(1000);            // waits for a second\n  digitalWrite(13, LOW);  // sets the digital pin 13 off\n  delay(1000);            // waits for a second\n}\n```\n\n将引脚13设置为与引脚16相同的值，声明为输入。\n\n```\nint ledPin = 13;  // LED connected to digital pin 13\nint inPin = 16;    // pushbutton connected to digital pin 16\nint val = 0;      // variable to store the read value\n\nvoid setup() {\n  pinMode(ledPin, OUTPUT);  // sets the digital pin 13 as output\n  pinMode(inPin, INPUT);    // sets the digital pin 16 as input\n}\n\nvoid loop() {\n  val = digitalRead(inPin);   // read the input pin\n  digitalWrite(ledPin, val);  // sets the LED to the button's value\n}\n```"}, "/soft/maixduino/zh/cores/analog.html": {"title": "模拟 I/O", "content": "模拟 I/O\n=====\n\nMaixduino 使用 K210 芯片的 PWM 模块实现模拟输出 analogWrite() 功能。 不能使用模拟输入 analogRead() 功能\n\nMaixduino 可以在 48 个自由引脚中最多选择 12 个设置模拟输出功能。(使用硬件定时器会减少可用引脚。)\n\n## analogWrite()\n\n### 描述 \n\n设置一个模拟值（PWM波）到选定引脚。 可用于点亮不同亮度的LED或改变驱动电机的速度。\n\n### 用法\n\n`analogWrite(pin, value)`\n\n### 参数\n\n`pin`: 要设置的引脚。允许的数据类型: `int`。\n`value`: 占空比，取值 0 - 255 . 允许的数据类型: `int`。\n\n### 返回值\n\n无\n\n### 注意事项\n\n使用 Ticker 库或者硬件定时器可能会和 PWM 产生冲突。\n\n-----\n\n## analogWriteResolution()\n\n### 描述\n\n`analogWriteResolution()` 是 Maixduino 的扩展 API 。\n\n`analogWriteResolution()` 用于设置 `analogWrite()` 的精度. 默认为 8 位 (取值范围 0-255)。\n\n\n通过将精度设置为 12 位,  `analogWrite()` 的取值范围可变为 0 - 4095 。\n\n### 用法\n\n`analogWriteResolution(bits)`\n\n### 参数\n\n`bits`: 确定analogWrite（）函数中使用的值的分辨率（以位为单位）。该值的范围为1到32。\n\n### 返回值\n\n无\n\n### 注意事项\n\n\n通过调整PWM占空比可能不会导致显着的精度变化。\n\n### 示例代码\n\n### 示例代码 Maix Bit, Maix Dock, Maix Go\n\n```\nint led1 = 12; // LED_BLUE\nint led2 = 13; // LED_GREEN | LED_BUILTIN\nint led3 = 14; // LED_RED\n\nvoid setup()\n{\n  pinMode(led1, OUTPUT);\n  pinMode(led2, OUTPUT);\n  pinMode(led3, OUTPUT);\n}\n\nvoid setColor(int red, int green, int blue)\n{\n  analogWrite(led1, 255-blue);\n  analogWrite(led2, 255-green);\n  analogWrite(led3, 255-red);\n}\n\nvoid loop()\n{\n  int i, j;\n  for (i=0, j=255; i<256; i++)\n  {\n    setColor(i, j, 0);\n    delay(4);\n    j--;\n  }\n  delay(100);           \n  for (i=0, j=255; i<256; i++)\n  {\n    setColor(j, 0, i);\n    delay(4);\n    j--;\n  }\n  delay(100);           \n  for (i=0, j=255; i<256; i++)\n  {\n    setColor(0, i, j);\n    delay(4);\n    j--;\n  }\n  delay(100);        \n}\n```\n\n### 示例代码 Maixduino\n\n```\nint led1 = 1; // LED_BUILTIN\n\nvoid setup()\n{\n  pinMode(led1, OUTPUT);\n}\n\nvoid setColor(int value)\n{\n  analogWrite(led1, 255-value);\n}\n\nvoid loop()\n{\n  int i;\n  for (i=0; i<256; i++)\n  {\n    setColor(i);\n    delay(4);\n  }\n  delay(100);        \n}\n```"}, "/soft/maixduino/zh/cores/interrupts.html": {"title": "", "content": ""}, "/soft/maixduino/zh/cores/time.html": {"title": "", "content": "时间\n\n=====\n\n## delay()\n\n### 描述\n\n\n使程序暂停一段时间（以毫秒为单位）。 （一秒钟内有1000毫秒）。\n\n### 用法\n\n`delay(ms)`\n\n### 参数\n\n`ms`: 要暂停的毫秒数。 数据类型：`unsigned long`\n\n### 返回值\n\n无\n\n## delayMicroseconds()\n\n### 描述\n\n使程序暂停一段小时间（以微秒为单位）。 （一秒钟内有1000000毫秒）。\n\n### 用法\n\n`delayMicroseconds(us)`\n\n### 参数\n\n`us`: 要暂停的微秒数。 数据类型：`unsigned int`\n\n### 返回值\n\n无\n\n-----\n\n## micros()\n\n返回自Maixduino开始运行当前程序以来的微秒数。\n\n### 用法\n\n`time = micros()`\n\n### 参数\n\n无\n\n### 返回值\n\n返回自Maixduino开始运行当前程序以来的微秒数。 数据类型 ： `unsigned long`\n\n-----\n\n## millis()\n\n### 描述\n\n\n返回自Maixduino开始运行当前程序以来经过的毫秒数。大约50天后，此数字将溢出（回到零）。\n\n### 用法\n\n`time = millis()`\n\n### 参数\n\n无\n\n### 返回值\n\n自程序启动以来经过的毫秒数。数据类型 ：`unsigned long`"}, "/soft/maixduino/zh/cores/advanced.html": {"title": "高级 I/O", "content": "高级 I/O\n=====\n\n\n## tone()\n\n### 描述\n\n\n在引脚上生成指定频率（和 50％ 占空比）的方波。可以指定持续时间，否则声音会一直持续到调用noTone（）结束。该引脚可以连接到压电蜂鸣器或其他扬声器来播放声音。\n\n### 用法\n\n`tone(pin, frequency)`\n\n`tone(pin, frequency, duration)`\n\n### 参数\n\n`pin`: 选定产生声音信号的引脚。\n\n`frequency`: 产生声音的频录，单位 HZ 。数据类型 ： `unsigned int`\n\n`duration`: 产生声音的时间，单位 毫秒。 数据类型 ： `unsigned long`\n\n### 返回值\n\n无\n\n### 注意事项\n\n如果你想在多个引脚上播放不同的音高，你需要在一个引脚上调用 `noTone()` 然后在下一个引脚上调用 `tone()`。\n\n-----\n\n## noTone()\n\n\n停止由 `tone()` 产生的声音输出。如果没有声音，则此函数无效。\n\n### 用法\n\n`noTone(pin)`\n\n### 参数\n\n`pin`: 要停止产生声音的引脚。\n\n### 返回值\n\n无\n\n### 注意事项\n\n如果你想在多个引脚上播放不同的音高，你需要在一个引脚上调用 `noTone()` 然后在下一个引脚上调用 `tone()`。"}, "/soft/maixduino/zh/cores/constants.html": {"title": "", "content": "常量\n\n=====\n\nMaixduino 兼容绝大多数的 Arduino 常量， 你能在下列网站找到使用说明。[Arduino website](https://www.arduino.cc/reference/en/#variables).\n\n## LED\n```\n#define LED_BUILTIN          13\n#define LED_GREEN            13\n#define LED_BLUE             12\n#define LED_RED              14\n```"}, "/soft/maixduino/zh/libs/sipeed_st7789.html": {"title": "", "content": ""}, "/soft/maixduino/zh/libs/speechrecg.html": {"title": "", "content": ""}}