{"/soft/longan/en/get_started/sipeed-debugger.html": {"title": "Using the Sipeed debugger", "content": "Using the Sipeed debugger\n=====\n\n## Sipeed rv debugger\n\n\n## Sipeed rv debugger lite"}, "/soft/longan/en/get_started/blink.html": {"title": "Getting to Blinky", "content": "Getting to Blinky\n=====\n\n## Create a LED Blink project\n\n* Open the PIO home page selection `Project Examples`\n\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/d977e844490e6ccc4625f701883a29f5.png)\n\n* Select `arduino blink` Click `Import` Import sample program (first need to download the schema file and import tool, It may take long time to download)\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/82943a6b74077e6210e2d9421cb5438f.png)\n\n\n* You can see the sample project after the import is successful.\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/1262373ca7b0b483e30dac1124adaabf.png)\n\n## Project configuration file\n\n\n* We first need to edit the configuration file works `platformio.ini` according to their own development board model, delete the other development board environmen.\n\n![](../../assets/pio_ini_cfg.png)\n\nConfiguration example\n```ini\n[env:sipeed-longan-nano]\nplatform = gd32v          ;Platform, choose gd32v\nframework = arduino       ;Optional gd32vf103-sdk or arduino\nboard = sipeed-longan-nano ; Development board\nmonitor_speed = 115200     ; Serial monitor baudrate\nupload_protocol = serial       ; Download tool Default serial port, optional jlink, gd-link, dfu, etc.\ndebug_tool = jlink         ; Debugging tool default jlink, optional sipeed-rv-debugger, etc.\n```\nPIO can implement setting macro definitions in the configuration file, control custom functions such as compilation process, etc. For advanced usage, please refer to [PIO official documentation](https://docs.platformio.org/en/latest/projectconf.html).\n\n## One-click compilation\n\nClick on the lower left corner `Build` to build the project\n![](../../assets/pio_complie.png)\n\n## Connect to the development board\n### Serial ISP download\n* Prepare the USB to serial downloader\n* Connect development board and downloader\n* Modify the `platformio.ini` file and add the following line:\n```ini\nupload_protocol = serial\n```\n* Development board hold down the `BOOT` key, then press the `RESET` button to restart development board and then release the `BOOT` button to enter download mode development board.\n\n### JTAG download\n* Prepare J-link or Sipeed RV Debugger\n* Connection development board\n* Modify the `platformio.ini` file, add the following line:\n```ini\nupload_protocol = jlink\n```\nor\n```ini\nupload_protocol = sipeed-rv-debugger\n```\n\n### USB DFU download\n* If using it for the first time then you need to install libusb driver, please refer to this guide [using Zaidig install the driver](#install-drivers-using-zadig).\n* Prepare the USB Type-C cable\n* Use a data cable to connect development board to your computer.\n* Modify the `platformio.ini` file, add the following line:\n```ini\nupload_protocol = dfu\n```\n* Development board hold down the `BOOT` key, then press the `RESET` button to restart development board and then release the `BOOT` button to enter DFU mode.\n\n\n## One click download\n\nAfter selecting the download method according to the above steps, you can use the PIO built-in tool to download it with one click.\n\nClick on the lower left corner `Upload` to upload the program to the development board.\n\n![](../../assets/pio_upload.png)\n\n## Install drivers using Zadig\nPIO has a built-in dfu-util download tool. To use this tool, you need to install the libusb driver for the development board. (Note: different from GD official driver)\n\nIt is recommended to install the winusb driver via Zadig. [download link](https://github.com/pbatard/libwdi/releases/download/b721/zadig-2.4.exe)\n\nOpen Zadig after successful download\n\nSelect GD32V in the drop-down bar, replace the driver with WinUSB, click the Replace button, and the replacement will succeed.\n\n![](../../assets/dfu_zadig.png)\n\n### USB DFU download\nDownload the DFU tool：http://dl.sipeed.com/LONGAN/Nano/Tools/GD32_MCU_Dfu_Tool_V3.8.1.5784_1.rar\n\nUnzip two folders：\n\nGD32 MCU Dfu Drivers_v1.0.1.2316 and GD32 MCU Dfu Tool_v3.8.1.5784\n\nFirst enter the driver folder, install the corresponding driver file, pay attention to run with administrator privileges\n\n![](../../assets/examples/how_to_install_dfu.png)\n\nRun GD32 MCU Dfu Tool.exe Insert Longan Nano into the computer, press and hold the Boot0 key, short press the Reset key, then release the Boot0 key, you can see that the GD32VF chip is recognized in the DFU tool.\n\nSelect the corresponding firmware file, and check the checksum after burning. Click OK to burn.\n\nAfter the burning is completed, it will not be reset automatically. You need to manually press the reset button to check the running effect.\n\n![](../../assets/examples/how_to_use_dfu.png)"}, "/soft/longan/en/get_started/debug.html": {"title": "Debugging Longan Nano", "content": "Debugging Longan Nano\n======\n\n## Connect the debugger\n| Development board | Debugger |\n| :----: | :----: |\n|  JTDO  |  TDO   |\n|  JTDI  |  TDI   |\n|  JTCK  |  TCK   |\n|  JTMS  |  TMS   |\n|  3V3   |  3V3   |\n|  GND   |  GND   |\n\n## Modify the configuration file\nModify the project configuration file `platformio.ini`, add below\n\n```ini\ndebug_tool = jlink\n```\n\nSelect according to the actual debugger model. List of currently supported debuggers\n\n* `jlink`\n* `gd-link`\n* `ft2232`\n* `sipeed-rv-debugger`\n* `altera-usb-blaster`\n* `um232h`\n* `RV-Link`\n\n## One-click debugging\n\nVSCode switch to the left side of the `DEBUG` screen, click the green arrow to debug.\n\n![](../../assets/pio_debug_longan.png)."}, "/soft/longan/en/get_started/pio.html": {"title": "PIO configuration", "content": "PIO configuration\n=====\n\n## Install VSCode\nVS CODE is a more common development tool. Go to the VSCode official website and download and install the installation package for the corresponding operating system version.\n\n## Install the PIO plugin\nOpen VSCode -> click on the left extension -> search for PlatformIO -> click install plugin -> wait for the installation to complete -> restart VSCODE\n\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/0d501a8515a735fba54e2f5de908cd1e.png)\n\n## Install the GD32V platform definition\n\nPIO currently offers both **command line** and **graphical interface** installation. The following will introduce:\n(PS: Recommended command line, because you can see the download progress bar.)\n\n### Command line\n\nClick the PlatformIO logo on the left -> click New Terminal at the bottom left -> execute the following installation command in the terminal window\n\n* Release version (stable version)\n```\nplatformio platform install gd32v\n```\n\n* Development version (synchronized with Github)\n```\nplatformio platform install https://github.com/sipeed/platform-gd32v\n```\n![](../../assets/pio_install_gd32v.png)\n\nNote: Due to the domestic network environment, the installation process takes a long time, please be patient.\n\n\n### Graphical interface\n\nOpen VS CODE -> click on the PIO icon on the left -> click on the Open option at the bottom left -> click on the Platforms page -> click on Advanced Installation to open the add window\n![](../../assets/pio_install_add_gd32v_step1.png)\n\nEnter the following URL in the window that opens\n```\nhttps://github.com/sipeed/platform-gd32v.git\n```\n\nClick Install to add it.\n\n![](../../assets/pio_install_add_gd32v_step2.png)\n\nWait patiently to install successfully. (The installation failure is mostly for network reasons, please try again after replacing the network environment)\n\n![](../../assets/pio_install_add_gd32v_step3.png)"}, "/soft/longan/en/get_started/rv-link.html": {"title": "Using RV-LINK", "content": "Using RV-LINK\n=========\n\n## What is RV-LINK\n\n**RV-LINK** is a simulation-based firmware development board RISC-V, by programming **RV-LINK** firmware can be **Sipeed Longan Nano** development board into a jtagdebugger for debugging another piece Longan or other development support jtag debugging board. RV-LINK project address: [https://gitee.com/zoomdy/RV-LINK](https://gitee.com/zoomdy/RV-LINK)\n\n## Burn RV-LINK firmware\n\n### Using the PlatformIO project to burn a key\n* Download RV-LINK source code\n\n    Project source code download address: [http://dl.sipeed.com/LONGAN/Nano/Tools/RV-LINK-pio-src-v0.1.zip](http://dl.sipeed.com/LONGAN/Nano/Tools/RV-LINK-pio-src-v0.1.zip)\n\n    It can also be downloaded from the official RV-LINK project: [https://gitee.com/zoomdy/RV-LINK](https://gitee.com/zoomdy/RV-LINK)\n\n* Open the project directory with VSCODE\n\n    Extract the source code downloaded above into a separate folder and open the source folder using VSCODE\n\n    As shown below:\n    ![](../../assets/pio_open_rvlink.png)\n\n    The firmware is usually burned using the DFU method, and the configuration file **does not need to be** modified.\n\n    If you need to change the programming mode, you can modify `platformio.ini` to modify the file, please refer to the specific configuration:[modify the project configuration file](blink.md/#project-configuration-file)\n\n* Burn firmware with PIO\n\n    After connecting the development board, after the development board enters the burning mode, click the arrow symbol in the lower left corner to burn.\n\n    After the programming is successful, you can see the green light flashing on the development board. After connecting the development board to the USB port of the computer, you can see that there is one more serial device in the device manager. At this point the Longan board successfully became the RV-LINK debugger.\n\n### Other burning methods\n\nReference Document:  [Turning the Longan Nano Development Board into a RISC-V Emulator](https://gitee.com/zoomdy/RV-LINK/wikis/%E5%B0%86%20Longan%20Nano%20%E5%BC%80%E5%8F%91%E6%9D%BF%E5%8F%98%E6%88%90%20RISC-V%20%E4%BB%BF%E7%9C%9F%E5%99%A8)\n\n## Debugging with RV-LINK\n\n### Connecting the development board\n\nConnect the development board that brushes the RV-LINK firmware to the jtag of the development board to be debugged.\n\n| RV-LINK | To be debugged development board |\n| :----: | :----: |\n|  JTDO  |  JTDO  |\n|  JTDI  |  JTDI  |\n|  JTCK  |  JTCK  |\n|  JTMS  |  JTMS  |\n|  3V3   |  3V3   |\n|  GND   |  GND   |\n\n### Using RV-LINK in the PlatformIO IDE\n\nRV-LINK in the PlatformIO IDE can support one-button boot debugging just like any other debugger.\n\nOnly in the project `platformio.ini` configuration file, specify the debug options and debug port option.\n\nSample code\n\n```ini\n[env:sipeed-longan-nano]\nplatform = gd32v\nframework = gd32vf103-sdk\nboard = sipeed-longan-nano\nmonitor_speed = 115200\nupload_protocol = rv-link ; rv-link download option\ndebug_tool = rv-link ; rv-link debug option\ndebug_port = COM2    ;  Required with rv-link Required debugger serial port\n```\n\n### Using RV-LINK on other platforms\n\nReference [RV-LINK WIKI](https://gitee.com/zoomdy/RV-LINK/wikis/)"}, "/soft/longan/en/index.html": {"title": "Longan Documentation", "content": "Longan Documentation\n======\n\n<div class=\"title_pic\">\n    <img src=\"../assets/sipeed_longan_logo.jpg\" height=\"60\">  <img src=\"../assets/icon_sipeed2.png\"  height=\"60\">\n</div>\n\n\n\n## What is Longan\n\nLongan Nano is a GD32VF103CBT6 based minimal development board based on GigaDevice's latest RISC-V 32-bit core microcontroller. Convenient for students, engineers, geeks and enthusiasts to access the latest generation of RISC-V processors.\n\nIn the heart of Longan Nano is a GigaDevice's GD32VF103CBT6, based on [Nucleisys](http://www.nucleisys.com/) Bumblebee kernel (support RV32IMAC instruction sets and ECLIC rapid interrupt). You can download instruction set documents here: [http://dl.sipeed.com/LONGAN/Nano/DOC/](http://dl.sipeed.com/LONGAN/Nano/DOC/).\n\nThe chip has built-in 128KB Flash, 32KB SRAM, and peripherals listes below:\n* 4 x universal 16-bit timer\n* 2 x basic 16-bit timer\n* 1 x advanced 16-bit timer\n* Watchdog timer\n* RTC\n* Systick\n* 3 x USART\n* 2 x I2C\n* 3 x SPI\n* 2 x I2S\n* 2 x CAN\n* 1 x USBFS(OTG)\n* 2 x ADC(10 channel)\n* 2 x DAC\n\nLongan Nano development board is breadboard friendly. It has onboard 8M passive crystal, 32.768KHz RTC low-speed crystal, mini TF card slot, and use the latest Type-C USB interface.\n\n## How to develop\n\nLongan Nano supports development using the VS CODE-based under PlatformIO IDE environment, supporting one-click project configuration, compilation, download and debugging. See the installation and tutorial here: [PIO configuration](./get_started/pio.html).\n\n![pio_debug](../assets/longan_pio_debug.jpg)\n\n## PIN Map\n\n![](../assets/Longan-nano_PINOUT.svg)"}, "/soft/longan/en/no_translate.html": {"title": "no translation", "content": "---\ntitle: no translation\nclass: md_page\n---\n\n\n<div id=\"visit_from\"></div>\n<div id=\"no_translate_hint\">This page not translated yet</div>\n<div>\n    <span id=\"visit_hint\">Please visit</span>\n    <a id=\"translate_src\"></a>\n</div>\n\n<div>\n    <script>\n        function getQueryVariable(variable)\n        {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    if(pair[0] == variable){return pair[1];}\n            }\n            return(false);\n        }\n        var ref = getQueryVariable(\"ref\");\n        var from = getQueryVariable(\"from\");\n        var link = document.getElementById(\"translate_src\");\n        var fromDis = document.getElementById(\"visit_from\");\n        link.href = ref;\n        link.text = ref;\n        fromDis.innerHTML = from;\n    </script>\n</div>"}}